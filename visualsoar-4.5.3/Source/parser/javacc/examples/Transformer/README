The example in this directory takes an extension of Java as input and
converts it into proper Java.  The purpose of this example is to
illustrate:

1. The use of the "next" field of tokens.

2. To illustrate how one can use JJTree to build a parse tree for a
   small part of the input and ignore the rest of the file.

3. Combine 1 and 2 to process the portion for which tree nodes are
   created and leave the rest of the file unchanged.

The Java language extension handled by the grammar (ToyJava.jjt)
allows catch and finally specifications at the end of method blocks.
So the following is allowed (as an example):

	void foo() {
	  ...
	} catch (Exception e) {
	  ...
	}

The grammar file ToyJava.jjt is a modification of Java1.1.jj.  Note
how we have changed the SKIP tokens to SPECIAL_TOKENS so that the
output file is identical to the input file.

To try this out, type:

	jjtree ToyJava.jjt
	javacc ToyJava.jj
	javac *.java
	java ToyParser divide.toy divide.java

And then compare divide.java to divide.toy.
