This version of the GUI parsing example defines the GUI interaction as
a JavaCC lexical specification where the characters are read from the
GUI and there is an finite automaton (FA) built out of lexical states
that have moves on these characters. In the grammar, the
USER_CHAR_STREAM option is set to true and the BUILD_PARSER option has
bee set to false.  The event handler method stuffs the characters into
a buffer from which characters are returned to the lexical analyzer
(by readChar). The whole system is invoked through Main.java.

The point of this example is to illustrate:

. A very detailed example of an FA simulation using lexical states
  where every character moves the FA.

. How a lexical analyzer can be used without a standard (JavaCC
  generated) CharStream object.

. How a lexical analyzer can be used without a parser.

. The fact that input can come from entities that are not even streams
  (a GUI in this example).

. That GUI interaction can be modeled as a regular expression
  specification.

To run the calculator (which is what this example implements), do:

	javacc CalcInput.jj
	javac *.java
	java Main

Homework:

   Simplify the grammar so that (["0"-"9"])* is treated as a single
   entity for moving the FA.
