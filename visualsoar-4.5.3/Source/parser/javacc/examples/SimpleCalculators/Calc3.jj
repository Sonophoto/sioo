/*
 * In this second modification to the Calc grammar, we now add
 * "Identifiers" to the token list so that we can parse functions.
 * Functions are specified in the function() production.
 *
 * Further, we've added some logical operations, &, |, and ^ to the
 * existing mathematical ones.
 *
 * The grammar now supports the plus (+), minus (-)
 * multiply (*), divide (/) and exponentiation operations.
 *
 * See Calc3i.jj for a grammar that parses and implements
 * the functions.
 *
 * Example grammar written 11/1/96 by Chuck McManis (cmcmanis@netcom.com)
 */

options {
    LOOKAHEAD=1;
}

PARSER_BEGIN(Calc3)

public class Calc3 {

    public static void main(String args[]) throws ParseException {
	Calc3 parser = new Calc3(System.in);
	while (true) {
	    System.out.print("Enter Expression: ");
	    System.out.flush();
	    try {
		switch (parser.one_line()) {
		    case -1:
			System.exit(0);
		    default:
			break;
		}
	    } catch (ParseException x) {
		System.out.println("Exiting.");
		throw x;
	    }
	}
    }
}
PARSER_END(Calc3)

SKIP :
{
 	" "
|	"\r"
|	"\t"
}

TOKEN :
{
	< EOL: "\n" >
}

TOKEN : /* OPERATORS */
{
	< PLUS: "+" >
  |	< MINUS: "-" >
  |	< MULTIPLY: "*" >
  |	< DIVIDE: "/" >
  |	< EXP: "**" >
  |	< AND: "&" >
  |	< OR: "|" >
  |	< XOR: "^" >
}

TOKEN : /* Numeric Constants */
{
	< CONSTANT: <FLOAT>
	    | <FLOAT> ( ["e","E"] ([ "-","+"])? <INTEGER> )?
    	>
  | 	< #FLOAT: <INTEGER> 
	    | <INTEGER> ( "." <INTEGER> )?
	    | "." <INTEGER>
    	>
  | 	< #INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >
}

TOKEN : /* Function names */
{
	< ID: ( <LETTER> )+ ( <DIGIT> | <LETTER> )* >
  | 	< #LETTER: ["a"-"z", "A"-"Z"] > 
} 

int one_line() :
{}
{
    logical() <EOL>
	{ return 1; }
  | <EOL>
	{ return 0; }
  | <EOF>
	{ return -1; }
}

void logical() :
{ }
{
    sum() (( <AND> | <OR> | <XOR> ) sum())*
}

void sum() :
{ }
{
    term() (( <PLUS> | <MINUS> ) term())*
}

void term() :
{ }
{
    exp() (( <MULTIPLY> | <DIVIDE> ) exp())*
}

void exp() :
{ }
{
    unary() ( LOOKAHEAD( <EXP> ) <EXP> exp() )*
}

void unary() :
{ }
{
    <MINUS> element()
  | element()
}

void element() :
{}
{
     <CONSTANT>
  |  function()
  |  "(" logical() ")"
}

void function() :
{ }
{
    <ID> "(" [ logical() ( "," logical() )* ] ")"
}
