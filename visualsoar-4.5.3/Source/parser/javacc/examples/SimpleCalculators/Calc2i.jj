/*
 * This is the first modification to the basic expression grammar.
 * There are two changes, first the type of 'constant' supported is
 * now a floating point number. This definition for the Token CONSTANT
 * Gained a few levels of complexity, but they are still pretty straight
 * forward. The second change was that we added a 'right associative' 
 * operator, exponentiation. This operator is '**' (<EXP>) and the
 * right associtivity is expressed using a right-recursive grammar
 * specification. The LOOKAHEAD specification tells JavaCC to look ahead
 * for an <EXP> token, otherwise the right match won't be taken. 
 *
 * The grammar now supports the plus (+), minus (-)
 * multiply (*), divide (/) and exponentiation operations.
 *
 * See Calc2.jj for the bare grammar (without embedded Java code)
 *
 * Example grammar written 11/1/96 by Chuck McManis (cmcmanis@netcom.com)
 */

options {
    LOOKAHEAD=1;
}

PARSER_BEGIN(Calc2i)

public class Calc2i {
    static double total;
    static java.util.Stack argStack = new java.util.Stack();

    public static void main(String args[]) throws ParseException {
	Calc2i parser = new Calc2i(System.in);
	while (true) {
	    System.out.print("Enter Expression: ");
	    System.out.flush();
	    try {
		switch (parser.one_line()) {
		    case -1:
			System.exit(0);
		    case 0:
			break;
		    case 1:
			double x = ((Double) argStack.pop()).doubleValue();
			System.out.println("Total = " + x);
			break;
		}
	    } catch (ParseException x) {
		System.out.println("Exiting.");
		throw x;
	    }
	}
    }
}
PARSER_END(Calc2i)

SKIP :
{
 	" "
  |	"\r"
  |	"\t"
}

TOKEN :
{
	< EOL: "\n" >
}

TOKEN : /* OPERATORS */
{
	< PLUS: "+" >
  |	< MINUS: "-" >
  |	< MULTIPLY: "*" >
  |	< DIVIDE: "/" >
  |	< EXP: "**" >
}

TOKEN :
{
	< CONSTANT: <FLOAT>
	    | <FLOAT> ( ["e","E"] ([ "-","+"])? <INTEGER> )?
    	>
  | 	< #FLOAT: <INTEGER> 
	    | <INTEGER> ( "." <INTEGER> )?
	    | "." <INTEGER>
    	>
  | 	< #INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >
}

int one_line() :
{}
{
    sum() <EOL>
	{ return 1; }
  |  <EOL>
	{ return 0; }
  |  <EOF>
	{ return -1; }
}

void sum() :
{Token x;}
{
    term() ( 
	( x = <PLUS> | x = <MINUS> ) term()
	{
	    double a = ((Double) argStack.pop()).doubleValue();
	    double b = ((Double) argStack.pop()).doubleValue();
	    if ( x.kind == PLUS )
		argStack.push(new Double(b + a));
	    else
		argStack.push(new Double(b - a));
	}
    )*
}

void term() :
{Token x;}
{
    exp() ( 
	( x = <MULTIPLY> | x = <DIVIDE> ) exp()
	{
	    double a = ((Double) argStack.pop()).doubleValue();
	    double b = ((Double) argStack.pop()).doubleValue();
	    if ( x.kind == MULTIPLY )
	        argStack.push(new Double(b * a));
	    else
		argStack.push(new Double(b / a));
	}
    )*
}

void exp() :
{ }
{
    unary() ( LOOKAHEAD( <EXP> )
	<EXP> exp()
	{
	    double a = ((Double) argStack.pop()).doubleValue();
	    double b = ((Double) argStack.pop()).doubleValue();
	    argStack.push(new Double(Math.pow(b, a)));
	}
    )*
}

void unary() :
{ }
{
    <MINUS> element()
	{
	    double a = ((Double) argStack.pop()).doubleValue();
	    argStack.push(new Double(- a));
	}
|
    element()
}

void element() :
{}
{
      <CONSTANT>
	{   try {
	    	argStack.push(Double.valueOf(token.image));
	    } catch (NumberFormatException ee) {
		argStack.push(new Double(Double.NaN));
	    }
	}
    |  "(" sum() ")"
}
