This example illustrates how you can use JavaScope with JavaCC to
measure coverage.  For completeness, this example also illustrates
some of the other capabilities of JavaScope.

JavaScope is a coverage checker for Java programs and for JavaCC
grammars.

Let's get to basics first (instructions for running the example
follow):

1. What Is A Coverage Checker?

A coverage checker is a tool that watches a running system and
determines which portions have been executed and which have not.
JavaScope also specifies the number of times a portion of code has
been executed - this gets into the realm of profiling tools.

2. What Good Is The Information Provided By A Coverage Checker?

If a portion of your system has never been executed, it is a
reliability concern.  This means that that part of your code has never
really been tested.  It could well be that the first time that part of
your code is executed is when your customer runs it for the first
time.

Knowledge of this information - which parts of your code has and has
not been covered - is therefore crucial for improving reliability.
Typically, you would create a test suite and test its
comprehensiveness using the coverage tool.  Knowledge that you have a
comprehensive test suite can be rather satisfying and relieve a lot of
ulcers!

Profiling information - how many times a part of your program has
been executed in relation to others gives you an indication of the
part of your program you should focus on to improve performance.

3. How Does JavaScope Offer Coverage Information?

Its best to read the JavaScope documentation for complete information.
JavaScope offers coverage information by defining metrics and applying
these metrics to your Java programs.  Some of these metrics are:

. method coverage: Determines which methods in your program have and
  have not been called.

. branch coverage: At every branch point in your program (if statements,
  while conditions, switch statements, etc.), determines whether or not
  each choice has been taken.

. logical coverage: For each logical operator, determines whether it has
  been invoked with the various different interesting combinations of
  arguments.

. relational coverage: For each relational operator, determines if
  the system has been run in ways that differentiate this relational
  operators from other similar ones.  For example, you can see if
  the system has run in such a way that it will show different behavior
  if a "<=" in your program is replaced by "<".

4. How Does JavaScope Tie In With JavaCC?

JavaCC grammars generate programs.  These programs can also be checked
for coverage.  It will be more useful to measure this coverage with
respect to the grammar which you have written rather than with respect
to the generated Java code which you may never read.  For example,
coverage information with respect to branches in the generated code
is not very meaningful to you.  Hence, JavaScope (together with JavaCC)
offers two coverage metrics specifically for grammars:

. production coverage: Determines which productions have been used upto
  now in the parsing process and which have not.

. expansion coverage: Determines which choices have been taken at
  various choice points and which have not.

For example, if you have built a tool using the Java grammar and have
tested it with a test suite that does not include the use of a
synchronized statement, JavaScope will tell you this right away by
saying that the production "SynchronizedStatement" has not been
covered.  Also, for example, if your test suite does not include
if statements with an else part, JavaScope will tell you this by saying
that the expansion "[ else Statement() ]" has not been covered.


INSTRUCTIONS FOR RUNNING EXAMPLE:

Step 1:

First, you must install JavaScope.  You can install it from
http://www.suntest.com/JavaScope/.  There are two versions you can
install:

 . The full version - you need to buy this version from SunTest
   (the web page takes you through the purchase process).

 . The limited version - this version is free.  However, this version
   limits branch, logical, and relational coverage to the first 100
   lines of each file.

Follow all the installation instructions and the proceed to the
next step.

Step 2:

Go to the Obfuscator directory (where the Obfuscator example is).
We shall run JavaScope on this example.  We need a big example to
highlight the features of JavaScope.  Using JavaScope on the simple
grammars will not be very informative.

Step 3:

Lets enable coverage on all grammar files and Java source files.  To
do this type:

	jsinstr *.jj *.java

This generates instrumented versions of the grammar files and the
Java source files.  The original files are backed up and can be
restored using the jsrestore command.

Step 4:

Build the Obfuscator as you did normally:

	javacc Java1.1.jj
	javacc IdsFile.jj
	javacc MapFile.jj
	javac *.java

Step 5:

Now you have built your Obfuscator with coverage enabled.

Now run the Obfuscator on some examples.

Step 6:

Type:

	javascope11 -grammar_coverage

To bring up the JavaScope coverage browser.  From the GUI, choose
the Load All Runs option from the File menu.  This will load all
the coverage information that you obtained from running your instrumented
Obfuscator.  Use the GUI to move around and look for coverage
information on the Obfuscator.  Especially note the grammar coverage.
