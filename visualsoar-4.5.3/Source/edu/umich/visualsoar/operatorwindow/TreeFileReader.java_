package edu.umich.visualsoar.operatorwindow;

import edu.umich.visualsoar.util.ReaderUtils;

import java.io.*;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.tree.DefaultTreeModel;

/**
 * This class provides a utility to read in a tree
 * @author Brad Jones Jon Bauman
 * @version 0.5a 5 Aug 1999
 */
public class TreeFileReader {
	/**
	 * This method reads in a tree from a file and returns it
	 * @param inFile the file from which the tree should be read
	 * @param maker a class that implements the @see TreeNodeMaker TreeNodeMaker interface an constructs the
	 * nodes out of the File
	 * @return a @see DefaultTreeModel a default tree model which is the tree represented in the file
	 * @throws IOException if there was an error reading in the file
	 * @throws NumberFormatException if one of the numbers in the file wasn't formatted correctly
	 */
	public static DefaultTreeModel read(Reader treeReader, TreeNodeMaker maker) throws IOException, NumberFormatException {
		
		// This hash table has keys of Id's and a pointer as a value
		// it is used for parent lookup
		Hashtable ht = new Hashtable();	
		
		// Special Case Root Node
		// tree specific stuff
		int rootId = ReaderUtils.getInteger(treeReader);
		
		// node stuff
		TreeNode root = maker.makeNode(treeReader);
		
		// add the new node to the hash table
		ht.put(new Integer(rootId),root);

		// Read in all the other nodes
		while(treeReader.ready()) {
			// again read in the tree specific stuff
			int nodeId = ReaderUtils.getInteger(treeReader);
			int parentId = ReaderUtils.getInteger(treeReader);
			
			// get the parent
			TreeNode parent = (TreeNode)ht.get(new Integer(parentId));
			
			// read in the node
			TreeNode node = maker.makeNode(treeReader);
			String s = node.toString();
			// Put in alphabetical order
			boolean found = false;
			int i;
			for(i = parent.getChildCount() - 1; i >= 0 && !found; --i) {
				if(s.compareTo(parent.getChildAt(i).toString()) > 0) {
					found = true;
				}	
			}
			
			if(!found)
				parent.insert(node,0);
			else {
				i += 2;
				if(i == parent.getChildCount()) {
					parent.add(node);
				}
				else {
					parent.insert(node,i);
				}
			}
			
			
			
			// add that node to the hash table
			ht.put(new Integer(nodeId),node);
		}
		return new DefaultTreeModel(root);
	}	
}
