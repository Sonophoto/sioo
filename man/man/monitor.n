'\"
'\" Soar man page 
'\"
.so man.macros
.HS monitor soar
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
monitor \- Manage attachment of scripts to Soar events
.SH SYNOPSIS
\fBmonitor\fR \fIaction\fR
.BE

.SH DESCRIPTION
.PP
This command manages the attachment of scripts to Soar events.
Soar events are important events that occur in Soar as an agent
is being processed.  Scripts can be attached to these Soar 
events so that they are invoked every time the Soar event occurs.  
These scripts can also be removed using the \fBmonitor\fR command.  
The status of attachments can be listed and tested.  If a new 
attachment is created, its identifier is returned as the result 
of this command.  The identifier is used when deleting a
script from an event.
.PP
The specified \fIaction\fR must have one of the following forms:
.TP
\fB\-add\fR \fIsoar-event script [id]\fR
Add the \fIscript\fR to the list of scripts to be invoked when the
\fIsoar-event\fR occurs in the Soar kernel.  See below for a list
of valid Soar event names.  If the \fIid\fR is given, it
is used to name the attachment.  If no \fIid\fR is given, then
a unique id is generated and returned.
.TP
\fB\-delete\fR \fIsoar-event [id]\fR
Remove scripts attached to \fIsoar-event\fR.  The \fIsoar-event\fR 
must match a valid Soar event name
(see below).  If \fIid\fR is given after a \fIsoar-event\fR, then
only that particular attachment is removed.  Otherwise, all
attachments under \fIsoar-event\fR are removed.
.TP
\fB\-list\fR
List all attachments of scripts to Soar events
.TP
\fB\-test\fR
Test the script attachment process by attaching a print message to
every Soar event.
.TP
\fB\-clear\fR
Remove \fIall\fR attached scripts.
.PP
.SH EXAMPLES
This command creates an attachment which prints a message 
after every Soar decision cycle:
.DS
\fBmonitor -add after-decision-cycle {puts "Finished DC!"} \fR
.DE
.PP
This example creates an attachment which calls the Tcl procedure 
"DoSomething" (presumably user-defined) after every production firing:
.DS
\fBmonitor -add firing DoSomething\fR
.DE
.PP
This example creates an attachment which processes pending X events
after every decision cycle.  This is needed in long-running Soar
agents so that GUIs do not appear frozen:
.DS
\fBmonitor -add after-decision-cycle update\fR
.DE
.PP
This example adds an attachment which ticks a simulator after
each agent has completed a cycle in the Soar scheduler.  Note
that this example command is executed in the global agent's 
interpreter so that the simulator is ticked only once per 
schedule cycle.  The "TickSimulator" command would be defined
by the user.
.DS
\fBmonitor -add after-schedule-cycle TickSimulator\fR
.DE
.PP
This example adds an attachment that could be used to inform the 
Soar development tool SDE that an agent has been selected for 
scheduling.  SDE expects certain strings in Soar output and uses
them to control some SDE operations.
.DS
\fBmonitor -add before-schedule-cycle {puts "\nSelecting agent $soar_agent_name"}\fR
.DE
.PP
This example removes the single attachment "m1" which associates a
script with the Soar event after-init-agent:
.DS
\fBmonitor -delete after-init-agent m1\fR
.DE
.PP
This example removes all script attachments to the Soar event
before-preference-phase-cycle:
.DS
\fBmonitor -delete before-preference-phase-cycle\fR
.DE
.PP
This example removes all script attachments that have been added with
the monitor command:
.DS
\fBmonitor -clear\fR
.DE
.PP
.SH SOAR EVENTS

This command utilizes the Soar callback system which can associate
TCL or C functions with Soar events.  The permissable Soar event names
are:
.TP
\fBsystem-termination\fR

The Soar system is exiting.
.TP
\fBafter-init-agent\fR

An agent has just been created and initialized.
.TP
\fBbefore-init-soar\fR

The agent is about to be initialized.  The \fBinit-soar\fR command
will generate this event.
.TP
\fBafter-init-soar\fR

The agent has just been initialized.  The \fBinit-soar\fR command
will generate this event.

.TP
\fBafter-halt-soar\fR

The agent has just been halted.
.TP
\fBbefore-schedule-cycle\fR

This event is triggered by the \fBschedule\fR command.  In the
global control agent, this event is triggered before each schedule
cycle starts.  In other agents, this event is triggered during
the schedule cycle, just before the agent is run.
.TP
\fBafter-schedule-cycle\fR

This event is triggered by the \fBschedule\fR command.  In the
global control agent, this event is triggered just after each schedule
cycle ends.  In other agents, this event is triggered during
the schedule cycle, just after the agent is run.
.TP
\fBbefore-decision-cycle\fR

A decision cycle is just about to start.
.TP
\fBafter-decision-cycle\fR

A decision cycle has just ended.
.TP
\fBbefore-input-phase\fR

An input phase is just about to start.
.TP
\fBafter-input-phase\fR

An input phase has just ended.
.TP
\fBbefore-preference-phase-cycle\fR

A preference phase is just about to begin.
.TP
\fBafter-preference-phase-cycle\fR

A preference phase has just ended.
.TP
\fBbefore-wm-phase-cycle\fR

A working memory phase is just about to begin.
.TP
\fBafter-wm-phase-cycle\fR

A working memory phase is just about to begin.
.TP
\fBbefore-output-phase\fR

An output phase is just about to begin.
.TP
\fBafter-output-phase\fR

An output phase has just ended.
.TP
\fBbefore-decision-phase-cycle\fR

A decision phase is about to begin.
.TP
\fBafter-decision-phase-cycle\fR

A decision phase has just ended.
.TP
\fBwm-changes\fR

Changes to working memory have just completed.
.TP
\fBcreate-new-context\fR

A new state has been created on the goal stack.
.TP
\fBpop-context-stack\fR

A subgoal has finished.
.TP
\fBcreate-new-attribute-impasse\fR

A new attribute impasse has occurred.
.TP
\fBremove-attribute-impasse\fR

An attribute impasse has been removed.

.TP
\fBproduction-just-added\fR

A productions has just been added to the agent.

.TP
\fBproduction-just-about-to-be-excised\fR

A production is just about to be removed from the agent.
.TP
\fBfiring\fR

A production instantiation has just fired.

.TP
\fBretraction\fR

A production instantiation is just about to retract.
.TP
\fBsystem-parameter-changed\fR

A system parameter has just been changed.
