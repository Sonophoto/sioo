'\"
'\" Soar man page 
'\"
.so man.macros
.HS format-watch soar
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
format-watch \- Control the format of printed objects
.SH SYNOPSIS
\fBformat-watch\fR [\fI-stack | -object\fR] [\fIoperation class [name] format\fR]
.br
\t\fBoperation ::= -add | -remove\fR
.br
\t\fBclass     ::= s | o | *\fR
.br
\t\fBformat    ::= {sequence of format masks}\fR
.BE
.SH DESCRIPTION
.PP
The \fBformat-watch\fR command defines the format to use when 
printing Soar objects and the Soar goal stack.  The optional
\fItype\fR, if present, must be the switch \fB-object\fR or \fB-stack\fR
and indicates which format to manipulate.  Object trace 
formats control how Soar prints an object--e.g., a certain 
operator, problem-space, etc.  Stack trace formats control how 
Soar prints its context stack selections in \fBwatch 0\fR and 
\fBprint -stack\fR printouts.  If no \fItype\fR is given, then 
\fB-stack\fR is assumed.  
.PP
The second portion of the \fBformat-watch\fR command is the 
\fIaction\fR to apply to the selected trace format.  An action
consists of adding or removing formats to selected classes
of objects.  An \fIaction\fR has the following form:
.DS
     \fIoperation\fR \fIclass\fR [\fIname\fR] \fIformat\fR
.DE
.PP
The \fIoperation\fR must be either \fB-add\fR or \fB-remove\fR.
An \fB-add\fR operation adds new trace formats replacing any 
existing ones with identical applicability conditions.  A
\fB-remove\fR operation removes trace formats with the given 
applicability conditions. 
The combination of \fIclass\fR and \fIname\fR define the
applicability conditions of the \fIformat\fR (i.e., which classes
of objects the \fIformat\fR applies to).
The \fIclass\fR must be either \fBs\fR or \fBo\fR
and indicates that the operation applies to states or operators, 
respectively.  The wildcard symbol \fB*\fR
may also be used to indicate that the \fIformat\fR applies to all objects.
If an \fB-object\fR trace is being manipulated, then an optional
\fIname\fR may be given indicating the format applies only
to objects with that name.  If a \fB-stack\fR trace is being
manipulated, then an optional \fIname\fR may be given indicating
the format applies only within problem spaces of that name.
.PP
The \fIformat\fR string can be any sequence of characters 
surrounded by curly braces.  Note that double quotes are not
sufficient because the square brackets in the format string will
be interpreted as a command to be evaluated by Tcl.  Certain 
formatting controls can be used within the string--see the 
section FORMAT CONTROLS below for more information.

.PP
If no arguments are given, then \fBformat-watch\fR prints the
current format settings.

.SH FORMAT CONTROLS
.PP
The following control sequences can be used within trace format 
strings.  The \fIS\fR indicates the sequence is ONLY usable in
stack traces:
.TP
\fB%cs\fR
print the current state using the appropriate object trace format (\fIS\fR)
.TP
\fB%co\fR
print the current operator using the appropriate object trace format (\fIS\fR)
.TP
\fB%dc\fR
print the current decision cycle number (\fIS\fR).  Not meaningful and
therefore ignored in stack traces produced by the \fBprint -stack\fR command.
.TP
\fB%ec\fR
print the current elaboration cycle number (\fIS\fR).  Not meaningful and
therefore ignored in stack traces produced by the \fBprint -stack\fR command.
.TP
\fB%sd\fR
print the current subgoal depth (\fIS\fR).  This uses 0 as the top level.
.TP
\fB%rsd[\fIpattern\fB]\fR
repeat (subgoal depth) times: print the given \fIpattern\fR (\fIS\fR).
.TP
\fB%left[\fInum\fB,\fIpattern\fB]\fR 
\fRprint the \fIpattern\fR left justified in a field of \fInum\fR spaces.
.TP
\fB%right[\fInum\fB,\fIpattern\fB]\fR
\fRprint the \fIpattern\fR right justified in a field of \fInum\fR
spaces.
.TP
\fB%id\fR
print the identifier of the current object.
.TP
\fB%v[\fIattr\fB]
\fRprint the value(s) of attribute ^\fIattr\fR on the current object.
If there is no ^\fIattr\fR on the current object, nothing is printed.
.TP
\fB%v[\fIpath\fB]\fR
\fRsame as the above, only follow the given attribute \fIpath\fR to 
get the value(s).  A \fIpath\fR is a sequence of attribute names
separated by periods, such as \fBfoo.bar.baz\fR.
.TP
\fB%v[*]\fR
\fRprint all values of all attributes on the current object.
.TP
\fB%o[args]\fR
\fRsame as \fB%v\fR, except that if the value is an identifier, it is 
printed using the appropriate object trace format.
.TP
\fB%av[args]\fR
\fRsame as \fB%v\fR, except the printed value is preceeded with "\fB^attr
\fR" to indicate the attribute name.
.TP
\fB%ao[args]\fR
\fRa combination of the above two.
.TP
\fB%ifdef[\fIpattern\fB]\fR
\fRprint the given \fIpattern\fR if and only if all escape sequences
inside it are "meaningful" or "well-defined."  For example, 
the format string \fB%ifdef[foo has value: %v[foo]]\fR will print 
nothing if there is no \fB^foo\fR on the current object.
.TP
\fB%nl\fR
print a newline
.TP
\fB%%\fR
\fRprint a percent sign
.TP
\fB%[\fR
print a left bracket
.TP
\fB%]\fR
print a right bracket

.SH EXAMPLES
In the following examples, the phrase "the command prints X" is simply
an abbreviation for the more accurate phrase "the command defines a
trace format string which when used for printing will print X".
.PP
These commands are equivalent to the default settings for stack traces:
.DS
\fBformat-watch -stack -add s {%right[6,%dc]: %rsd[   ]==>S: %cs}
format-watch -stack -add o {%right[6,%dc]: %rsd[   ]   O: %co}\fR
.DE
.PP
The above format strings print the decision cycle number right 
justified in a field 6 characters wide.  After that, a colon and
space are printed.  Then, three spaces are printed as many times as
the subgoal is deep.  Finally, a few more characters are printed
to indicate the item type and then the item itself is printed.
.PP
The following commands are equivalent to the default settings for
object traces:
.DS
\fBformat-watch -object -add * {%id %ifdef[(%v[name])]}
format-watch -object -add s {%id %ifdef[(%v[attribute] %v[impasse])]}
format-watch -object -add o evaluate-object {%id (evaluate-object %o[object])}\fR
.DE
.PP
The first command prints an identifier followed by its name in
parentheses (if a name is defined) for all objects.  This will
hold unless overridden by more specific applicability conditions.
This first format might print something like: \fBO37 (my-operator-name)\fR.
The last two commands define (overriding) formats for states and 
operators.  The second command, for states, prints the state identifier
followed, in parentheses, by its \fB^attribute\fR and \fB^impasse\fR
attributes, if they are defined.  For example, this might print
\fBG5 (operator no-change)\fR.  Finally, the third command handles
\fBevaluate-object\fR operators in the \fBselection\fR space.  These
operators will be printed as an id followed, in parentheses, by
the string "evaluate-object " and the printed representation of the
object being printed.
.PP
The following stack trace format causes both the current state
and current operator to be printed whenever an operator is selected.
(There is a linefeed in the middle of the format string.)
.DS
\fBformat-watch -stack -add o {%right[6,%dc]: %rsd[   ]   S: %cs
        %rsd[   ]   O: %co}\fR
.DE
.PP
The above format is useful for watching the effects of operator 
applications.  

.SH SEE ALSO

\fBwatch\fR, \fBprint\fR
