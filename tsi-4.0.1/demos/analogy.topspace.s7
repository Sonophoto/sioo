### Program  analogy.topspace.soar -- Top space of analogy.soar,
###       with mapping rule
### Started  5 Aug 93
### Version  18 Nov 94, based on analogy.soar v. 1 Nov 94 --
###           original by rmy
### NB:      nnpscm version  -- conversion by John Rieman
### Version  5 Dec 94, some concessions to improving the trace in
###   NNPSCM -- rmy
### Converted to Soar 7 by unknown hand
### Some minor cleaning up, RMY 3 Mar 96
### Some minor cleaning up and move to 7.0.4, 2-Nov-96 -FER

### Program to do simple 'deliberate analogy' for figuring out how to launch
### a program on the Mac, given that one or two specific ones are known.

### Note that this program does NOT want the default rules loaded.

### This version developed specifically for the purposes of the one-day
### Soar tutorial given by Frank Ritter and Richard Young.  A set of
### Macintosh files containing OHP slides together with exercises and
### other handouts (either describing just this program, else covering
### the whole one-day tutorial) can be obtained by contacting
###	ritter@psyc.nott.ac.uk

### Note that I have used state-elaboration rules instead of operators in
### many places, probably to a far greater extent than is justified in
### terms of cognitive modelling, but it shortens the program and perhaps
### makes its behaviour easier to follow.

### Correspondingly, there are several highly specific monitoring rules
### present, which we would not normally expect to see in this kind of
### program.


### ======================================================================
### DECLARATIONS, INITIALISATIONS, ETC.
### ======================================================================

source soar-menu.tcl

## For safty, excise -all
excise -all

## this makes chunk firings print
watch -chunks -print
## default is not to print chunks as learned!
watch learning -print

## this will always take the first choice
indifferent-selection -first

### This format is specifically for monitoring the Imagine-Task space

### For NNPSCM we do the following, which is intended
### for watch 0 format, might be a little weird in anything else:

format-watch -stack -add s {%right[6,%dc]: %rsd[   ]==>S: %cs %rsd[   ]}

sp {monitor*problem-space*nnpscm
  (state <s> ^problem-space (<p> ^name <n>))
  -->
  (write |      P: | <p> |(| <n> |)|)}

sp {monitor*problem-space*imagine-task
  (state <s> ^problem-space <p>)
  (<p> ^type imaginary ^alias imagine-task)
  -->
  (write | type = imaginary  alias = imagine-task|)}


### Ask what program to launch

## the non TK version
if {[info commands tk]==""} {
sp {preamble*ask-program-to-launch
  (state <s> ^name perform)
  (<s> ^task <t>)
	(<t> ^feature <f2>)
	(<f2> ^fname arg1)
  -->
  (write (crlf) |What program to launch? [cg, word, draw, xl] |)
  (<f2> ^fvalue (accept))}
}

## the tk version
if {[info commands tk]!=""} {
sp {preamble*ask-program-to-launch
  (state <s> ^name perform)
  (<s> ^task <t>)
	(<t> ^feature <f2>)
	(<f2> ^fname arg1)
  -->
  (write (crlf) |What program to launch? |)
  (<f2> ^fvalue
       (tcl |soar-menu "Select program to launch" {word xl cg draw}|))}
}


### ======================================================================
### PERFORM SPACE
### ======================================================================

### -- Initialisation --

sp {perform*initialise*gps
  (state <s> ^superstate nil)
  -->
  (<p> ^name perform)
  (<s> ^name perform ^problem-space <p>)}

sp {perform*initialise*state
  (state <s> ^name perform)
  -->
  (<s> ^task <t>)
	(<t> ^feature <f1> + <f1> &, <f2> + <f2> &)
	(<f1> ^fname effect ^fvalue launch)
	(<f2> ^fname arg1)}


### -- Termination --

### Kludgy-detect when a program has been successfully launched

sp {perform*task*terminate
  (state <s> ^problem-space.name perform)
  (<s> ^task <t>)
	(<t> ^feature <f1> <f2>)
	(<f1> ^fname effect ^fvalue launch)
	(<f2> ^fname arg1   ^fvalue <prog>)
  (<s> ^simulation <sim>)
  (<sim> ^status running ^object <prog>)
  -->
  (write (crlf) |** Yeah, the program is running!|)
  (halt)}


### -- Performing actions --

### If there's ever an Action attribute on the state, then perform the
### action.

### Issues about how to know when an action has been completed,
### what happens if there is more than one action proposed, and so on,
### are beyond the scope of this demonstation program (and hopefully will
### not arise).

### Propose a perform operator

sp {perform*perform*propose
  (state <s> ^problem-space.name perform)
  (<s> ^action <a>)
  -->
  (<o> ^name perform ^action <a>)
  (<s> ^operator <o>)}


### Performing the double-click action

sp {perform*perform*double-click*perform
  (state <s> ^problem-space.name perform ^operator <o>)
  (<o> ^name perform ^action <a>)
  (<a> ^movement double-click ^object <obj>)
  -->
  (<s> ^motor <m>)
  (<m> ^movement double-click ^object <obj>)
  (write (crlf) |** User double-clicks on object | <obj>)}


### -- Kludgy simulation of Mac launching programs --

### The following rule would be more elegant if it knew what objects
### were 'isa' program

sp {perform*simulate*launch*program
  (state <s> ^problem-space.name perform ^operator.name <oname>)
  (<s> ^motor <m>)
  (<m> ^movement double-click ^object <obj> ^object << cg word draw xl >>)
  -->
  (<s> ^simulation <sim>)
  (<sim> ^status running ^object <obj>)
  (write (crlf) |** Mac now has program | <obj> | running|)}


### -- Just for testing --

### Just for testing, the following hand-written chunk proposes the action
### of double-clicking on a program to be launched.  Commented out.

sp {perform*task*action*double-click-to-launch
  (state <s> ^problem-space.name perform)
  (<s> ^task <t>)
	 (<t> ^feature <f1> <f2>)
	 (<f1> ^fname effect ^fvalue launch)
	 (<f2> ^fname arg1   ^fvalue <prog>)
  -->
  (<s> ^action <a>)
  (<a> ^movement double-click ^object <prog>)}


### Monitor ^task and ^action on the state

sp {perform*monitor*state*task
  (state <s> ^problem-space.name perform)
  (<s> ^task <t>)
	(<t> ^feature <f1> {<> <f1> <f2>})
	(<f1> ^fname effect ^fvalue <effect>)
	(<f2> ^fname arg1   ^fvalue <prog>)
  -->
  (write (crlf) |State has ^task: effect=| <effect> | arg1=| <prog>)}

sp {perform*monitor*state*action
  (state <s> ^problem-space.name perform)
  (<s> ^action <a>)
	(<a> ^movement <move> ^object <obj>)
  -->
  (write (crlf) |State has ^action: | <move> | | <obj>)}


### ======================================================================
### EOF
### ======================================================================


