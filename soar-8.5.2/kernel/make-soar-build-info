#!/usr/bin/perl


#	make an Info File.


@Paths = ( "./", "../interface" );
@FileTypes = ( '.*\.c$', '.*\.h$' );
$Template = './soarBuildInfo.tmp';
$InfoFile = './soarBuildInfo.c';
$AllDefined = './BuildOptions';
$InfoFileExists = 0;
%ExcludedFlags = ( );

$nFilesRead = 0;
$nFileSkipped = 0;

print "\nLooking for old version of $InfoFile\n";

if ( -r $InfoFile ) {
    $InfoFileExists = 1;
    $InfoFileUpdate = (-C $InfoFile);
}
print "Making File: $InfoFile\n"; 


# Now open the template and make the info file:

open( TEMPLATE, $Template ) or die "Can't open template: '$Template'";
open( INFO, ">$InfoFile" ) or die "Can't open Info File: '$InfoFile'";
open( ALLDEFS, ">$AllDefined" ) or die "Can't open Defs file: '$AllDefined'";


print "Reading Source Files...\n";

foreach $path (@Paths) {

    opendir( DIR, $path );
    @allFiles = readdir( DIR );
    
    foreach $fileType (@FileTypes) {
	
	@files = grep( /$fileType/, @allFiles);
	
	foreach $file (@files) {
	    if ( (-C $file)  > $InfoFileUpdate ) {
#		print "Skipping $file\n";
#		$nFilesSkipped++;
#		next;
		
	    }
	    $nFilesRead++;
	    open( README, $path.'/'.$file) or  die "can't open $file";
	    
	    
	    $lines = 0;


	  PROCESS_LINE: while( <README> ) {  

	      @flagsInThisLine = ();
	      if ( /^\s*\#ifdef\s+(\w+)/ ) {
		  $Flags{$1}++;
		  @flagsInThisLine = ($1);
		  
	      } elsif ( /^\s*\#ifndef\s+(\w+)/ ) {
		  $Flags{$1}++;
		  @flagsInThisLine = ($1);
		  
	      } elsif ( /^\s*\#if.*defined\(\s*(\w+)\).*/ ) {
		  
		  # The line begins with a #if and has at least one 
		  # defined(XXX), find all of the flags on this line
		  @flgs = /defined\(\s*(\w+)\)/g ;
		  foreach $f (@flgs) {  $Flags{$f}++;    }
		  @flagsInThisLine = @flgs;
	      }
			
	      $lines++;
	      
	      if ( /.*ExcludeFromBuildInfo(.*)/i ) {
		  if ( $#flagsInThisLine > -1 ) {
		      foreach $f (@flagsInThisLine) {
			  if ( $ExcludedFlags{$f} < 1 ) {
			      print "Excluding Flag: $f\n";
			  }
			      $ExcludedFlags{$f}++;
		      }
		  }
		  else {
		      $_ = $1;
		      if ( /\s+(\w+)\W/ ) {
			  if ( $ExcludedFlags{$1} < 1 ) {
			      print "Excluding Flag: $1\n";

			  }
			      $ExcludedFlags{$1}++;
		      }
		  }
	      }
	      
	      
	      next PROCESS_LINE;
	    }
	    continue {
		@flagsInThisLine = ();
	    }
	    
	    close( README );
	    
	}
    }
}

foreach $exFlag (keys(%ExcludedFlags)) {
    if ( $ExcludedFlags{$exFlag} >= 1 ) {
        if (exists $Flags{$exFlag}) {
	    $ExcludedFlags{$exFlag} += $Flags{$exFlag};
	    delete $Flags{$exFlag};
	}
    } else {
	print "WARNING: Excluded Flag list is corrupted!!\n";
    }
    
}
print "-------------------------------------------------------------------\n";
print "These Flags appear only once in the source code.  They may be typos\n";
foreach $exFlag (sort(keys(%ExcludedFlags))) {
    if ( $ExcludedFlags{$exFlag} <= 1 ) {
	print "\t $exFlag\n";
    }
}
foreach $flag (sort(keys(%Flags))) {
    if ( $Flags{$flag} <= 1 ) {
	print "\t $flag\n";
    }
}
print "-------------------------------------------------------------------\n";

$HeadOrFoot = 1;
while( $line = <TEMPLATE> ) {

	if ( $line =~ /\*BEGIN\*/ ) {
		$HeadOrFoot = 0;
		next;
	}	
	if ( $line =~ /\*FL-END\*/	 ) {

	    foreach $flag (sort(keys(%Flags))) {
		
		if ( $Flags{$flag} > 0 ) {
		    $_ = $repeatedBlock;
		    s/FLAG/$flag/g;
		    printf INFO $_;

		}
	    }
	    
	    $HeadOrFoot = 1;
	    $repeatedBlock = "";
	    next;
	}
	elsif ( $line =~ /\*EXFL-END\*/	 ) {

	    foreach $flag (sort(keys(%Flags))) {
		
		if ( $Flags{$flag} < 0 ) {
		    $_ = $repeatedBlock;
		    s/FLAG/$flag/g;
		    printf INFO $_;

		}
	    }
	    
	    $HeadOrFoot = 1;
	    $repeatedBlock = "";
	    next;
	} 
	elsif ( $line =~ /\*.*END.*\*/ ) {
	    chop($line);
	    print "Warning a '$line' is not an useable block terminator\n";
	}

	if ( $HeadOrFoot == 0 ) {
		$repeatedBlock = $repeatedBlock.$line;

	} else {
		printf INFO $line;
	}

}

#
#  write the ALLDEFS file -- it contains all the defines
#
print ALLDEFS <<"HEAD";
/*
 *  !!!   NOTE  !!!
 *  
 *  This file is generated dynamically, for documentation purposes.
 *  it is /not/ included by any of the soar kernel files, nor by
 *  any external files, and furthermore, it should not be.
 *
 *  Any build options (i.e. any of the #define listed below) which
 *  you desire to be compiled into your build of Soar should be
 *  defined in the file 'soarBuildOptions.h'.  This file is included
 *  by all soar kernel files.
 */


HEAD
foreach $flag (sort(keys(%Flags))) {
  print ALLDEFS "#define $flag\n";
}

if ( $nFilesRead > 1 ) { $nounVerb = "files have"; }
else { $nounVerb = "file has"; }
print "$nFilesRead $nounVerb been read.  ";

print "Info File Written\n";

close( INFO );
close( TEMPLATE );
close( ALLDEFS );


