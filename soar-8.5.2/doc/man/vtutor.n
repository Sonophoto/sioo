'\"
'\" Soar man page 
'\" In prep....copy new versions to ~/soar-7.0.4/doc/man/
'\"
.so man.macros
.HS vtutor soar
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
viSTEAM (Tutorial) \- A quick run through the major features of an embryonic
visual environment for developing Soar productions and essential STEAM rules.
.SH SYNOPSIS
\fBsource vt.tcl\fR
.BE
.PP
.SH TUTORIAL
.PP
.TP
1.  Set pathnames as required in prefs.tcl. Only the VS_DIR variable is essential.
.TP
2.  cd to the directory containing the viSTEAM code and launch soartk; when in Soar, source vt.tcl
.TP
3.  If Soar is not v7.0.4 you should be prompted about whether Soar is available - hit \fBYes\fR.
.TP
4.  If a STEAM directory path is provided, a prompt to load STEAM extensions is now offered. This starts a Soar interpreter and loads the STEAM rules into it from a user specified directory - if it does appear (i.e. you have set env(STEAM_1pt1_DIR)), hit \fBNo\fR.
.TP
5.  You are now asked whether STEAM prototypes are required - hit \fBYes\fR.
.TP
6.  The viSTEAM main window (the \fIEditSoar\fR)should now have appeared, with some familiar and not so familiar menu bar options. There are also two toolbars, one directly above and one directly below the main text editing window (the \fIcode window\fR). (Some info about what's what appears in the man page \fBvt\fR - the purpose here is to provide a quick run through, so there'll only be a minimum of explanation...;-).
.TP
7.  Goto \fBBuilder\fR on the menu bar and select \fBAgents\fR.
.TP
8.  Select \fBCreate Team...\fR.
.TP
9.  You will now be prompted for a team-name - choose one (testteam herein).
.TP
10. A team builder dialogue is now presented. Play with the settings (note that the characteristics of the chosen comms channel may be manipulated via the \fBDetails...\fR option of the comms channel selection or the \fBComms...\fR option of the \fBBuilder\fR menu). When playing's done, hit \fBBuild team...\fR. This creates a team based on the information provided.
.TP
11. You are now in a position to automatically generate some code - hit \fBGenerate Soar Code...\fR. The code window should be filled with Soar code...
.TP
12. A prompt appears to \fISave agent code?\fR - hit \fBYes\fR. A sample of the code for a single team agent is presented in a new text window. Appropriate code for each team member may be saved to independent files by pressing \fBSave agent code\fR; this has a side effect of closing the example agent code window.
.TP
13. Save the code appearing in the code window by using the \fBSave\fR option of the \fBFile\fR menu. Close the teambuilder window (\fBClose\fR). Now build an operator from the \fBOperators\fR option of the \fBBuilder\fR menu, and generate the soar code.
.TP
14. To prove the code is valid, we'll now send it to a soar agent interpreter (in this case agTestbed, which is provided as a default). This may be directly by dropping down the \fBSend code to...\fR menu and choosing \fBagTestbed\fR. This launches a  Production Inspector window.
.TP
15. The name of the production sent to agTestbed should appear in the Production Inspector listbox. (The listbox contains a list of Soar productions in the interpreter, so if the name appars there, the production is well formed). Selecting the production name and clicking on \fIView Selected sp\fR will display the production code. Code for a selected production by be sent to the \fIEditSoar\fR by means of the \fBCopy code to viSTEAM\fR button (clear the text in the \fIEditSoar\fR by clicking on \fBClear\fR in the top toolbar of that main window, and then send code to it from the Production Inspector...)
.TP
16. .soar rulefiles may be loaded directly into the current interpreter from the \fBFile\fR menu (\fBSource *.soar\fR). If several files are to be sourced, and a load.soar, soar.soar or {current-interpreter}.soar file exists in a directory in order to manage the sourcing of files within that directory, it may sourced automatically by selecting \fBFile.Source ruleset\fR and entering the appropriate directory path.
.TP
17. Now for something that helps with debugging if the ruleset isn't too large, but is large enough to be interesting ;-). From the Production Inspector menubar, select \fBView\fR and thence \fBHealthcheck\fR. Yet another window appears, in which we can look at the attribute-value structure of the loaded ruleset.
.TP
18. Goto the \fBOptions\fR menu and choose \fBA-V count\fR. (If TSI is available, it may be launched in the current interpreter from the \fBTSI\fR option). A bit of chugging ensues as the loaded productions are (badly) parsed; a shortform version of the avtree is automatically saved as a \fB.avp\fR file. Lots of options are now available from the \fBView\fR menu.
.TP
19. Goto the \fBView\fR menu and select the \fBView A_V\fR option. This allows you to look at the attributes or values that appear in the loaded ruleset less than or equal to a user selected number of times; the idea is to try and track down typos by identifying attributes or values that only appear once or twice in the whole ruleset. Select \fBAttr\fR.
.TP
20. Having loaded a list of attributes, the productions in which they appear may  now be identified. Select an item in the listbox and press the \fBRelated sp...\fR button. By selecting one of the production names, its code may be viewed with the \fBView Production\fR button on the toolbar at the bottom of the window.
.TP
21. Particular \fIproblem-spaces\fR and \fIoperators\fR used within the ruleset may be identified directly using the appropriate options from the \fBView\fR menu. Selecting a particular \fIproblem-space\fR or \fIoperator\fR name and clicking on \fBRelated sp...\fR identifies the productions which propose and exploit (and terminate in the case of \fIoperators\fR) the name. For the single production example used here, this is not very interesting.
.TP
22. From the menubar select \fBAV Tree\fR. This depicts the full \fIavtree\fR of the loaded ruleset as a series of cascaded menus. Wander up and down the tree. This structure (hopefully) reflects the structure inherent within the loaded productions. 
.TP
23. Using \fBAV Tree\fR from the menu bar can be quite scary when the ruleset is large, so an alternative way of viewing the \fIavtree\fR is using the \fBAV Tree\fR option from the \fBView\fR menu. This opens a text window (and also saves a tabulated .avt file) containing the \fIavtree\fR. The tree may be searched for particular attributes/values using the toolbar at the bottom of the window. Close the \fBAV Tree Viewer\fR window. A related tool, OpHelia, (available from the \fIHealthcheck\fR menu \fBView.Operator Hierarchy\fR) tries to generate an operator hierarchy based on analysis of operator.names that appear in the rhs of a production whose lhs contains a specific operator or problem-space name. Again, for the single production example used here, this is not very interesting/
.TP
24. Rather more flexibility in navigating the \fIavtree\fR is provided from the \fBAV List\fR option of the \fBView\fR menu: the screen gets ever more cluttered with a \fBNavigate Project\fR window. Select the item \fIcommand\fR in the list box of this window and hit \fBTraverse Path\fR. Do the same for \fIgroup\fR. In this way the avtree may be scaled and a history appears in the middle frame; selecting one of these items (for example, \fI^command.group\fR) and pressing \fBUse Selection\fR pastes the selected item at the current cursor position in the main \fIEditSoar\fR code window (the idea is to minimise the likelihood of generating typos whilst writing Soar productions; a similar facility is available in the \fEditSoar\fR directly, as will be demonstrated later). The avtree may be climbed by selecting \fI..\fR and traversing the path.
.TP
25. With \fI^command.group\fR still selected, click on \fBIdentify Prods\fR. In the lower frame appears the names of all productions that include the selected structure, distributed howsoever throughout the production (so for example, a search on \fI^a.b c\fR would actually be made over \fI^a.b.c d -->\fR, \fI^a.b --> ^c d\fR, \fI^a --> ^b.c d\fR and \fI --> ^a.b.c d\fR, appropriately formed of course.
.TP
26. Click on \fBAdvanced Search\fR. The new window may be used to filter the productions identified as containing \fI^command.group\fR with respect to particular \fI^operator.name\fR or \fI^problem-space.name\fR values. So for example, if you want to know whether \fI^command.group\fR appears in a production associated with a particular operator, click on the operator in the left hand box of the operator frame of the \fBFiltered Search\fR window, \fBAdd\fR it to the filter set, reselect \fI^command.group\fR in the \fBNavigate\fR window, then press \fBIdentify Prods\fR in the \fBFiltered Search\fR window. NB operators are selected for filtered search via listboxes; problem spaces are selected using checkbuttons. This reflects an assumption that there will be few problem spaces and many operators. Cancel the \fBFiltered Search\fR window and close the \fBNavigator\fR window.
.TP
27. \fBClose\fR the Production Healthcheck window. \fBClose\fR the Production Inspector window. In the main viSTEAM window, clear the code window (\fBClear\fR on the toolbar directly above the code window.
.TP
28. Drop the \fBComponents\fR menu and and goto \fBav-pairs\fR; this leads to a series of cascded menus that allows you to exploit an avtree. Only take \fIcascade\fR options at this point. Note that two projects are available from the \fBav-pairs\fR menu, soar (a default) and (a reduced form of) STEAM (which was loaded). Goto \fBFile\fR, \fBProject\fR, \fBLoad *.avp\fR and hit return when presented with the request for a filename, taking the default (agTestbed.avp, which we previously saved). Returing to \fBav-pairs\fR, there is now an \fBagTestbed\fR option, which cascades into the avtree for the production we generated earlier.
.TP
29. Withing the first \fBav-pairs\fR cascade is an option to \fBAdd project...\fR. Take it and accept the default name. It should now appear as an option on the \fBav-pairs\fR menu.
.TP
30. The current project in the \fIEditSoar\fR is given by the menu in the top left hand corner of the window (it should be set to \fBsoar\fR. Change this to \fBtestproj\fR. ***at the moment, agTestbed is not a viable option because its avtree lacks 2 essential branches - \fIproblem-space.name\fR and \fIoperator.name\fR; these may, however, be added by the user as we shall see***
.TP
31. Goto \fBComponents\fR on the menubar and select \fBSkeletons\fR, then \fBPropose op...\fR. Give it a name (no angle brackets), such as \fBtestop\fR.\fBCore lhs...\fR. Give the production a name and hit return. Core code for this production appears in the text window, and the operator name is appended to the list of possible name values within the av-pairs.testproj.operator.name menu.
.TP
32. Place the cursor between \fI<s>\fR) and \fI^problem-space\fR. Goto  \fBComponents\fR, \fBav-pairs\fR, \fBsteam\fR, \fB^agent\fR, \fBapproach-to-coordination\fR, \fB*cautious*\fR, \fBg.parent\fR, (a bit laborious, I know). This inserts the code for \fI^agent.approach-to-coordination *cautious*\fR. Play at will...(the sense is that \fBparent\fR would give \fI^approach-to-coordination *cautious*\fR, \fB*cautious*\fR would print \fI*cautious*\fR, \fBg.g.parent\fR would give \fI^great.grand.parent me\fR etc.
.TP
33. Attributes and values may be added as required (\fBAdd...\fR) to particular avtrees from within the av-pairs.whatever-proj cascade. For example, goto \fBav-pairs.testproj.Add ^attr <ind>\fR, and name the attribute \fItestattribute\fR(or whatever). This means we want to add an attribute that will point to other attributes. Goto \fBav-pairs.testproj.^testattribute.Add ^attr const...\fR and name this one \fItest2attribute\fR (or whatever). Finally, goto \fBav-pairs.testproj.^testattribute.test2attribute.Add value...\fR to add constant values. The new avtree may be saved from the \fBFile.Project.Save a-v\fR menu, as a \fI.av\fR file.
.TP
34. Now for the bracket checking tools (NB a colour monitor is required)... Delete a single bracket somewhere in the production code (NB the delete key removes stuff to the *right* of the cursor...). On the toolbar below the code window, press \fBDoCount\fR...chug, chug, chug...The line containing the unmatched bracket will be highlighted, as will the unmatched bracket.
.TP
35. Select the unmatched bracket, and press \fBPaired By\fR. The first bracket that complements the unmatched one will be highlighted, as will all the intervening characters. Pressing \fBNext\fR goes to the next complementary braket etc. Replace the missing bracket.
.TP
36. Select a matched bracket and press \fBComplement\fR. This highlights the code within the well formed pair. \fBClear\fR the code window. If \fBSoar extensions\fR are enabled (via the \fBPreferences\fR menu on the bottom toolbar) then some additional checks are made to the Soar code (e.g. (<a>^attr val) would be signalled as an error because of touching >^).
.TP
37. Goto \fBFile\fR and select \fBExit\fR.

.PP
Here ends the quick run through the major features of viSTEAM. Comments, project funding etc to \fBTony.Hirst@port.ac.uk\fR please. See also \fIhttp://www.dcs.port.ac.uk/~hirsta"\fR

You may want to have another run through now using a ruleset (100 to 200 prods, say) of your own:
.TP
a) Launch visteam in its home directory, refusing steam options;
.TP
b) Goto \fBSoar-->New..." and give it a name (\fImyproj\fB);
.TP
c) Goto \fBSoar-->myproj\fR;
.TP
d) From the \fIProduction Viewer\fR menubar, goto \fBFile-->Source ruleset\fR and give it the name of a directory that contains a load.soar file to manage the loading of lots of soar files within that directory;
.TP
e) Goto \fBView-->Healthcheck\fR;
.TP 
f) From the \fIHealthcheck\fR menubar, goto \fBOptions-->A-V Count\fR;
.TP
g) Play with the options from the \fBView\fR menu.

.PP
Mail me with questions, suggestions, bugs etc. 
Tony.Hirst@port.ac.uk

