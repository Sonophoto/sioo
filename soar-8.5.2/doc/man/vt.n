'\"
'\" Soar man page 
'\" In prep....copy new versions to ~/soar-7.0.4/doc/man/
'\"
.so man.macros
.HS vt soar
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
vt.tcl \- Embryonic visual environment for developing Soar productions
.SH SYNOPSIS
\fBsource vt.tcl\fR
.BE

.SH DESCRIPTION
.PP
By sourcing \fIvt.tcl\fR in wish or a soartk environment, a visual environment 
for writing Soar productions is launched. The intention is to provide a set of
useful tools for writing syntactically correct productions, for example by 
providing a suite of tools dedicated to bracket checking. Compatability with 
other productions in a ruleset is provided by automatically parsing a sourced 
ruleset and producing a navigable tree of attribute value pairs. Such a 
facility also supports a user attempting to trace the 'execution path' through
a ruleset.
.PP
In addition to primitive and general tools, a set of extensions are provided 
for writing STEAM compatible productions.
.PP
.SH USAGE
.PP  
The best way into the environment is to start a \fIsoartk\fR shell in the 
viSTEAM directory and type \fBsource vt.tcl\fR. The user will then be 
lead through a series of dialogues that reflect the base interpreter.
A quick tutorial through the main features of viSTEAM can be found in the man
page \fBvtutor\fR.
.PP
The viSTEAM environment is based around a text editor. The top menu-bar 
provides usual options as regards file, editing and Help options, as well as 
options that are specific to the environment (Soar, Builder and Components). 
Directly below the menu bar is a toolbar with options to clear the text 
window, search for text within the text window or send the code within the 
text window to a Soar interpreter for validation. Underneath the text window 
is a second toolbar that implements the bracket checking facilities:
.PP
.SH MENUBAR OPTIONS
.PP
\fISoar\fR - this menu is used to open a window onto a Soar interpreter.
.PP
\fIBuilder\fR - this menu is used to select application specific, menu driven 
code generators.
.PP
\fIComponents\fR - this menu is used to select typical, frequently encountered 
Soar code structures (\fBSkeletons\fR) or project specific attribute-value 
structures (\fBa-v pairs\fR - NB this needs overhauling and is currently a 
throwback to some test code in an earlier version of this environment...).
.PP
.SH BRACKET CHECKING
.PP
The Bracket-checking toolbar offers several options:
.PP
\fIDoCount\fR - applies bracket-checking...mismatched or unclosed/unopened 
brackets will be highlighted individually in pink, and the line in which they 
appear will be highlighted in yellow.
.PP
\fIComplement\fR - by selecting a single bracket of a well formed pair, use of 
the Complement option will highlight the contents of the pair in pink.
.PP
\fIPairedBy\fR - similar to Complement, altough any bracket (paired or 
mismatched) may be selected and complement will find the first bracket that 
matches it, highlighting all text in between in pink.
.PP
\fINext\fR - extends PairedBy; after choosing PairedBy, Next will identify 
the next, next but one etc matching bracket.
.PP
.SH Soar OPTIONS
.PP
The interface to a Soar intepreter is provided by a \fIProduction Inspector\fR 
window. The Production Inspector code may be loaded independently of viSTEAM 
into a Soar interpreter, but it also forms an integral part of the viSTEAM 
environment. For example, pull down the Soar menu and select \fIagSTEAM...\fR.
This launches the Production Inspector within the automatically launched Soar
agent interpreter, agSTEAM. (NB ideally, the Production Inspector should be
able to inspect the contents of an arbitrarily selected interpreter).
The Production Inspector lists all the productions loaded in an interpreter in 
a scrollable listbox. Clicking on a produciton name highlights it, and its code
may then be viewed in the Production Inspector text window by clicking on the 
\fBView Selected Production\fR button. The code that appears in this window 
may be sent to the text editor of the main viSTEAM window for editing 
(although note that at the moment code in the viSTEAM text editor may only be 
sent to the testbed interpreter). Additional files may be sourced into the 
interpreter overlooked by the Production Inspector using the 
\fBSource *.soar\fR button.
.PP
\fBHealthcheck\fR launches another window that provides a set of tools for 
analysing the structure of the attribute-value pairs of the loaded ruleset.
.PP
\fBA-V count\fR has a go at building the attribute-value tree that is 
described implicitly within the loaded ruleset. Once this command has been 
issued, it is possible to employ the extracted information in several ways:
.PP
\fBView A-V\fR - allows the user to view the attributes or values that appear 
as instances in the ruleset less than or equal to the number of times on the 
button; \fIall\fR allows all attributes, or values, to be viewed.
.PP
\fBMore\fR - having displayed a list of attributes or values, one may be 
highlighted and by selecting the More option, the productions in which it 
appears (whether on the lhs or rhs) may be identified. Recall that selecting 
the appropriate production in the Production Inspector window allows its code 
to be displayed there.
.PP
\fBAV Tree\fR - this option produces a cascded series of tear off menus that 
correspond to the attribute value tree extracted from the ruleset. This may be 
very deep so an alternative way of navigating is also provided -
.PP
\fBAV list\fR - launches a window to allow navigation of an attribute-value 
tree using a listbox. This code is still a bit dodgy, but it's a start...(e.g. 
Add attribute/value haven't been implemented yet, tree climbing is a bit iffy).
Selecting an item in the list box and pressing \fBView Selected\fR displays 
the child attributes (or value options) of an attribute. Viewing \fB..\fR goes 
back up to the parent. The descent of the tree should be displayed in the 
bottom list box. The intention is that 'Use Selection' will allow a selected 
element of the lower listbox to be pasted into the viSTEAM text editor window.
.PP
.SH Builder OPTIONS
.PP
The Builder options are used to launch guis that accelerate the production of
frequently encountered code constructs in STEAM.
.PP
\fBAgents\fR - used to launch GUIs for constructing either single agents or a 
team of uniform (individual) agents. Following either selection, the user is
prompted for an agent name. A dialogue is then provided for setting various
attributes of the agent.
Under the \fICreate Team\fR option, the user may specify how many team members
are required (currently limited to the range (2..4 for no good reason). By 
issuing the \fIBuild team\fR command, a team is constructed and the defining
code may then be produced automatically. An option to save the code that 
defines individual team-members to separate files is then provided, (although
at the moment all that happens here is the generation of sample code for a
single agent within a dedicated text window).   
\fBOperators\fR - used to elaborate an operator with a functional model
(although at the moment it only really supports the production of actual
models).
\fBComms\fR - used to generate certain characteristics of a selected comms
channel. 







