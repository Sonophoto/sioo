


vt(n)                     Soar Commands                     vt(n)



_________________________________________________________________

NAME
     vt.tcl - Embryonic visual environment  for  developing  Soar
     productions

SYNOPSIS
     source vt.tcl
_________________________________________________________________


DESCRIPTION
     By sourcing _v_t._t_c_l in wish or a soartk environment, a visual
     environment  for  writing  Soar productions is launched. The
     intention is to provide a set of useful  tools  for  writing
     syntactically  correct productions, for example by providing
     a suite of tools dedicated to bracket checking.  Compatabil-
     ity  with  other  productions  in  a  ruleset is provided by
     automatically parsing a  sourced  ruleset  and  producing  a
     navigable  tree  of  attribute  value pairs. Such a facility
     also supports a user  attempting  to  trace  the  'execution
     path' through a ruleset.

     In addition to primitive and general tools, a set of  exten-
     sions are provided for writing STEAM compatible productions.

USAGE
     The best way into the environment is to start a _s_o_a_r_t_k shell
     in  the  viSTEAM  directory and type source vt.tcl. The user
     will then be lead through a series of dialogues that reflect
     the  base  interpreter.   A  quick tutorial through the main
     features of viSTEAM can be found in the man page vtutor.

     The viSTEAM environment is based around a text  editor.  The
     top menu-bar provides usual options as regards file, editing
     and Help options, as well as options that  are  specific  to
     the  environment  (Soar,  Builder  and Components). Directly
     below the menu bar is a toolbar with options  to  clear  the
     text  window, search for text within the text window or send
     the code within the text window to a  Soar  interpreter  for
     validation.  Underneath  the text window is a second toolbar
     that implements the bracket checking facilities:

MENUBAR OPTIONS
     _S_o_a_r - this menu is used to open a window onto a Soar inter-
     preter.

     _B_u_i_l_d_e_r - this menu is used to select application  specific,
     menu driven code generators.

     _C_o_m_p_o_n_e_n_t_s - this menu is used to select typical, frequently
     encountered  Soar  code  structures  (Skeletons)  or project



Soar                     Last change:                           1






vt(n)                     Soar Commands                     vt(n)



     specific attribute-value structures (a-v  pairs  -  NB  this
     needs  overhauling and is currently a throwback to some test
     code in an earlier version of this environment...).

BRACKET CHECKING
     The Bracket-checking toolbar offers several options:

     _D_o_C_o_u_n_t   -   applies    bracket-checking...mismatched    or
     unclosed/unopened  brackets will be highlighted individually
     in  pink,  and  the  line  in  which  they  appear  will  be
     highlighted in yellow.

     _C_o_m_p_l_e_m_e_n_t - by selecting a single bracket of a well  formed
     pair,  use  of the Complement option will highlight the con-
     tents of the pair in pink.

     _P_a_i_r_e_d_B_y  -  similar  to  Complement,  altough  any  bracket
     (paired  or  mismatched) may be selected and complement will
     find the first bracket that  matches  it,  highlighting  all
     text in between in pink.

     _N_e_x_t - extends PairedBy; after choosing PairedBy, Next  will
     identify the next, next but one etc matching bracket.

Soar OPTIONS
     The interface to a Soar intepreter is provided by a  _P_r_o_d_u_c_-
     _t_i_o_n  _I_n_s_p_e_c_t_o_r window. The Production Inspector code may be
     loaded independently of viSTEAM into a Soar interpreter, but
     it  also  forms an integral part of the viSTEAM environment.
     For example, pull down the Soar menu and select  _a_g_S_T_E_A_M....
     This  launches the Production Inspector within the automati-
     cally launched Soar agent interpreter, agSTEAM. (NB ideally,
     the  Production Inspector should be able to inspect the con-
     tents of an arbitrarily selected interpreter).  The  Produc-
     tion Inspector lists all the productions loaded in an inter-
     preter in a scrollable listbox.  Clicking  on  a  produciton
     name  highlights  it, and its code may then be viewed in the
     Production Inspector text window by  clicking  on  the  View
     Selected  Production  button.  The code that appears in this
     window may be sent to the text editor of  the  main  viSTEAM
     window for editing (although note that at the moment code in
     the viSTEAM text editor may only  be  sent  to  the  testbed
     interpreter).  Additional  files  may  be  sourced  into the
     interpreter overlooked by the Production Inspector using the
     Source *.soar button.

     Healthcheck launches another window that provides a  set  of
     tools  for  analysing  the  structure of the attribute-value
     pairs of the loaded ruleset.

     A-V count has a go at building the attribute-value tree that
     is described implicitly within the loaded ruleset. Once this



Soar                     Last change:                           2






vt(n)                     Soar Commands                     vt(n)



     command has been  issued,  it  is  possible  to  employ  the
     extracted information in several ways:

     View A-V - allows the user to view the attributes or  values
     that  appear  as instances in the ruleset less than or equal
     to the number of times on the button; _a_l_l allows all  attri-
     butes, or values, to be viewed.

     More - having displayed a list of attributes or values,  one
     may  be  highlighted  and  by selecting the More option, the
     productions in which it appears (whether on the lhs or  rhs)
     may  be  identified.  Recall  that selecting the appropriate
     production in the Production  Inspector  window  allows  its
     code to be displayed there.

     AV Tree - this option produces a cascded series of tear  off
     menus  that correspond to the attribute value tree extracted
     from the ruleset. This may be very deep  so  an  alternative
     way of navigating is also provided -

     AV list - launches  a  window  to  allow  navigation  of  an
     attribute-value  tree  using a listbox. This code is still a
     bit dodgy, but  it's  a  start...(e.g.  Add  attribute/value
     haven't  been implemented yet, tree climbing is a bit iffy).
     Selecting an item in the list box and pressing View Selected
     displays  the  child  attributes  (or  value  options) of an
     attribute. Viewing .. goes back up to the parent.  The  des-
     cent of the tree should be displayed in the bottom list box.
     The intention is that 'Use Selection' will allow a  selected
     element  of  the lower listbox to be pasted into the viSTEAM
     text editor window.

Builder OPTIONS
     The Builder options are used to launch guis that  accelerate
     the  production of frequently encountered code constructs in
     STEAM.

     Agents - used to launch GUIs for constructing either  single
     agents  or  a team of uniform (individual) agents. Following
     either selection, the user is prompted for an agent name.  A
     dialogue  is then provided for setting various attributes of
     the agent.  Under the  _C_r_e_a_t_e  _T_e_a_m  option,  the  user  may
     specify  how  many team members are required (currently lim-
     ited to the range (2..4 for no good reason). By issuing  the
     _B_u_i_l_d  _t_e_a_m  command, a team is constructed and the defining
     code may then be produced automatically. An option  to  save
     the  code  that  defines individual team-members to separate
     files is then provided, (although at  the  moment  all  that
     happens  here  is the generation of sample code for a single
     agent within a dedicated text window). Operators -  used  to
     elaborate  an  operator with a functional model (although at
     the moment it only really supports the production of  actual



Soar                     Last change:                           3






vt(n)                     Soar Commands                     vt(n)



     models).   Comms  - used to generate certain characteristics
     of a selected comms channel.





















































Soar                     Last change:                           4



