


sp(n)                     Soar Commands                     sp(n)



_________________________________________________________________

NAME
     sp - Define a Soar production

SYNOPSIS
     sp _r_u_l_e
_________________________________________________________________


DESCRIPTION
     This command defines a new Soar production.  _r_u_l_e is a  sin-
     gle  argument  parsed  by  the  Soar kernel, so it should be
     enclosed in curly braces to avoid being parsed by  Tcl.  The
     overall syntax of a _r_u_l_e is as follows:

             _n_a_m_e
                 ["_d_o_c_u_m_e_n_t_a_t_i_o_n-_s_t_r_i_n_g"]
                 [_F_L_A_G*]
                 _L_H_S
                 -->
                 _R_H_S
9
     The first element of a _r_u_l_e is its  _n_a_m_e.   Conventions  for
     _n_a_m_e_s  are  given  in  the Soar Users Manual.  If given, the
     _d_o_c_u_m_e_n_t_a_t_i_o_n-_s_t_r_i_n_g must  be  enclosed  in  double  quotes.
     Optional  flags define the type of rule and the form of sup-
     port its  right-hand  side  assertions  will  receive.   The
     specific  flags are listed in a separate section below.  The
     _L_H_S defines the left-hand side of the production and  speci-
     fies  the conditions under which the rule can be fired.  Its
     syntax is given in detail in a subsequent section.  The  -->
     symbol serves to separate the _L_H_S and _R_H_S portions.  The _R_H_S
     defines the right-hand side of the production and  specifies
     the  assertions  to  be made and the actions to be performed
     when the rule fires.  The syntax of the allowable right-hand
     side  actions  are given in a later section.  The Soar Users
     Manual gives an elaborate discussion of the design and  cod-
     ing  of productions.  Please see that reference for tutorial
     information about productions.

     More complex productions can be formed  by  surrounding  the
     _r_u_l_e  with  double  quotes  instead  of  curly braces.  This
     enables variable and command result substitutions in produc-
     tions.  If  another  production  with  the same name already
     exists, it is excised, and the new production is loaded.


RULE FLAGS
     The  optional  _F_L_A_Gs  are  given  below.   Note  that  these
     switches  are preceeded by a colon instead of a dash -- this
     is a Soar parser convention.



Soar                     Last change:                           1


9


sp(n)                     Soar Commands                     sp(n)



     :o-support
          specifies that all the RHS actions are to be  given  o-
          support when the production fires

     :no-support
          specifies that all the RHS actions are only to be given
          i-support when the production fires

     :default
          specifies that this production is a default  production
          (this matters for excise -task and watch task)

     :chunk
          specifies that this production is a chunk (this matters
          for learn trace)


LHS GRAMMAR
     Grammar for left hand sides of productions:

             _l_h_s ::= _c_o_n_d+
             _c_o_n_d ::= _p_o_s_i_t_i_v_e__c_o_n_d  | - _p_o_s_i_t_i_v_e__c_o_n_d
             _p_o_s_i_t_i_v_e__c_o_n_d ::= _c_o_n_d_s__f_o_r__o_n_e__i_d  | { _c_o_n_d+ }
             _c_o_n_d_s__f_o_r__o_n_e__i_d ::= ( [state |impasse] [_i_d__t_e_s_t] _a_t_t_r__v_a_l_u_e__t_e_s_t_s* )
             _i_d__t_e_s_t ::= _t_e_s_t
             _a_t_t_r__v_a_l_u_e__t_e_s_t_s ::= [-] ^ _a_t_t_r__t_e_s_t [._a_t_t_r__t_e_s_t]* _v_a_l_u_e__t_e_s_t*
             _a_t_t_r__t_e_s_t ::= _t_e_s_t
             _v_a_l_u_e__t_e_s_t ::= _t_e_s_t [+]  | _c_o_n_d_s__f_o_r__o_n_e__i_d [+]

             _t_e_s_t ::= _c_o_n_j_u_n_c_t_i_v_e__t_e_s_t  | _s_i_m_p_l_e__t_e_s_t
             _c_o_n_j_u_n_c_t_i_v_e__t_e_s_t ::= { _s_i_m_p_l_e__t_e_s_t+ }
             _s_i_m_p_l_e__t_e_s_t ::= _d_i_s_j_u_n_c_t_i_o_n__t_e_s_t  | _r_e_l_a_t_i_o_n_a_l__t_e_s_t
             _d_i_s_j_u_n_c_t_i_o_n__t_e_s_t ::= << _c_o_n_s_t_a_n_t* >>
             _r_e_l_a_t_i_o_n_a_l__t_e_s_t ::= [_r_e_l_a_t_i_o_n] _s_i_n_g_l_e__t_e_s_t
             _r_e_l_a_t_i_o_n ::= <>  | <  | >  | <=  | >=  | =  | <=>
             _s_i_n_g_l_e__t_e_s_t ::= variable  | _c_o_n_s_t_a_n_t
             _c_o_n_s_t_a_n_t ::= sym_constant  | int_constant  | float_constant
9
RHS GRAMMAR
     Grammar for right hand sides of productions:

             _r_h_s ::= _r_h_s__a_c_t_i_o_n*
             _r_h_s__a_c_t_i_o_n ::= ( variable _a_t_t_r__v_a_l_u_e__m_a_k_e+ )  | _f_u_n_c_t_i_o_n__c_a_l_l
             _f_u_n_c_t_i_o_n__c_a_l_l ::= ( _f_u_n_c_t_i_o_n__n_a_m_e _r_h_s__v_a_l_u_e* )
             _f_u_n_c_t_i_o_n__n_a_m_e ::= sym_constant  | +  | -
             _r_h_s__v_a_l_u_e ::= _c_o_n_s_t_a_n_t  | _f_u_n_c_t_i_o_n__c_a_l_l  | variable
             _c_o_n_s_t_a_n_t ::= sym_constant  | int_constant  | float_constant
             _a_t_t_r__v_a_l_u_e__m_a_k_e ::= ^ _r_h_s__v_a_l_u_e [._r_h_s__v_a_l_u_e]* _v_a_l_u_e__m_a_k_e+
             _v_a_l_u_e__m_a_k_e ::= _r_h_s__v_a_l_u_e _p_r_e_f_e_r_e_n_c_e_s

             _p_r_e_f_e_r_e_n_c_e_s ::= [,] | _p_r_e_f_e_r_e_n_c_e-_s_p_e_c_i_f_i_e_r+
             _p_r_e_f_e_r_e_n_c_e-_s_p_e_c_i_f_i_e_r ::= _n_a_t_u_r_a_l_l_y-_u_n_a_r_y-_p_r_e_f_e_r_e_n_c_e [,]



Soar                     Last change:                           2


9


sp(n)                     Soar Commands                     sp(n)



                                       | _f_o_r_c_e_d-_u_n_a_r_y-_p_r_e_f_e_r_e_n_c_e
                                       | _b_i_n_a_r_y-_p_r_e_f_e_r_e_n_c_e _r_h_s__v_a_l_u_e [,]
             _n_a_t_u_r_a_l_l_y-_u_n_a_r_y-_p_r_e_f_e_r_e_n_c_e ::= +  | -  | !  | ~  | @
             _b_i_n_a_r_y-_p_r_e_f_e_r_e_n_c_e ::= >  | =  | <  | &
             _f_o_r_c_e_d-_u_n_a_r_y-_p_r_e_f_e_r_e_n_c_e ::= _b_i_n_a_r_y-_p_r_e_f_e_r_e_n_c_e {,  | )  | ^}
9

EXAMPLES
     There are many examples in the Soar  Users  Manual  and  the
     demos subdirectory.  Here is a simple production to create a
     problem space.  It comes from the  critter-world  demo  (see
     the file critter.tcl):


          sp {critter*create*space*critter
             "Formulate the initial problem space"
            (state <s> ^superstate nil)
            -->
            (<s> ^name move-around ^problem-space <p>)
            (<p> ^name critter)}

9
     The      production      above      has       the       _n_a_m_e
     critter*create*space*critter.  It has a documentation string
     that is surrounded by double quotes.  The _L_H_S is (state  <s>
     ^superstate  nil)  and  indicates  that this rule will match
     whenever there is a state object  that  has  the  attribute-
     value  pair  ^superstate  nil.   The --> arrow separates the
     left and right-hand sides.  The _R_H_S consists of  two  lines.
     The  first  asserts that the state object is to be augmented
     with the name move-around and  a  problem  space  should  be
     created.   The  second  line  of the _R_H_S indicates that this
     problem space should be named critter.

     New for Soar 8, is right-hand-side dot  notation.   So  this
     production could also be written:


          sp {critter*create*space*critter
             "Formulate the initial problem space"
            (state <s> ^superstate nil)
            -->
            (<s> ^name move-around ^problem-space.name critter)}

9
     Here is a variant of the above example using  double  quotes
     instead  of curly braces.  Double quotes are needed in order
     to imbed the value of the Tcl  variable  soar_agent_name  in
     the  production.  The value of this variable is used to name
     the problem-space created.
9


Soar                     Last change:                           3






sp(n)                     Soar Commands                     sp(n)



          sp "critter*create*space*critter
             (state <s> ^superstate nil)
            -->
            (<s> ^name move-around ^problem-space <p>)
            (<p> ^name $soar_agent_name)"

9
     The primary change in the rule is the  last  clause  of  the
     _R_H_S.   In  that  clause, the Tcl variable soar_agent_name is
     expanded.  If this rule is given in an interpreter which has
     the variable soar_agent_name set to fred, then the _R_H_S would
     expand to the following before being sent to the Soar kernel
     to be parsed:


            (<p> ^name fred)

9
     Please be aware that when using double quotes, both the dol-
     lar  sign  (variable expansion) and square brackets (command
     result substitution) will be interpreted by Tcl.   If  these
     characters  ($,  [, and ]) are to be passed to the Soar pro-
     duction parser, they must be escaped (using a backslash)  to
     avoid interpretation by Tcl.


WARNINGS
     The last production above does not contain  a  documentation
     string.  If  one  were added, double quotes would need to be
     escaped to avoid premature termination of the rule:


          sp "critter*create*space*critter

             (state ...

9

SEE ALSO
     excise, learn, watch










9


Soar                     Last change:                           4



