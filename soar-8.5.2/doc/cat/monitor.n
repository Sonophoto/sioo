


monitor(n)                Soar Commands                monitor(n)



_________________________________________________________________

NAME
     monitor - Manage attachment of scripts to Soar events

SYNOPSIS
     monitor _a_c_t_i_o_n
_________________________________________________________________


DESCRIPTION
     This command manages  the  attachment  of  scripts  to  Soar
     events.  Soar events are important events that occur in Soar
     as an agent is being processed.  Scripts can be attached  to
     these  Soar  events  so that they are invoked every time the
     Soar event occurs. These scripts can also be  removed  using
     the monitor command. The status of attachments can be listed
     and tested.  If a new attachment is created, its  identifier
     is  returned  as the result of this command.  The identifier
     is used when deleting a script from an event.

     The specified _a_c_t_i_o_n must have one of the following forms:

     -add _s_o_a_r-_e_v_e_n_t _s_c_r_i_p_t [_i_d]
          Add the _s_c_r_i_p_t to the list of  scripts  to  be  invoked
          when  the  _s_o_a_r-_e_v_e_n_t  occurs  in the Soar kernel.  See
          below for a list of valid Soar event names.  If the  _i_d
          is  given, it is used to name the attachment.  If no _i_d
          is given, then a unique id is generated and returned.

     -delete _s_o_a_r-_e_v_e_n_t [_i_d]
          Remove scripts attached to _s_o_a_r-_e_v_e_n_t.  The  _s_o_a_r-_e_v_e_n_t
          must  match a valid Soar event name (see below).  If _i_d
          is given after a _s_o_a_r-_e_v_e_n_t, then only that  particular
          attachment  is  removed.   Otherwise,  all  attachments
          under _s_o_a_r-_e_v_e_n_t are removed.

     -list
          List all attachments of scripts to Soar events

     -test
          Test the script attachment process by attaching a print
          message to every Soar event.

     -clear
          Remove _a_l_l attached scripts.

EXAMPLES
     This command creates an attachment which  prints  a  message
     after every Soar decision cycle:

          monitor -add after-decision-cycle {puts "Finished DC!"}



Soar                     Last change:                           1






monitor(n)                Soar Commands                monitor(n)



     This example creates an attachment which calls the Tcl  pro-
     cedure  "DoSomething"  (presumably user-defined) after every
     production firing:

          monitor -add firing DoSomething
9
     This example creates an attachment which processes pending X
     events  after every decision cycle.  This is needed in long-
     running Soar agents so that GUIs do not appear frozen:

          monitor -add after-decision-cycle update
9
     This example adds an  attachment  which  ticks  a  simulator
     after   each  agent  has  completed  a  cycle  in  the  Soar
     scheduler.  Note that this example command  is  executed  in
     the  global  agent's  interpreter  so  that the simulator is
     ticked only once per schedule  cycle.   The  "TickSimulator"
     command would be defined by the user.

          monitor -add after-schedule-cycle TickSimulator
9
     This example adds an attachment that could be used to inform
     the  Soar  development  tool  SDE  that  an  agent  has been
     selected for scheduling.  SDE  expects  certain  strings  in
     Soar output and uses them to control some SDE operations.

          monitor -add before-schedule-cycle {puts "0electing agent $soar_agent_name"}
9
     This example removes the single attachment "m1" which  asso-
     ciates a script with the Soar event after-init-agent:

          monitor -delete after-init-agent m1
9
     This example removes all  script  attachments  to  the  Soar
     event before-preference-phase-cycle:

          monitor -delete before-preference-phase-cycle
9
     This example removes all script attachments that  have  been
     added with the monitor command:

          monitor -clear
9
SOAR EVENTS
     This command utilizes the Soar  callback  system  which  can
     associate TCL or C functions with Soar events.  The permiss-
     able Soar event names are:

     system-termination



Soar                     Last change:                           2


9


monitor(n)                Soar Commands                monitor(n)



          The Soar system is exiting.

     after-init-agent

          An agent has just been created and initialized.

     before-init-soar

          The agent is about to be  initialized.   The  init-soar
          command will generate this event.

     after-init-soar

          The agent has just  been  initialized.   The  init-soar
          command will generate this event.


     after-halt-soar

          The agent has just been halted.

     before-schedule-cycle

          This event is triggered by the  schedule  command.   In
          the  global  control  agent,  this  event  is triggered
          before each schedule cycle starts.   In  other  agents,
          this event is triggered during the schedule cycle, just
          before the agent is run.

     after-schedule-cycle

          This event is triggered by the  schedule  command.   In
          the  global control agent, this event is triggered just
          after each schedule cycle ends.  In other agents,  this
          event  is  triggered  during  the  schedule cycle, just
          after the agent is run.

     before-decision-cycle

          A decision cycle is just about to start.

     after-decision-cycle

          A decision cycle has just ended.

     before-input-phase

          An input phase is just about to start.

     after-input-phase

          An input phase has just ended.



Soar                     Last change:                           3






monitor(n)                Soar Commands                monitor(n)



     before-preference-phase-cycle

          A preference phase is just about to begin.

     after-preference-phase-cycle

          A preference phase has just ended.

     before-wm-phase-cycle

          A working memory phase is just about to begin.

     after-wm-phase-cycle

          A working memory phase is just about to begin.

     before-output-phase

          An output phase is just about to begin.

     after-output-phase

          An output phase has just ended.

     before-decision-phase-cycle

          A decision phase is about to begin.

     after-decision-phase-cycle

          A decision phase has just ended.

     wm-changes

          Changes to working memory have just completed.

     create-new-context

          A new state has been created on the goal stack.

     pop-context-stack

          A subgoal has finished.

     create-new-attribute-impasse

          A new attribute impasse has occurred.

     remove-attribute-impasse

          An attribute impasse has been removed.




Soar                     Last change:                           4






monitor(n)                Soar Commands                monitor(n)



     production-just-added

          A productions has just been added to the agent.


     production-just-about-to-be-excised

          A production is just  about  to  be  removed  from  the
          agent.

     firing

          A production instantiation has just fired.


     retraction

          A production instantiation is just about to retract.

     system-parameter-changed

          A system parameter has just been changed.

































Soar                     Last change:                           5



