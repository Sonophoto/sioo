


vtutor(n)                 Soar Commands                 vtutor(n)



_________________________________________________________________

NAME
     viSTEAM (Tutorial) - A quick run through the major  features
     of  an embryonic visual environment for developing Soar pro-
     ductions and essential STEAM rules.

SYNOPSIS
     source vt.tcl
_________________________________________________________________

TUTORIAL
able is essential.
     1.  Set pathnames as required in prefs.tcl. Only the VS_DIR vari-

soartk; when in Soar, source vt.tcl
     2.   cd  to  the directory containing the viSTEAM code and launch

Soar is available - hit Yes.
     3.   If  Soar  is not v7.0.4 you should be prompted about whether

extensions is now offered. This starts  a  Soar  interpreter  and
loads  the  STEAM rules into it from a user specified directory -
if it does appear (i.e. you have  set  env(STEAM_1pt1_DIR)),  hit
No.
     4.  If a STEAM directory path is provided, a prompt to load STEAM

Yes.
     5.  You are now asked whether STEAM prototypes are required -
           hit

appeared,  with  some  familiar  and  not  so  familiar  menu bar
options. There are also two toolbars, one directly above and  one
directly  below  the  main text editing window (the _c_o_d_e _w_i_n_d_o_w).
(Some info about what's what appears in the man  page  vt  -  the
purpose  here is to provide a quick run through, so there'll only
be a minimum of explanation...;-).
     6.   The  viSTEAM  main  window  (the  _E_d_i_t_S_o_a_r)should  now  have

     7.  Goto Builder on the menu bar and select Agents.

     8.  Select Create Team....

team herein).
     9.  You will now be prompted for a team-name -
           choose one  (test-

tings  (note that the characteristics of the chosen comms channel
may be manipulated via the Details... option of the comms channel
selection  or  the  Comms...  option  of  the Builder menu). When
playing's done, hit Build team.... This creates a team  based  on
the information provided.



Soar                     Last change:                           1






vtutor(n)                 Soar Commands                 vtutor(n)



     10. A team builder dialogue is now presented. Play with the  set-

- hit Generate Soar Code.... The code  window  should  be  filled
with Soar code...
     11. You are now in a position to automatically generate some code

the code for a single team agent is presented in a new text  win-
dow.  Appropriate  code  for  each  team  member  may be saved to
independent files by pressing Save agent code; this  has  a  side
effect of closing the example agent code window.
     12.  A  prompt appears to _S_a_v_e _a_g_e_n_t _c_o_d_e? -
           hit Yes. A sample of

option  of  the  File menu. Close the teambuilder window (Close).
Now build an operator from the Operators option  of  the  Builder
menu, and generate the soar code.
     13. Save the code appearing in the code window by using the  Save

interpreter (in this case  agTestbed,  which  is  provided  as  a
default).  This  may  be  directly by dropping down the Send code
to... menu and choosing agTestbed. This  launches  a   Production
Inspector window.
     14. To prove the code is valid, we'll now send it to a soar agent

the Production Inspector listbox. (The listbox contains a list of
Soar productions in the interpreter, so if the name appars there,
the production is well formed). Selecting the production name and
clicking  on  _V_i_e_w  _S_e_l_e_c_t_e_d _s_p will display the production code.
Code for a selected production by be  sent  to  the  _E_d_i_t_S_o_a_r  by
means  of  the Copy code to viSTEAM button (clear the text in the
_E_d_i_t_S_o_a_r by clicking on Clear in the top  toolbar  of  that  main
window,  and  then  send  code  to it from the Production Inspec-
tor...)
     15. The name of the production sent to agTestbed should appear in

interpreter from the File menu (Source *.soar). If several  files
are  to  be  sourced,  and  a  load.soar,  soar.soar or {current-
interpreter}.soar file exists in a directory in order  to  manage
the  sourcing  of  files  within  that  directory, it may sourced
automatically by selecting File.Source ruleset and  entering  the
appropriate directory path.
     16.  .soar  rulefiles  may  be  loaded  directly into the current

isn't too large, but is large enough to be interesting ;-).  From
the  Production Inspector menubar, select View and thence Health-
check. Yet another window appears, in which we can  look  at  the
attribute-value structure of the loaded ruleset.
     17.  Now  for  something that helps with debugging if the ruleset

able, it may be launched in the current interpreter from the  TSI
option).  A  bit of chugging ensues as the loaded productions are
(badly) parsed; a shortform version of the  avtree  is  automati-



Soar                     Last change:                           2






vtutor(n)                 Soar Commands                 vtutor(n)



cally  saved  as  a  .avp file. Lots of options are now available
from the View menu.
     18. Goto the Options menu and choose A-
          V count. (If TSI is avail-

allows you to look at the attributes or values that appear in the
loaded ruleset less than or equal to a user  selected  number  of
times;  the  idea  is  to try and track down typos by identifying
attributes or values that only appear once or twice in the  whole
ruleset. Select Attr.
     19. Goto the View menu and  select  the  View  A_V  option.  This

they appear may  now be identified. Select an item in the listbox
and  press the Related sp... button. By selecting one of the pro-
duction names, its code may be viewed with  the  View  Production
button on the toolbar at the bottom of the window.
     20.  Having loaded a list of attributes, the productions in which

ruleset may be identified directly using the appropriate  options
from  the  View  menu.  Selecting  a  particular _p_r_o_b_l_e_m-_s_p_a_c_e or
_o_p_e_r_a_t_o_r name and clicking on Related sp... identifies  the  pro-
ductions  which propose and exploit (and terminate in the case of
_o_p_e_r_a_t_o_r_s) the name. For the single production example used here,
this is not very interesting.
     21.  Particular  _p_r_o_b_l_e_m-
          _s_p_a_c_e_s  and  _o_p_e_r_a_t_o_r_s  used  within the

of  the  loaded  ruleset as a series of cascaded menus. Wander up
and down the tree. This structure (hopefully) reflects the struc-
ture inherent within the loaded productions.
     22. From the menubar select AV Tree. This depicts the full _a_v_t_r_e_e

ruleset is large, so an alternative way of viewing the _a_v_t_r_e_e  is
using  the  AV  Tree option from the View menu. This opens a text
window (and also saves a  tabulated  .avt  file)  containing  the
_a_v_t_r_e_e. The tree may be searched for particular attributes/values
using the toolbar at the bottom of the window. Close the AV  Tree
Viewer  window.  A  related  tool,  OpHelia,  (available from the
_H_e_a_l_t_h_c_h_e_c_k menu View.Operator Hierarchy) tries  to  generate  an
operator  hierarchy  based  on  analysis  of  operator.names that
appear in the rhs of a production whose lhs contains  a  specific
operator  or problem-space name. Again, for the single production
example used here, this is not very interesting/
     23.  Using  AV Tree from the menu bar can be quite scary when the

from the AV List option of the View menu: the  screen  gets  ever
more  cluttered  with  a Navigate Project window. Select the item
_c_o_m_m_a_n_d in the list box of this window and hit Traverse Path.  Do
the  same  for  _g_r_o_u_p. In this way the avtree may be scaled and a
history appears in the middle frame; selecting one of these items
(for  example,  ^_c_o_m_m_a_n_d._g_r_o_u_p) and pressing Use Selection pastes
the selected item at the current  cursor  position  in  the  main



Soar                     Last change:                           3






vtutor(n)                 Soar Commands                 vtutor(n)



_E_d_i_t_S_o_a_r  code  window (the idea is to minimise the likelihood of
generating typos  whilst  writing  Soar  productions;  a  similar
facility  is available in the ditSoar directly, as will be demon-
strated later). The avtree may be climbed  by  selecting  ..  and
traversing the path.
     24.  Rather more flexibility in navigating the _a_v_t_r_e_e is provided

In the lower frame appears the  names  of  all  productions  that
include  the selected structure, distributed howsoever throughout
the production (so for example, a search on ^_a._b _c would actually
be  made over ^_a._b._c _d -->, ^_a._b --> ^_c _d, ^_a --> ^_b._c _d and  -->
^_a._b._c _d, appropriately formed of course.
     25.  With ^_c_o_m_m_a_n_d._g_r_o_u_p still selected, click on Identify Prods.

filter the productions identified  as  containing  ^_c_o_m_m_a_n_d._g_r_o_u_p
with  respect to particular ^_o_p_e_r_a_t_o_r._n_a_m_e or ^_p_r_o_b_l_e_m-_s_p_a_c_e._n_a_m_e
values.  So  for  example,  if   you   want   to   know   whether
^_c_o_m_m_a_n_d._g_r_o_u_p appears in a production associated with a particu-
lar operator, click on the operator in the left hand box  of  the
operator  frame  of  the  Filtered  Search  window, Add it to the
filter set, reselect ^_c_o_m_m_a_n_d._g_r_o_u_p in the Navigate window,  then
press  Identify Prods in the Filtered Search window. NB operators
are selected for filtered search via  listboxes;  problem  spaces
are selected using checkbuttons. This reflects an assumption that
there will be few problem spaces and many operators.  Cancel  the
Filtered Search window and close the Navigator window.
     26.  Click  on  Advanced  Search.  The  new window may be used to

Inspector window. In the main viSTEAM window, clear the code win-
dow (Clear on the toolbar directly above the code window.
     27. Close the Production Healthcheck window. Close the Production

a series of cascded menus that allows you to exploit  an  avtree.
Only  take  _c_a_s_c_a_d_e options at this point. Note that two projects
are available from the av-pairs menu, soar  (a  default)  and  (a
reduced  form  of)  STEAM (which was loaded). Goto File, Project,
Load *.avp and hit return when presented with the request  for  a
filename,  taking the default (agTestbed.avp, which we previously
saved). Returing to av-pairs, there is now an  agTestbed  option,
which  cascades  into  the avtree for the production we generated
earlier.
     28. Drop the Components menu and and goto av-
          pairs; this leads to

ject....  Take  it  and  accept  the  default name. It should now
appear as an option on the av-pairs menu.
     29. Withing the first av-
          pairs cascade is an option to  Add  pro-

the top left hand corner of the window (it should be set to soar.
Change this to testproj. ***at the moment,  agTestbed  is  not  a
viable  option  because  its  avtree lacks 2 essential branches -



Soar                     Last change:                           4






vtutor(n)                 Soar Commands                 vtutor(n)



_p_r_o_b_l_e_m-_s_p_a_c_e._n_a_m_e and  _o_p_e_r_a_t_o_r._n_a_m_e;  these  may,  however,  be
added by the user as we shall see***
     30. The current project in the _E_d_i_t_S_o_a_r is given by the  menu  in

Propose op.... Give it  a  name  (no  angle  brackets),  such  as
testop.Core  lhs....  Give  the production a name and hit return.
Core code for this production appears in the text window, and the
operator  name  is  appended  to the list of possible name values
within the av-pairs.testproj.operator.name menu.
     31.  Goto  Components  on  the menubar and select Skeletons, then

ponents, av-pairs, steam, ^agent, approach-to-coordination, *cau-
tious*,  g.parent,  (a  bit  laborious, I know). This inserts the
code  for  ^_a_g_e_n_t._a_p_p_r_o_a_c_h-_t_o-_c_o_o_r_d_i_n_a_t_i_o_n  *_c_a_u_t_i_o_u_s*.  Play  at
will...(the   sense  is  that  parent  would  give  ^_a_p_p_r_o_a_c_h-_t_o-
_c_o_o_r_d_i_n_a_t_i_o_n  *_c_a_u_t_i_o_u_s*,  *cautious*  would  print   *_c_a_u_t_i_o_u_s*,
g.g.parent would give ^_g_r_e_a_t._g_r_a_n_d._p_a_r_e_n_t _m_e etc.
     32.  Place the cursor between <_s>) and ^_p_r_o_b_l_e_m-
          _s_p_a_c_e. Goto  Com-

particular  avtrees  from  within the av-pairs.whatever-proj cas-
cade. For example, goto av-pairs.testproj.Add  ^attr  <ind>,  and
name the attribute _t_e_s_t_a_t_t_r_i_b_u_t_e(or whatever). This means we want
to add an attribute that will point  to  other  attributes.  Goto
av-pairs.testproj.^testattribute.Add ^attr const... and name this
one   _t_e_s_t_2_a_t_t_r_i_b_u_t_e   (or   whatever).   Finally,    goto    av-
pairs.testproj.^testattribute.test2attribute.Add  value... to add
constant  values.  The  new  avtree  may  be   saved   from   the
File.Project.Save a-v menu, as a ._a_v file.
     33. Attributes and values may be added as  required  (Add...)  to

required)... Delete a single bracket somewhere in the  production
code  (NB the delete key removes stuff to the *right* of the cur-
sor...).  On  the  toolbar   below   the   code   window,   press
DoCount...chug,  chug,  chug...The  line containing the unmatched
bracket will be highlighted, as will the unmatched bracket.
     34.  Now  for  the bracket checking tools (NB a colour monitor is

bracket that complements the unmatched one will  be  highlighted,
as will all the intervening characters. Pressing Next goes to the
next complementary braket etc. Replace the missing bracket.
     35.  Select the unmatched bracket, and press Paired By. The first

highlights the code within the well formed pair. Clear  the  code
window.  If Soar extensions are enabled (via the Preferences menu
on the bottom toolbar) then some additional checks  are  made  to
the Soar code (e.g. (<a>^attr val) would be signalled as an error
because of touching >^).
     36.   Select   a  matched  bracket  and  press  Complement.  This

     37. Goto File and select Exit.




Soar                     Last change:                           5






vtutor(n)                 Soar Commands                 vtutor(n)



     Here ends the  quick  run  through  the  major  features  of
     viSTEAM.     Comments,     project     funding     etc    to
     Tony.Hirst@port.ac.uk        please.        See         also
     _h_t_t_p://_w_w_w._d_c_s._p_o_r_t._a_c._u_k/~_h_i_r_s_t_a"

     You may want to have another run through now using a ruleset
     (100 to 200 prods, say) of your own:

     a) Launch visteam in its home directory, refusing steam options;

     b) Goto Soar-->New..." and give it a name (_m_y_p_r_o_j);

     c) Goto Soar-->myproj;

and  give  it  the  name of a directory that contains a load.soar
file to manage the loading of lots  of  soar  files  within  that
directory;
     d) From the _P_r_o_d_u_c_t_i_o_n _V_i_e_w_e_r menubar, goto File--
          >Source ruleset

     e) Goto View-->Healthcheck;

     f) From the _H_e_a_l_t_h_c_h_e_c_k menubar, goto Options-->A-V Count;

     g) Play with the options from the View menu.


     Mail   me   with   questions,   suggestions,    bugs    etc.
     Tony.Hirst@port.ac.uk


























Soar                     Last change:                           6



