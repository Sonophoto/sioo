#!../../blt-1.8/blt_wish -f

# This code is a slight modification of the script "graph" that
# came with the BLT distribution.

source $env(SOAR_LIBRARY)/FSBox.tcl

if [file exists ../library] {
    set blt_library ../library
}
option add *Blt_htext.Font *Times-Bold-R*14*
option add *graph.xTitle "Go Step"
option add *graph.yTitle "Y"
option add *graph.title "SoarGraph"
option add *graph.elemBackground red

set visual [winfo screenvisual .] 
if { $visual != "staticgray" } {
    option add *print.background yellow
    option add *quit.background red
}


proc ConfigureGraph { interp graph } {
    global env
    exec $env(TCL_DIR)/blt-1.8/blt_wish -name GraphConfig \
         -f $env(TCL_DIR)/blt-1.8/demos/grconf.tcl $interp $graph &
}

set remote {}
global graph
set graph .graph
blt_htext .header -text {%%
%%This is a demo of SoarGraph.  It displays two-variable 
data with assorted line attributes and symbols.  The graph itself has 
many components; x and y axis, legend, crosshairs, elements, etc.  
You can configure any component by pressing this %% 
button $blt_htext(widget).config -text button -bg green \
    -command [list ConfigureGraph [winfo name .] $graph]
$blt_htext(widget) append $blt_htext(widget).config
%%.

You can zoom in on a section of the graph by using the left mouse
button to mark and drag out a rectangle.  Mouse middle returns
you to overview mode.

To create a postscript file, press the %%
button $blt_htext(widget).print -text print -command { 
  cd
  set file [FSBox "Select File:" [pwd]]
  .graph postscript $file -pagewidth 6.5i -pageheight 9i -landscape true 
} 
$blt_htext(widget) append $blt_htext(widget).print
%% button.}

blt_graph $graph

blt_htext .footer -text {Hit the %%
button $blt_htext(widget).quit -text quit -command { 
    catch "send GraphConfig after 1 exit" 
    destroy .
} 
$blt_htext(widget) append $blt_htext(widget).quit 
%% button when you've seen enough.%%
label $blt_htext(widget).logo -bitmap BLT
$blt_htext(widget) append $blt_htext(widget).logo -padx 20
%%}

proc line_add {line x y} {
    global graph ${line}
    lappend ${line}(x) $x
    lappend ${line}(y) $y
    eval "$graph element configure ${line} \
         -xdata \$${line}(x) -ydata \$${line}(y)"
}

#$graph crosshairs set on

pack append . \
	.header { padx 20 pady 10 }  \
	.graph {} \
	.footer { padx 20 pady 10 }
	
wm min . 0 0

source $env(SOAR_LIBRARY)/../../blt-1.8/demos/features.tcl
#SetCrosshairs $graph
SetActiveLegend $graph
SetClosestPoint $graph
SetZoom $graph

wm min . 0 0

