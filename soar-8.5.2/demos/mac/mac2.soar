###
### FILE          : mac2.soar
###

###
### AUTHOR(1)     : John Laird          [ Soar 8.2 ] 
###

###
### CREATED(3)    : Feb 2, 99
### Modified      : Aug 3, 99
###

###
### ABSTRACT. This file provides a Soar system to solve 
### the missionaries and cannibals problem. Three missionaries and 
### three cannibals come to a river. There is a a boat on their bank of 
### the river that can be used by either one or two persons at a time. 
### This boat must be used to cross the river in such a way that
### cannibals never outnumber missionaries on either bank of the river.
###


### This version has a simpler state representation than mac1.soar.
### There is only a representation of what is on the left bank and
### the right.
### Copying the states would be more complex, (two-level-attributes)
### but initial state definition, operator proposal and
### application are simplier.

### Does not include planning and chunking.

learn -off

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE:
### INITIAL-STATE
###
sp {mac*elaborate*state*name
   (state <s> ^superstate nil)
   -->
   (<s> ^name mac)}


sp {mac*elaborate*initial-state
   (state <s> ^name mac)
   -->
   (<s> ^missionaries <m>
        ^cannibals <c>
        ^boat <b>)
   (<b> ^left 1
        ^right 0) 
   (<m> ^left 3
        ^right 0)
   (<c> ^left 3
        ^right 0)
   }

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE OPERATORS: 
### MOVE1, MOVE2, AND MOVE11
###

sp {mac*propose*move-mac-boat*1
   "Moves either a single missionary or a cannibal."
   (state <s> ^name mac
              ^{ << cannibals missionaries >> <type> }.<bank> > 0
              ^boat.<bank> 1)
   -->
   (<s> ^operator <o> + =)
   (<o> ^name move-mac-boat
        ^types 1
        ^boat 1
        ^<type> 1)}

sp {mac*propose*move-mac-boat*2
   "Moves either a two missionaries or two cannibals."
   (state <s> ^name mac
              ^{ << cannibals missionaries >> <type> }.<bank> > 1
              ^boat.<bank> 1)
   -->
   (<s> ^operator <o> + =)
   (<o> ^name move-mac-boat
        ^types 1
        ^boat 1
        ^<type> 2)}

sp {mac*propose*move-mac-boat*11
   (state <s> ^name mac
              ^cannibals.<bank> > 0
              ^missionaries.<bank> > 0
              ^boat.<bank> 1)
   -->   
   (<s> ^operator <o> + =)
   (<o> ^name move-mac-boat
        ^types 2
        ^boat 1
        ^missionaries 1
        ^cannibals 1)}

###
### MOVE OPERATOR IMPLEMENTATION
###

sp {apply*move-mac-boat
   (state <s> ^operator <o>
              ^<type> <type-id>
              ^boat <b>)
   (<b> ^{ << left right >> <bank>  } 1
        ^{ << left right >> <obank> } 0)
   (<o> ^name move-mac-boat
        ^{ << boat missionaries cannibals >> <type> } <number>)
   (<type-id> ^<bank> <bank-num>
              ^<obank> <obank-num>)
   -->
   (<type-id> ^<bank> <bank-num> -
              (- <bank-num> <number>)
              ^<obank> <obank-num> -
              (+ <obank-num> <number>))}

###
### Record last operator
###

sp {mac*apply*move-mac-boat*record*last-operator*types*1
   (state <s> ^name mac
              ^operator <o>
              ^boat.<bank> 1)
   (<o> ^name move-mac-boat
        ^{ << missionaries cannibals >> <type> } <n>
        ^types 1)
   -->
   (<s> ^last-operator <o1>)
   (<o1> ^boat <bank>
         ^types 1
         ^type <type>
         ^number <n>)}

sp {mac*apply*move-mac-boat*record*last-operator*types*2
   (state <s> ^name mac
              ^operator <o>
              ^boat.<bank> 1)
   (<o> ^name move-mac-boat
        ^types 2)
   -->
   (<s> ^last-operator <o1>)
   (<o1> ^types 2
         ^boat <bank>)}

sp {mac*apply*move-mac-boat*remove*old*last-operator
   (state <s> ^name mac
              ^operator.name move-mac-boat
              ^boat.<bank> 0
              ^last-operator <lo>)
   (<lo> ^boat <bank>)
   -->
   (<s> ^last-operator <lo> -)}

## Prefer inverse of failed last operator.

sp {mac*select*operator*inverse*failure*types*1
   (state <s> ^name mac
              ^operator <o> +
              ^failure true
              ^last-operator <lo>)
   (<o> ^name move-mac-boat
        ^<type> <number>
        ^types 1)  
   (<lo> ^types 1
         ^type <type>
         ^number <number>)
   -->
                                        # (write (crlf) |Undo last move.|)
   (<s> ^operator <o> > )}

sp {mac*select*operator*inverse*types*2
   (state <s> ^name mac
              ^operator <o> +
              ^failure true
              ^last-operator <lo>)
   (<o> ^types 2)
   (<lo> ^types 2)
   -->
#  (write (crlf) |Undo last move.|)
   (<s> ^operator <o> > )}

## Avoid inverse if no failure

sp {mac*select*operator*inverse*not*failure*types*1
   (state <s> ^name mac
              ^operator <o> +
             -^failure true
              ^last-operator <lo>)
   (<o> ^types 1
        ^<type> <number>)
   (<lo> ^types 1
         ^type <type>
         ^number <number>)
   -->
   (<s> ^operator <o> < )}

sp {mac*select*operator*inverse*not*failure*types*2
   (state <s> ^name mac
              ^operator <o> +
             -^failure true
              ^last-operator <lo>)
   (<o> ^types 2)
   (<lo> ^types 2)
   -->
   (<s> ^operator <o> < )}

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE: 
### STATE EVALUATION
###

sp {mac*evaluate*state*failure*more*cannibals
   (state <s> ^name mac
              ^missionaries <m>
              ^cannibals <c>)
   (<m> ^<bank> { <n> > 0 })
   (<c> ^<bank> > <n>)
   -->
   (write (crlf) |Failure State.|)
   (<s> ^failure true)}

###
### EVALUATION: STATE SUCCESS/GOAL TEST
###

 ## This implicitly defines the desired state of the problem.
  #

sp {mac*detect*state*success
   (state <s> ^name mac
              ^missionaries.right 3
              ^cannibals.right 3)
   -->
   (write (crlf) |Success!|)
   (halt)}

sp {monitor*move
   (state <s> ^name mac
              ^operator <o>)
   (<o> ^{ << missionaries cannibals >> <type> } <number>)
   -->
   (write | Move | <number> | | <type>)}

sp {monitor*state*left
   (state <s> ^name mac
              ^boat.left 1
              ^missionaries.left <ml>
              ^missionaries.right <mr>
              ^cannibals.left <cl>
              ^cannibals.right <cr>)
   -->
   (write (crlf) | M: | <ml> |, C: | <cl> | B ~~~   | 
                 | M: | <mr> |, C: | <cr> |  |)}

sp {monitor*state*right
   (state <s> ^name mac
              ^boat.right 1
              ^missionaries.left <ml>
              ^missionaries.right <mr>
              ^cannibals.left <cl>
              ^cannibals.right <cr>)
   -->
   (write (crlf) | M: | <ml> |, C: | <cl> |   ~~~ B | 
                 | M: | <mr> |, C: | <cr> |  |)}

