###
### FILE          : mac1.soar
###
###
### AUTHOR        : John Laird  
###
### Last Modified:     : September 16, 1999
###
### ABSTRACT.
### This file provides a Soar system to solve the missionaries and
### cannibals problem.
###
### PROBLEM STATEMENT
### Three missionaries and three cannibals come to a river. There is a a
### boat on their bank of the river that can be used by either one or
### two persons at a time.  This boat must be used to cross the river in
### such a way that cannibals never outnumber missionaries on either
### bank of the river.
###

### DESCRIPTION.
### Simple state representation where the state has two objects: one for
### each bank of the river. Each of these has augmentations for
### missionaries, cannibals, and the boat; with their values being the
### number of the entity type on that bank of the river. This is the
### version covered in Soar 8 Tutorial.  Copying the states is more
### complex (two-level-attributes) than other versions, but initial
### state definition, operator proposal and application is simplier.
###


learn -on
pushd ../default
source simple.soar
source selection.soar
popd

###
### MISSIONARIES-AND-CANNIBALS NAME
###

sp {top-state*elaborate*missionaries-and-cannibals
	(state <s> ^superstate nil)
	-->
	(<s> ^name mac)}

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE
###

sp {mac*elaborate*problem-space
	(state <s> ^name mac)
	-->
	(<s> ^problem-space <p>)
	(<p> ^name missionaries-and-cannibals
		  ^default-state-copy yes
		  ^two-level-attributes right-bank left-bank)}

###
### MISSIONARIES-AND-CANNIBALS INITIAL-STATE
###

sp {mac*elaborate*initial-state
	(state <s> ^superstate nil
				  ^name mac)
	-->
	(<s> ^right-bank <r> 
		  ^left-bank <l>
		  ^desired <d>)
	(<r> ^missionaries 0
		  ^cannibals 0
		  ^boat 0
		  ^other-bank <l>)
	(<l> ^missionaries 3
		  ^cannibals 3
		  ^boat 1
  		  ^other-bank <r>)
   (<d> ^right-bank <dl>)
   (<dl> ^missionaries 3
         ^cannibals 3
         ^boat 1)
	}

###
### MISSIONARIES-AND-CANNIBALS OPERATORS: 
###

sp {mac*propose*operator*move-mac-boat1
	"Moves either a single missionary or a cannibal."
   (state <s> ^name mac
              ^<< right-bank left-bank >> <bank>)
   (<bank> ^{ << cannibals missionaries >> <type> } > 0
           ^boat 1)
   -->
   (<s> ^operator <o>)
   (<o> ^name move-mac-boat
        ^bank <bank>
        ^<type> 1
        ^boat 1
        ^types 1)}

sp {mac*propose*operator*move-mac-boat2
	"Moves two missionaries or two cannibals."
   (state <s> ^name mac
              ^ << right-bank left-bank >> <bank>)
   (<bank> ^{ << cannibals missionaries >> <type> } > 1
           ^boat 1)
   -->
   (<s> ^operator <o>)
   (<o> ^name move-mac-boat
        ^bank <bank>
        ^<type> 2
        ^boat 1
        ^types 1)}

sp {mac*propose*operator*move-mac-boat11
   (state <s> ^name mac
              ^ << right-bank left-bank >> <bank>)
   (<bank> ^missionaries > 0
           ^cannibals > 0
           ^boat 1)
   -->
   (<s> ^operator <o>)
   (<o> ^name move-mac-boat
        ^bank <bank>
        ^missionaries 1
        ^cannibals 1
        ^boat 1
        ^types 2)}

###
### MOVE OPERATOR IMPLEMENTATION
###

sp {apply*move-mac-boat
   (state <s> ^operator <o>)
   (<o> ^name move-mac-boat
        ^{ << missionaries cannibals boat >> <type> } <num>
        ^bank <bank>
		  ^types <types>)
   (<bank> ^<type> <bank-num> 
           ^other-bank <obank>)
   (<obank> ^<type> <obank-num>)
   -->
   (<bank> ^<type> <bank-num> -
                   (- <bank-num> <num>))
   (<obank> ^<type> <obank-num> -
                    (+ <obank-num> <num>))}

###
### MOVE-MAC-BOAT MONITOR OPERATOR AND STATE
###

sp {monitor*move-mac-boat
   (state <s> ^operator <o>)
   (<o> ^name move-mac-boat
        ^{ << cannibals missionaries >>  <type> } <number>)
   -->
   (write (crlf) | Move | <number> | | <type>)}

sp {monitor*state*left
   (state <s> ^name mac
              ^left-bank <l>
              ^right-bank <r>)
   (<l> ^missionaries <ml>
        ^cannibals <cl>
        ^boat 1)
   (<r> ^missionaries <mr>
        ^cannibals <cr>
        ^boat 0)
   -->
   (write (crlf) | M: | <ml> |, C: | <cl> | B ~~~   | 
                 | M: | <mr> |, C: | <cr> |  |)}

sp {monitor*state*right
   (state <s> ^name mac
              ^left-bank <l>
              ^right-bank <r>)
   (<l> ^missionaries <ml>
        ^cannibals <cl>
        ^boat 0)
   (<r> ^missionaries <mr>
        ^cannibals <cr>
        ^boat 1)
   -->
   (write (crlf) | M: | <ml> |, C: | <cl> |   ~~~ B | 
                 | M: | <mr> |, C: | <cr> |  |)}

###
### STATE SUCCESS/GOAL DETECTION
###

sp {mac*detect*state*success
   (state <s> ^desired <d>
              ^<bank> <ls>)
   (<ls> ^missionaries <m>
         ^cannibals <c>)
   (<d> ^{ << right-bank left-bank >> <bank> } <dls>)
   (<dls> ^missionaries <m>
          ^cannibals <c>)
   -->
   (<s> ^success <d>)
   (write (crlf) |Success!|)}

###
### STATE FAILURE DETECTION
###

sp {mac*evaluate*state*failure*more*cannibals
   (state <s> ^desired <d>
              ^<< right-bank left-bank >> <bank>)
   (<bank> ^missionaries { <n> > 0 }
           ^cannibals > <n>)
   -->
	(write (crlf) |Failure!|)
   (<s> ^failure <d>)}

sp {mac*evaluate*state*failure*state-no-change
    (state <s> ^desired <d>
               ^problem-space.name missionaries-and-cannibals)
    (state <ss> ^superstate <s>
                ^attribute state
                ^quiescence t
                ^impasse no-change)
-->
	(write (crlf) |######## STATE NO-CHANGE Failure! #########|)
    (<s> ^failure <d>)}

###
### DUPLICATE STATE DETECTION
###

sp {mac*evaluate*state*failure*duplicate
	(state <s1> ^desired <d>
					^right-bank <rb>
					^left-bank <lb>)
	(<rb> ^missionaries <rbm> ^cannibals <rbc> ^boat <rbb>)
	(<lb> ^missionaries <lbm> ^cannibals <lbc> ^boat <lbb>)
	(state { <> <s1> <s2> } 
			 ^right-bank <rb2>
			 ^left-bank <lb2>
			 ^tried-tied-operator)
	(<rb2> ^missionaries <rbm> ^cannibals <rbc> ^boat <rbb>)
	(<lb2> ^missionaries <lbm> ^cannibals <lbc> ^boat <lbb>)
  -(state <s3> ^superstate <s2>)
	-->
   (write (crlf) |Duplicate State Detected.|)
	(<s2> ^failure <d>)}

###
### SEARCH CONTROL
###  Commented out because not required with look-ahead

#sp {mac*apply*move-mac-boat*record*last-operator*types*1
#   (state <s> ^name mac
#              ^operator <o>)
#   (<o> ^name move-mac-boat
#        ^bank <bank>
#        ^{ << missionaries cannibals >> <type> } <n>
#        ^types 1)
#   -->
#   (<s> ^last-operator <o1>)
#   (<o1> ^types 1
#         ^bank <bank>
#         ^type <type>
#         ^number <n>)}

#sp {mac*apply*move-mac-boat*record*last-operator*types*2
#   (state <s> ^name mac
#              ^operator <o>)
#   (<o> ^name move-mac-boat
#        ^boat <bank>
#        ^types 2)
#   -->
#   (<s> ^last-operator <o1>)
#   (<o1> ^types 2
#         ^bank <bank>)}

#sp {mac*apply*move-mac-boat*remove*old*last-operator
#   (state <s> ^name mac
#              ^operator <o>
#              ^<lr-bank>.other-bank <o-bank>
#              ^last-operator <lo>)
#   (<lo> ^bank <obank>)
#   -->
#   (<s> ^last-operator <lo> -)}

### If not failure, avoid last operator

#sp {mac*select*operator*avoid*inverse*not*failure*1
#   (state <s> ^name mac
#              ^operator <o> +
#             -^failure <d>
#              ^last-operator <lo>)
#   (<o> ^types 1
#        ^<type> <number>)
#   (<lo> ^types 1
#         ^type <type>
#         ^number <number>)
#   -->
#   (<s> ^operator <o> -)}

#sp {mac*select*operator*avoid*inverse*not*failure*2
#   (state <s> ^name mac
#              ^operator <o> +
#             -^failure <d>
#              ^last-operator.types 2)
#   (<o> ^types 2)
#   -->
#	(<s> ^operator <o> -)}




#######


sp {monitor*move-mac-boat*evaluation
   (state <s> ^operator <o>)
	(<o> ^name evaluate-operator
		  ^operator <to>)
   (<to> ^name move-mac-boat
        ^{ << cannibals missionaries >>  <type> } <number>)
   -->
   (write (crlf) | Evaluate move | <number> | | <type>)}
