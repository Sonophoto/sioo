
###
### FILE          : tower-of-hanoi8.soar
###

###
### ABSTRACT. This file provides a Soar system to solve the Tower 
### of Hanoi problems. This puzzle "involves three vertical pegs or 
### posts and a number of doughnut-like disks of graduated sizes that
### fit  on the pegs. At the outset, all the disks are arranged pyrami-
### dally on one of the pegs, say A, with the largest disk on the bottom. 
### The task is to move all of the disks to another peg, C, say, under 
### the constraints that (1) only one disk may be moved at a time, and 
### (2) a disk may never be placed on top of another smaller than itself. 
### Any number of disks may be used; the minimum number of moves for
### a solution is (2**n - 1), where n is the number of disks" (Simon, 
### 1975/1979, pp. 230-231).
###

### This version uses search control rules to solve the TOH in the
### minimum number of moves.
### The search control is as follows:
### Always alternate between moving the smallest disk and
### the other exposed disk that can move.  
###  Move the exposed disk to the one place it can move (the other disk
###  that is bigger than it or an empty peg).  
###  Move the smallest disk to the peg it was not at last.
###   This requires remembering the last peg the smallest disk was on,
###    and initializing this to the appropriate peg (the destination peg
###    if there is an even number of disks, and the other peg if there is
###    an odd number of disks).


### These declaration help Soar reorder the conditions of the rules
multi-attributes operator 2
multi-attributes disk 7
multi-attributes peg 4
multi-attributes holds 10
#multi-attributes upper-disk 
multi-attributes clear 3

learn -off

###
### TOWER-OF-HANOI:
### INITIAL-STATE AND DESIRED-STATE
###

sp {tower-of-hanoi*propose*state*initial-and-desired-states
    "A 3-Disk Tower of Hanoi Problem." 
    (state <s> ^superstate nil)
    -->
    (<s> ^peg a b c
         ^holds <h1> <h2> <h3> <h4> <h5> <h6> <h7> <h8> <h9> <h10> <h11>
         ^last-disk1-peg b
         ^last-disk-moved 2
         ^clear b c)
    (<h1> ^disk 1 ^above 2 ^on a)     
    (<h2> ^disk 2 ^above 3 ^on a)
    (<h3> ^disk 3 ^above 4 ^on a)
    (<h4> ^disk 4 ^above 5 ^on a)
    (<h5> ^disk 5 ^above 6 ^on a)
    (<h6> ^disk 6 ^above 7 ^on a)
    (<h7> ^disk 7 ^above 8 ^on a)
    (<h8> ^disk 8 ^above 9 ^on a)
    (<h9> ^disk 9 ^above 10 ^on a)
    (<h10> ^disk 10 ^above 11 ^on a)
    (<h11> ^disk 11 ^above none ^on a)}

###
### PROPOSE OPERATORS TO MOVE DISKS
###

sp {tower-of-hanoi*propose*move-disk1
    (state <s> ^holds <h> 
               ^peg { <> <last-peg> <> <source-peg> <target-peg> }
               ^last-disk1-peg <last-peg>
               ^last-disk-moved <> 1) 	 
    (<h> ^disk 1
         ^on <source-peg>)
    -->
    (<s> ^operator <o>)
    (<o> ^name move-disk
         ^disk 1
         ^from <source-peg> 
         ^to <target-peg>)}

sp {tower-of-hanoi*propose*move-disk*disk-to-move*onto2
    "Target peg is clear."
    (state <s> ^upper-disk <m-disk> 
               ^clear <target-peg>
               ^holds <h>
               ^last-disk-moved 1)	 
     (<h> ^disk { <m-disk> <> 1 }
          ^on <source-peg>)
    -->
    (<s> ^operator <o>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>)}

sp {tower-of-hanoi*propose*move-disk*disk-to-move*above2
    "Upper disk on the target peg is larger."
    (state <s> ^upper-disk <m-disk> { > <m-disk> <o-disk> }
               ^holds <h> { <> <h> <i> }
               ^last-disk-moved 1) 	 
    (<h> ^disk { <> 1 <m-disk> }
         ^on <source-peg>)
    (<i> ^disk { > <m-disk> <o-disk> }
         ^on <target-peg>)
    -->
    (<s> ^operator <o>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>)}
###
### OPERATOR APPLICATION
###

sp {apply*move-disk*source-clear*target-clear
    (state <s> ^operator <o>
               ^clear <target-peg>
               ^holds <h>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>)
    (<h> ^disk <m-disk> 
         ^above none 
         ^on <source-peg>)
    -->
    (<h> ^on <target-peg> <source-peg> -)
    (<s> ^clear <target-peg> -)}

sp {apply*move-disk*source-not-clear*target-clear
    (state <s> ^operator <o>
               ^clear <target-peg> 
               ^holds <h>)    
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>)
    (<h> ^disk <m-disk> 
         ^above { <> none <adisk> } 
         ^on <source-peg>)
    -->
    (<s> ^clear <target-peg> -)
    (<h> ^above none <adisk> - 
         ^on <target-peg> <source-peg> - )}

sp {apply*move-disk*target-not-clear
    (state <s> ^operator <o>
               ^upper-disk <o-disk>
               ^holds <h> { <> <h> <i> })
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>)
    (<h> ^disk <m-disk> 
         ^above <adisk> 
         ^on <source-peg>)
    (<i> ^disk <o-disk>
         ^on <target-peg>)
    -->
    (<s> ^upper-disk <o-disk> -)
    (<h> ^above <o-disk> <adisk> - 
         ^on <target-peg> <source-peg> - )}

sp {apply*move-disk*add-clear-source
    (state <s> ^operator <o>
               ^holds <h>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg>)
    (<h> ^disk <m-disk> 
         ^above none 
         ^on <source-peg>)
    -->
    (<s> ^clear <source-peg>)}

sp {apply*move-disk*add*upper-disk*source
    (state <s> ^operator <o>
               ^holds <h>)    
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg>)
    (<h> ^disk <m-disk> 
         ^above { <> none <adisk> } 
         ^on <source-peg>)
    -->
    (<s> ^upper-disk <adisk>)}

### Maintain last-disk-moved

sp {apply*move-disk*record*last-disk-moved
    (state <s> ^operator <o>
               ^last-disk-moved { <> <m-disk> <old-disk> })
    (<o> ^name move-disk
         ^disk <m-disk>)
    -->
    (<s> ^last-disk-moved <m-disk>
         ^last-disk-moved <old-disk> -)}

### Maintain last peg disk 1 was moved to

sp {apply*move-disk*record*last-disk1-peg
    (state <s> ^operator <o>
               ^last-disk1-peg { <> <peg> <old-peg> })
    (<o> ^name move-disk
         ^disk 1
         ^from <peg>)
    -->
    (<s> ^last-disk1-peg <peg>
         ^last-disk1-peg <old-peg> -)}

###
### TOWER-OF-HANOI GOAL-TEST
###

sp {tower-of-hanoi*desired-of-disk*satisfied
    (state <s> ^holds <h1> <h2> <h3> <h4> <h5> <h6> <h7> <h8> <h9> <h10> <h11>)
    (<h1> ^disk 1 ^on c)     
    (<h2> ^disk 2 ^on c)
    (<h3> ^disk 3 ^on c)
    (<h4> ^disk 4 ^on c)
    (<h5> ^disk 5 ^on c)
    (<h6> ^disk 6 ^on c)
    (<h7> ^disk 7 ^on c)
    (<h8> ^disk 8 ^on c)
    (<h9> ^disk 9 ^on c)
    (<h10> ^disk 10 ^on c)
    (<h11> ^disk 11 ^on c)
    -->
    (write (crlf) |Success!|)
    (halt)}

###
### TOWER-OF-HANOI MONITOR
###
    
sp {tower-of-hanoi*monitor*operator-execution*move-disk
    (state <s> ^operator <o>)
   (<o> ^name move-disk
         ^disk <size>
         ^to <to-name>)
    -->
    (write (crlf) 
           | Move Disk:| <size>
           | to peg | <to-name>)}

excise tower-of-hanoi*monitor*operator-execution*move-disk
### eof of tower-of-hanoi.soar

