#
# Makefile.in for Soar 8.4 Tcl Shell
#
# This makefile template is in two sections.  The first specifies 
# a set of variables whose values are defined by the configure 
# script.  The values found by that script are substituted in the 
# placeholders which are indicated by the @...@ sequences (e.g., 
# @CC@ for the C compiler).  This template file is used to 
# generate "Makefile" after performing the indicated substitutions.
# [If you are trying to compile this on a non-Unix system, then you
# can make the relevant substitutions without using the configure 
# program.]  The configure script is generated by the GNU autoconf 
# utility.
#
# The second part of this makefile defines the rules for building
# the Soar 8.4 Tcl Shell.
#
#-----------------------------------------------------------------
#
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#
#=================================================================
#
# VARIABLES SET BY CONFIGURE
#
# This section of switches is defined by substitution from the
# configure script.  If you are building Soar on a non-Unix
# platform, then substitute the desired switch settings for the
# @...@ placeholders.
#

AR =         ar
ARFLAGS =    r
RANLIB  =    ranlib

# The directory where we should install the actual soar*.so or build
# executables

prefix =		@prefix@
exec_prefix =		@exec_prefix@
LIB_INSTALL_DIR =	@libdir@
BIN_INSTALL_DIR =	@bindir@

# LIB_RUNTIME_DIR is used in the definition of TCL_LD_SEARCH_FLAGS
LIB_RUNTIME_DIR =	@TCL_EXEC_PREFIX@/lib
TCL_LD_SEARCH_FLAGS =	@TCL_LD_SEARCH_FLAGS@

# The directory where we should install the Soar library scripts
SOAR_LIBRARY =		$(LIB_INSTALL_DIR)/soar@SOAR_VERSION@

# Set this to your favorite C Compiler that understands ANSI.
#
# CC = gcc
CC =			@CC@
RANLIB =		@RANLIB@

# Directories for installation
SRC_DIR =		@srcdir@
TOP_DIR =		@srcdir@/..

# The location of the Soar kernel library, libsoarkernel.a

KERNEL_DIR =		@KERNEL_DIR@
KERNEL_LIB_SPEC =	-L$(KERNEL_DIR) -lsoarkernel
KERNEL_INCLUDE_DIR =	@KERNEL_INCLUDE_DIR@

TCL_LIB_SPEC =		@TCL_LIB_SPEC@
TCL_INCLUDE_DIR =	@TCL_INCLUDE_DIR@

TK_LIB_SPEC =		@TK_LIB_SPEC@
TK_LIBS =		@TK_LIBS@


INSTALL =		@INSTALL@
INSTALL_PROGRAM =	@INSTALL_PROGRAM@
INSTALL_DATA =		@INSTALL_DATA@

# The X11 include directory for tk.h
X11_INCLUDES =		@TK_XINCLUDES@

# The X11 library for tk
X11_LIB_SWITCHES =	@TK_XLIBSW@


### to build a soartk static executable, you _may_ need the following:
#TK_LIB_SPEC =	         -L/usr/tcl/lib -ltk80
#X11_INCLUDES =           -I/usr/X11R6/include
#X11_LIB_SWITCHES =       -L/usr/X11R6/lib -lX11 -lXt


# Set these to be whatever flags you want to pass to your compiler.
# If the flags define ANSI C behavior, be sure to set them.
#

ANSI_FLAGS =		@ANSI_FLAGS@
SHLIB_CFLAGS =		@TCL_SHLIB_CFLAGS@
DEFS =			-DUSE_TCL -DTCL_MAN_DIR=\"@TCL_DOC_DIR@\" \
                        -DSOAR_LIBRARY=\"$(SOAR_LIBRARY)\" @DEFS@
INCLUDE_FLAGS =		-I$(KERNEL_INCLUDE_DIR) -I$(TCL_INCLUDE_DIR) \
                        $(X11_INCLUDES)
CFLAGS =		@CFLAGS@ -g $(ANSI_FLAGS) $(SHLIB_CFLAGS) $(DEFS) \
                        $(INCLUDE_FLAGS)

# The symbols below provide support for dynamic loading and shared
# libraries.  See configure.in for a description of what the
# symbols mean.  The values of the symbols are normally set by the
# configure script.  You shouldn't normally need to modify any of
# these definitions by hand.

# Typically, math libs are defined in the TCL_LIB_SPEC.  If not, they may
# be defined here, and the following line might need to be uncommented
#MATH_LIBS =		@MATH_LIBS@

LIBS =			$(KERNEL_LIB_SPEC) $(TCL_LIB_SPEC) @TCL_DL_LIBS@ \
                        @LIBS@ $(X11_LIB_SWITCHES) $(MATH_LIBS) -lc
LIBSTK =		$(TK_LIB_SPEC) $(LIBS) $(TK_LIBS)
SHLIB_LD =		@TCL_SHLIB_LD@
SHLIB_LD_LIBS =		@TCL_SHLIB_LD_LIBS@
SHLIB_SUFFIX =		@TCL_SHLIB_SUFFIX@


# The shared library target
SHLIB_TARGET=		libsoar@SOAR_VERSION@$(SHLIB_SUFFIX)


# The objects
OBJS =	soarAgent.o\
	soarArgv.o\
	soarCommands.o\
	soarCommandUtils.o\
	soarInterp.o\
	soarLog.o\
	soarMain.o\
	soarVars.o\
	legacy.o



all:		@SOAR_TARGET@
dynamic:	$(SHLIB_TARGET)
static:		soar
statictk:	soartk
lib:		libsoartk.a

$(SHLIB_TARGET): $(OBJS)
	$(SHLIB_LD) -o $(SHLIB_TARGET) $(OBJS) $(KERNEL_LIB_SPEC) $(SHLIB_LD_LIBS) $(TCL_LIB_SPEC)

soar: tclAppInit.c $(OBJS)
	$(CC) $(CFLAGS) -o soar@SOAR_VERSION@ tclAppInit.c $(OBJS) $(LIBS) \
              $(TCL_LD_SEARCH_FLAGS)

soartk: tkAppInit.c $(OBJS)
	$(CC) $(CFLAGS) -o soartk@SOAR_VERSION@ tkAppInit.c $(OBJS) $(LIBSTK) \
              $(TCL_LD_SEARCH_FLAGS)

libsoartk.a: $(OBJS)
	$(AR) $(ARFLAGS) libsoartk.a $(OBJS)
	$(RANLIB) libsoartk.a

##############################################################################


legacy.o: $(KERNEL_DIR)/soarkernel.h $(KERNEL_DIR)/soarBuildOptions.h
legacy.o: $(KERNEL_DIR)/sysdep.h $(KERNEL_DIR)/callback.h $(KERNEL_DIR)/soarapi.h
legacy.o: $(KERNEL_DIR)/soar_core_api.h $(KERNEL_DIR)/soarapi_datatypes.h
legacy.o: $(KERNEL_DIR)/soar_ecore_api.h $(KERNEL_DIR)/soar_ecore_utils.h
legacy.o: $(KERNEL_DIR)/soar_core_utils.h
soarAgent.o: soar.h $(KERNEL_DIR)/soarkernel.h $(KERNEL_DIR)/soarBuildOptions.h
soarAgent.o: $(KERNEL_DIR)/sysdep.h $(KERNEL_DIR)/callback.h $(KERNEL_DIR)/scheduler.h
soarAgent.o: soarCommands.h
soarArgv.o: soar.h $(KERNEL_DIR)/soarkernel.h $(KERNEL_DIR)/soarBuildOptions.h
soarArgv.o: $(KERNEL_DIR)/sysdep.h $(KERNEL_DIR)/callback.h
soarCommandUtils.o: soar.h $(KERNEL_DIR)/soarkernel.h
soarCommandUtils.o: $(KERNEL_DIR)/soarBuildOptions.h $(KERNEL_DIR)/sysdep.h
soarCommandUtils.o: $(KERNEL_DIR)/callback.h soarCommandUtils.h
soarCommandUtils.o: $(KERNEL_DIR)/soar_core_api.h $(KERNEL_DIR)/soarapi_datatypes.h
soarCommands.o: soar.h $(KERNEL_DIR)/soarkernel.h $(KERNEL_DIR)/soarBuildOptions.h
soarCommands.o: $(KERNEL_DIR)/sysdep.h $(KERNEL_DIR)/callback.h soarCommands.h
soarCommands.o: soarCommandUtils.h $(KERNEL_DIR)/soarapi.h
soarCommands.o: $(KERNEL_DIR)/soar_core_api.h $(KERNEL_DIR)/soarapi_datatypes.h
soarCommands.o: $(KERNEL_DIR)/soar_ecore_api.h $(KERNEL_DIR)/soar_ecore_utils.h
soarCommands.o: $(KERNEL_DIR)/soar_core_utils.h
soarInterp.o: soar.h $(KERNEL_DIR)/soarkernel.h $(KERNEL_DIR)/soarBuildOptions.h
soarInterp.o: $(KERNEL_DIR)/sysdep.h $(KERNEL_DIR)/callback.h soarCommandUtils.h
soarLog.o: soar.h $(KERNEL_DIR)/soarkernel.h $(KERNEL_DIR)/soarBuildOptions.h
soarLog.o: $(KERNEL_DIR)/sysdep.h $(KERNEL_DIR)/callback.h
soarMain.o: soar.h $(KERNEL_DIR)/soarkernel.h $(KERNEL_DIR)/soarBuildOptions.h
soarMain.o: $(KERNEL_DIR)/sysdep.h $(KERNEL_DIR)/callback.h soarCommandUtils.h
soarVars.o: soar.h $(KERNEL_DIR)/soarkernel.h $(KERNEL_DIR)/soarBuildOptions.h
soarVars.o: $(KERNEL_DIR)/sysdep.h $(KERNEL_DIR)/callback.h



install: all
	@if [ ! -d $(SOAR_LIBRARY) ] ; then \
                echo "Creating directory $(SOAR_LIBRARY)"; \
                mkdir $(SOAR_LIBRARY); \
                chmod 755 $(SOAR_LIBRARY); \
        fi;
	@for i in $(TOP_DIR)/library/*; \
	    do \
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(SOAR_LIBRARY); \
	    done;
	@if [ -f $(SHLIB_TARGET) ]; then \
		echo "Installing $(SHLIB_TARGET)"; \
		$(INSTALL_DATA) $(SHLIB_TARGET) $(LIB_INSTALL_DIR); \
	fi;
	@if [ -f soar ]; then \
		echo "Installing soar"; \
		$(INSTALL_PROGRAM) soar@SOAR_VERSION@ $(BIN_INSTALL_DIR); \
	fi;
	@if [ -f soartk ]; then \
		echo "Installing soartk"; \
		$(INSTALL_PROGRAM) soartk@SOAR_VERSION@ $(BIN_INSTALL_DIR); \
	fi;


clean:
	rm -f *.o $(SHLIB_TARGET) soar@SOAR_VERSION@ soartk@SOAR_VERSION@ *.a core *~ *.exp


distclean:	clean
	rm -f Makefile config.status config.cache

