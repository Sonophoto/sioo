dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run during Soar installation
dnl	to configure the system for the local environment.
dnl
dnl	This was shamelessly stolen and modified from the Tk 4.2 configure.in
dnl	file.
dnl     But then Randolph M. Jones got his hands on it and incorporated a
dnl     tcl/tk front end, and now this file contains very little from the
dnl     original Tk 4.2 file.

AC_INIT(soar.h)

SOAR_VERSION=8.5.2
SOAR_MAJOR_VERSION=8
SOAR_MINOR_VERSION=5
SOAR_PATCH_VERSION=2
VERSION=${SOAR_VERSION}

#--------------------------------------------------------------------
#       C compiler preferences. Soar requires a compiler that is
#	smart enough to understand function prototypes.
#--------------------------------------------------------------------

if test -z "${CFLAGS}"; then  CFLAGS="-O -w"fiAC_PROG_CC
AC_PROG_INSTALL
AC_PROG_RANLIB

#--------------------------------------------------------------------
#	Check for various typedefs and provide substitutes if
#	they don't exist.
#--------------------------------------------------------------------

AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h)

AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_MODE_T
AC_PID_T
AC_SIZE_T
AC_UID_T

AC_CHECK_FUNCS(gethostname gettimeofday getwd)

#--------------------------------------------------------------------
#	On a few very rare systems, all of the libm.a stuff is
#	already in libc.a.  Set compiler flags accordingly.
#	Also, Linux requires the "ieee" library for math to work
#	right (and it must appear before "-lm").
#--------------------------------------------------------------------

AC_CHECK_FUNC(sin, MATH_LIBS="", MATH_LIBS="-lm")
AC_CHECK_LIB(ieee, main, [MATH_LIBS="-lieee $MATH_LIBS"])


# ------------------------------------------------------------------
# The setting of ANSI_FLAGS is the only real kludge here.  Rumor has
# it that the GNU m4 macros has a ANSI test macro.  Until we find a
# cleaner way of determining how to turn on ANSI compilation, we'll
# try this hack.
# ------------------------------------------------------------------

ANSI_FLAGS=""
if test "$ac_cv_prog_gcc" = yes; then
	ANSI_FLAGS="-ansi -fpcc-struct-return"
else
# No gcc.  Test vendor and select native cc ANSI compilation option.
	if test "$host_vendor" = hp; then
		ANSI_FLAGS="-Aa"
		DEFS="$DEFS -D_INCLUDE_POSIX_SOURCE"
	fi
fi

#-------------------------
#       Find location of tclConfig.sh and libtcl
#-------------------------


AC_ARG_WITH(preferred-tcl-version, [  --with-preferred-tcl-version      the preferred version of tcl],
        TCL_VERSION=$withval, TCL_VERSION="ANY")

AC_ARG_WITH(tcl-lib-dir, [  --with-tcl-lib-dir      location of tclConfig.sh and libtcl],
        TCL_LIB_DIR=$withval, TCL_LIB_DIR="NONE")

if test "$TCL_LIB_DIR" = "NONE"; then
    dirs="../../lib /usr/lib /usr/local/lib /usr/tcl/lib"

    if test "$TCL_VERSION" != "ANY"; then
        AC_MSG_CHECKING("for preferred tcl lib: $TCL_VERSION")	
	for i in $dirs ; do
            if test -d $i/tcl$TCL_VERSION; then
	        AC_MSG_RESULT($i)
                TCL_LIB_DIR=$i
            break
            fi
        done
	if test "$TCL_LIB_DIR" = "NONE"; then
	    AC_MSG_RESULT( "not found" );
	    AC_MSG_WARN( "preferred tcl version not found. Building may fail" );
        fi
    fi

    if test "$TCL_LIB_DIR" = "NONE"; then
        AC_MSG_CHECKING("for any tcl lib")	
        for i in $dirs ; do
            if test -f $i/tclConfig.sh; then
                AC_MSG_RESULT($i)
                TCL_LIB_DIR=$i
                break
            fi
        done
    fi
fi

if test "$TCL_LIB_DIR" = "NONE"; then
    AC_MSG_ERROR(Cannot find directory containing tclConfig.sh.  It should be in the same directory as libtcl)
fi

#--------------------------------------------------------------------
#	Read in configuration information generated by Tcl for shared
#	libraries, and arrange for it to be substituted into our
#	Makefile.
#--------------------------------------------------------------------

file=${TCL_LIB_DIR}/tclConfig.sh
. $file

#-----------------------
#       Look for the tcl.h file
#-----------------------

AC_MSG_CHECKING("for location of tcl.h")

TCL_INCLUDE_DIR=$TCL_PREFIX/include

if test ! -f $TCL_INCLUDE_DIR/tcl.h; then
    AC_MSG_ERROR(The tcl.h file is not where we expected ($TCL_INCLUDE_DIR))
fi

AC_MSG_RESULT($TCL_INCLUDE_DIR)

#-----------------------
#       Look for the tcl documentation directories
#-----------------------

AC_MSG_CHECKING("for location of tcl documentation")

AC_ARG_WITH(tcl-doc-dir, [  --with-tcl-doc-dir      location of tcl man files],
        TCL_DOC_DIR=$withval, TCL_DOC_DIR=$TCL_PREFIX/man)

if test ! -f $TCL_DOC_DIR/mann/Tcl.n; then
    AC_MSG_WARN(Expected tcl documentation directory $TCL_DOC_DIR does not contain mann/Tcl.n file.)
fi

AC_MSG_RESULT($TCL_DOC_DIR)

#----------------------
#       Check whether the tcl version we are using includes shared libraries
#----------------------

AC_MSG_CHECKING("whether tcl uses shared libraries")

if test "x${TCL_SHLIB_SUFFIX}" = "x"; then
   have_shared_libs="no"
else
   have_shared_libs="yes"
fi

AC_MSG_RESULT($have_shared_libs)

#------------------------
#       Create dynamic loading search flags for soar, using tcl flags
#       as a template (copied from tk's configure.in)
#--------------------------
if test "x${TCL_LD_SEARCH_FLAGS}" != "x"; then
   TCL_LD_SEARCH_FLAGS=$TCL_LD_SEARCH_FLAGS':${LIB_RUNTIME_DIR}'
fi

#--------------------------------------------------------------------
#	See if dynamic loading is enabled.
#--------------------------------------------------------------------

AC_MSG_CHECKING("whether to build dynamically linked soar library")

AC_ARG_ENABLE(dynamic-soar, [  --disable-dynamic-soar  do not build a dynamically linkable soar library],
    [soar_dynamic=$enableval], [soar_dynamic=$have_shared_libs])

AC_MSG_RESULT($soar_dynamic)

#--------------------------------------------------------------------
#	See if we are building a statically linked soar.
#--------------------------------------------------------------------

AC_MSG_CHECKING("whether to build statically linked soar executable")

AC_ARG_ENABLE(static-soar, [  --disable-static-soar   do not build a statically linked soar executable],
    [soar_static=$enableval], [soar_static=yes])

AC_MSG_RESULT($soar_static)

#--------------------------------------------------------------------
#	See if we are building a statically linked soartk.
#--------------------------------------------------------------------

AC_MSG_CHECKING("whether to build statically linked soartk executable")

AC_ARG_ENABLE(static-soartk, [  --disable-static-soartk do not build a statically linked soartk executable],
    [soartk_static=$enableval], [soartk_static=yes])

AC_MSG_RESULT($soartk_static)

if test "$soar_dynamic" = "yes"; then
    SOAR_TARGET=dynamic
else
    SOAR_TARGET=""
fi

if test "$soar_static" = "yes"; then
    SOAR_TARGET="${SOAR_TARGET} static"
fi

if test "$soartk_static" = "yes"; then
    SOAR_TARGET="${SOAR_TARGET} statictk"
fi

#--------------------------------------------------------------------
#	See if we are allowing dynamic linking for static executables
#--------------------------------------------------------------------

AC_MSG_CHECKING("whether to allow dynamic linking in static soar executables")

AC_ARG_ENABLE(dynamic, [  --enable-dynamic        allow dynamic linking in static soar executables],
    [dynamic_linking=$enableval], [dynamic_linking=$have_shared_libs])

AC_MSG_RESULT($dynamic_linking)

if test "$dynamic_linking" = "no"; then
    TCL_SHLIB_CFLAGS="-static"
fi

#-------------------------
#       Find location of tkConfig.sh and libtk if necessary
#-------------------------

if test "$soartk_static" = "yes"; then



    AC_ARG_WITH(preferred-tk-version, [  --with-preferred-tk-version      the preferred version of tk],
        TK_VERSION=$withval, TK_VERSION="ANY")

    AC_ARG_WITH(tk-lib-dir, [  --with-tk-lib-dir       location of tkConfig.sh and libtk],
                TK_LIB_DIR=$withval, TK_LIB_DIR="NONE")



    if test "$TK_LIB_DIR" = "NONE"; then
        if test "$TK_VERSION" != "ANY"; then
            AC_MSG_CHECKING("for preferred tk lib: $TK_VERSION")	
   	    for i in $dirs ; do
                if test -d $i/tk$TK_VERSION; then
	            AC_MSG_RESULT($i)
                    TK_LIB_DIR=$i
                    break
                fi
            done
	    if test "$TK_LIB_DIR" = "NONE"; then
	        AC_MSG_RESULT( "not found" );
		AC_MSG_WARN( "preferred tk version not found. Building may fail" );
            fi
        fi

        if test "$TK_LIB_DIR" = "NONE"; then
            AC_MSG_CHECKING("for any tk lib")	

            for i in $dirs ; do
                if test -f $i/tkConfig.sh; then
                    AC_MSG_RESULT($i)
                    TK_LIB_DIR=$i
                    break
                fi
            done
        fi
    fi

    if test "$TK_LIB_DIR" = "NONE"; then
        AC_MSG_ERROR(Cannot find directory containing tkConfig.sh.  It should be in the same directory as libtk)
    fi

    # Read in configuration information for Tk
    file=${TK_LIB_DIR}/tkConfig.sh
    . $file

fi

#--------------------------------------------------------------------
#	See if there was a command-line option for where the kernel is.
#	If not, assume that it is in a sibling directory.
#--------------------------------------------------------------------

AC_MSG_CHECKING("for soar kernel library")

AC_ARG_WITH(kernel, [  --with-kernel=DIR       use Soar kernel library from DIR],
	KERNEL_DIR=$withval, KERNEL_DIR=`cd ../kernel; pwd`)

if test ! -d $KERNEL_DIR; then
	AC_MSG_ERROR(Soar kernel directory $KERNEL_DIR doesn't exist)
fi

if test ! -f $KERNEL_DIR/libsoarkernel.a; then
	AC_MSG_ERROR(There's no libsoarkernel.a in $KERNEL_DIR.  You must build the soar kernel first.)
fi

AC_MSG_RESULT($KERNEL_DIR)

#--------------------------------------------------------------------
#       If not specified, assume the kernel .h files are in the KERNEL_DIR
#--------------------------------------------------------------------

AC_MSG_CHECKING("for soar kernel include files")

AC_ARG_WITH(kernel-include, [  --with-kernel-include=DIR  use Soar kernel include files from DIR],
	KERNEL_INCLUDE_DIR=$withval, KERNEL_INCLUDE_DIR=$KERNEL_DIR)

if test ! -d $KERNEL_INCLUDE_DIR; then
	AC_MSG_ERROR(Soar kernel include directory $KERNEL_INCLUDE_DIR doesn't exist)
fi

if test ! -f $KERNEL_INCLUDE_DIR/soarkernel.h; then
	AC_MSG_ERROR(Cannot locate the kernel .h files in $KERNEL_INCLUDE_DIR)
fi

AC_MSG_RESULT($KERNEL_INCLUDE_DIR)

#--------------------------------------------------------------------
#	Build the Makefile
#--------------------------------------------------------------------

AC_SUBST(KERNEL_DIR)
AC_SUBST(KERNEL_INCLUDE_DIR)
AC_SUBST(MATH_LIBS)
AC_SUBST(SOAR_TARGET)
AC_SUBST(SOAR_VERSION)
AC_SUBST(TCL_EXEC_PREFIX)
AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TCL_SHLIB_CFLAGS)
AC_SUBST(TCL_LD_SEARCH_FLAGS)
AC_SUBST(TCL_DL_LIBS)
AC_SUBST(TCL_SHLIB_LD)
AC_SUBST(TCL_SHLIB_LD_LIBS)
AC_SUBST(TCL_SHLIB_SUFFIX)
AC_SUBST(TCL_INCLUDE_DIR)
AC_SUBST(TCL_DOC_DIR)
AC_SUBST(TK_LIB_SPEC)
AC_SUBST(TK_LIBS)
AC_SUBST(ANSI_FLAGS)
AC_SUBST(TK_XINCLUDES)
AC_SUBST(TK_XLIBSW)

AC_OUTPUT(Makefile)
