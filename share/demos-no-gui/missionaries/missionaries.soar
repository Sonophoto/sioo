###
### FILE          : missionaries.soar
###

###
### AUTHOR(2)     : Sayan Bhattacharyya [ Soar 7.0.3 ]
### AUTHOR(1)     : Aladin.Akyurek      [ Soar 5.1.1 ]
###

###
### CREATED(3)    : Aug 22, 96
### CREATED(2)    : May 10, 93
### CREATED(1)    : May 21, 91
###

###
### ABSTRACT. This file provides a Soar system to solve 
### the missionaries and cannibals problem. Three missionaries and 
### three cannibals come to a river. There is a a boat on their side of 
### the river that can be used by either one or two persons at a time. 
### This boat must be used to cross the river in such a way that cannibals 
### never outnumber missionaries on either side of the river.
###

###
### TOP GOAL: 
### MISSIONARIES-AND-CANNIBALS
###

package require Soar
source $default

sp {top-goal*elaborate*goal*missionaries-and-cannibals
    (state <g> ^superstate nil)
    -->
    (<g> ^name missionaries-and-cannibals 
         ^desired <d>)}

###
### TOP GOAL PROBLEM SPACE: 
### MISSIONARIES-AND-CANNIBALS/MAC
###

sp {mac*propose*space*mac
    (state <g> ^name missionaries-and-cannibals 
              ^superstate nil)
    -->
    (<g> ^problem-space <p>)
    (<p> ^name missionaries-and-cannibals
         ^default-state-copy yes
         ^one-level-attributes boat + &,
                               location + &
         ^two-level-attributes mlist + &,
                               clist + &,
                               next + &, 
                               holds + & )}

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE:
### INITIAL-STATE
###

sp {mac*propose*state*initial-state
    (state <g> ^problem-space <p> ^superstate nil)
    (<p> ^name missionaries-and-cannibals)
    -->
    
    (<g> ^mlist <m*> + &, <x*> + & 
         ^clist <c*> + &, <y*> + &
         ^boat <b> ^location <leftbank> + &, <rightbank> + &
         ^holds <h1> + &, <h2> + &, <h3> + &, 
                <h4> + &, <h5> + & )
    (<h1> ^mlist <m*> ^location <leftbank>)
    (<h2> ^clist <c*> ^location <leftbank>)
    (<h3> ^mlist <x*> ^location <rightbank>)
    (<h4> ^clist <y*> ^location <rightbank>)
    (<h5> ^boat <b> ^location <leftbank>)
    (<m*> ^next <i1>)
    (<i1> ^value missionary ^next <i2>)
    (<i2> ^value missionary ^next <i3>)
    (<i3> ^value missionary ^next none)
    (<c*> ^next <j1>)
    (<j1> ^value cannibal ^next <j2>)
    (<j2> ^value cannibal ^next <j3>)
    (<j3> ^value cannibal ^next none)
    (<x*> ^next none)
    (<y*> ^next none)
    (<leftbank> ^name left ^opposite-of <rightbank>)
    (<rightbank> ^name right ^opposite-of <leftbank>)}

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE OPERATORS: 
### MOVE1, MOVE2, AND MOVE11
###

sp {mac*propose*operator*move1
    "Moves either a missionary or a cannibal."
    (state <g> ^problem-space <p> )
    (<p> ^name missionaries-and-cannibals)
    (<g> ^holds <h1> <h2>)
    (<h1> ^<x> <x*> ^location <f>)
    (<h2> ^boat <b> ^location <f>)
    (<x*> ^next <i> <> none)
    (<f> ^opposite-of <t>)      
    -->
    (<g> ^operator <o>)
    (<o> ^name move1
         ^done? no
         ^inst <i>
         ^from <f>
         ^to <t>)}

sp {mac*propose*operator*move2
    "Moves either two missionaries or two cannibals."
    (state <g> ^problem-space <p> )
    (<p> ^name missionaries-and-cannibals)
    (<g> ^holds <h1> <h2>)
    (<h1> ^<x> <x*> ^location <f>)
    (<h2> ^boat <b> ^location <f>)
    (<x*> ^next <i1>)
    (<i1> ^next <i2> <> none)
    (<f> ^opposite-of <t>)
    -->
    (<g> ^operator <o>)
    (<o> ^name move2
         ^done? no
         ^inst <i1>
         ^with <i2>
         ^from <f>
         ^to <t>)}

sp {mac*propose*operator*move11
    "Moves one missionary and one cannibal."
    (state <g> ^problem-space <p> )
    (<p> ^name missionaries-and-cannibals)
    (<g> ^holds <h1> <h2> <h3>)
    (<h1> ^mlist <m*> ^location <f>)
    (<h2> ^clist <c*> ^location <f>)
    (<h3> ^boat <b> ^location <f>)
    (<m*> ^next <i> <> none)
    (<c*> ^next <j> <> none)
    (<f> ^opposite-of <t>)
    -->
    (<g> ^operator <o>)
    (<o> ^name move11
         ^done? no
         ^inst <i>
         ^with <j>
         ^from <f>
         ^to <t>)}

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE: 
### OPERATOR IMPLEMENTATION
###

sp {implement*move1
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> )
    (<o> ^name move1
         ^done? no 
         ^inst <i1> 
         ^from <f> 
         ^to <t>)
    (<p> ^name missionaries-and-cannibals)
    (<g> ^holds <h1> <h2> <h3>)
    (<h1> ^<list> <x*> ^location <f>)
    (<h2> ^<list> <y*> ^location <t>)
    (<h3> ^boat <b> ^location <f>)
    (<x*> ^next <i1>)
    (<y*> ^next <n>)
    (<i1> ^value <v> ^next <i2>)
    (<f> ^opposite-of <t>)
    -->
    (<x*> ^next <i2> <i1> - )
    (<y*> ^next <n1> <n> - )
    (<n1> ^value <v> ^next <n>)
    (<h3> ^location <t> <f> - )
    (<o> ^done? yes no - )} 

sp {implement*move2
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> )
    (<o> ^name move2 
         ^done? no
         ^inst <i1> 
         ^with <i2> 
         ^from <f> 
         ^to <t>)
    (<p> ^name missionaries-and-cannibals)
    (<g> ^holds <h1> <h2> <h3>)
    (<h1> ^<list> <x*> ^location <f>)
    (<h2> ^<list> <y*> ^location <t>)
    (<h3> ^boat <b> ^location <f>)
    (<x*> ^next <i1>)
    (<y*> ^next <n>) 
    (<i1> ^value <v> ^next <i2>)
    (<i2> ^value <v> ^next <i3>)
    (<f> ^opposite-of <t>)
    -->
    (<x*> ^next <i3> <i1> - )
    (<y*> ^next <n1> <n> - )
    (<n1> ^value <v> ^next <n2>)
    (<n2> ^value <v> ^next <n>)
    (<h3> ^location <t> <f> - )
    (<o> ^done? yes no - )} 

sp {implement*move11
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> )
    (<o> ^name move11 ^inst <i1> ^with <j1> ^from <f> ^to <t>)
    (<p> ^name missionaries-and-cannibals)
    (<g> ^holds <h1> <h2> <h3> <h4> <h5>)
    (<h1> ^mlist <m1> ^location <f>)
    (<h2> ^clist <c1> ^location <f>)
    (<h3> ^mlist <m2> ^location <t>)
    (<h4> ^clist <c2> ^location <t>)
    (<h5> ^boat <b> ^location <f>)
    (<m1> ^next <i1>)
    (<c1> ^next <j1>)
    (<m2> ^next <n>)
    (<c2> ^next <k>)
    (<i1> ^value <m> ^next <i2>)
    (<j1> ^value <c> ^next <j2>)
    (<f> ^opposite-of <t>)
    -->
    (<m1> ^next <i2> <i1> - ) 
    (<c1> ^next <j2> <j1> - ) 
    (<m2> ^next <n1> <n> - )
    (<c2> ^next <k1> <k> - )
    (<n1> ^value <m> ^next <n>)
    (<k1> ^value <c> ^next <k>)
    (<h5> ^location <t> <f> - )
    (<o> ^done? yes no - )}

sp {mac*save*operator*applied*a
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> )
    (<o> ^name <name>)
    (<p> ^name missionaries-and-cannibals)
    (<g> -^applied)
    -->
    (<g> ^applied <o>)}
	    
sp {mac*save*operator*applied*b
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> )
    (<o> ^name <name>)
    (<p> ^name missionaries-and-cannibals)
    (<g> ^applied <q> <> <o>)
    -->
    (<g> ^applied <o> <q> - )}

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE: 
### OPERATOR TERMINATION
###

sp {terminate*move1
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> )
    (<o> ^name move1 ^done? yes)
    (<p> ^name missionaries-and-cannibals)
    -->
    (<g> ^operator <o> @ )}

sp {terminate*move2
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> )
    (<o> ^name move2 ^done? yes)
    (<p> ^name missionaries-and-cannibals)
    -->
    (<g> ^operator <o> @ )}

sp {terminate*move11
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> )
    (<o> ^name move11 ^done? yes)
    (<p> ^name missionaries-and-cannibals)
    -->
    (<g> ^operator <o> @ )}

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE: 
### STATE EVALUATION
###

###
### EVALUATION: STATE FAILURE
###

sp {mac*evaluate*state*failure*one-against-more
    (state <g> ^desired <d>)
    (state <g> ^problem-space <p> )
    (<p> ^name missionaries-and-cannibals)
    (<g> ^holds <h1> <h2>)
    (<h1> ^mlist <m*> ^location <loc>)
    (<h2> ^clist <c*> ^location <loc>)
    (<m*> ^next <i1>)
    (<i1> ^value missionary ^next none)
    (<c*> ^next <j1>)
    (<j1> ^value cannibal ^next <j2>)
    (<j2> ^value cannibal ^next <j3>)
    -->
    (<g> ^failure <d>)}

sp {mac*evaluate*state*failure*two-against-more
    (state <g> ^desired <d>)
    (state <g> ^problem-space <p> )
    (<p> ^name missionaries-and-cannibals)
    (<g> ^holds <h1> <h2>)
    (<h1> ^mlist <m*> ^location <loc>)
    (<h2> ^clist <c*> ^location <loc>)
    (<m*> ^next <i1>)
    (<i1> ^value missionary ^next <i2>)
    (<i2> ^value missionary ^next none)
    (<c*> ^next <j1>)
    (<j1> ^value cannibal ^next <j2>)
    (<j2> ^value cannibal ^next <j3>)
    (<j3> ^value cannibal ^next none)
    -->
    (<g> ^failure <d>)}

sp {mac*evaluate*state*failure*detect-state-duplicate
    (state <g2> ^problem-space <p2>
               ^superstate <g1>)
    (<p2> ^name <name>)
    (<g2> ^holds <a1> <a2>)
    (<a1> ^mlist <m*> ^location <location*>)
    (<a2> ^clist <c*> ^location <location*>)
    (<m*> ^next none)
    (<c*> ^next none)
    (<location*> ^name right)
    (state <g1> ^problem-space <p1> 
               ^superstate <g>)
    (<p1> ^name <> <name>)
    (state <g> ^problem-space <p> 
              ^desired <d>)
    (<p> ^name <name>)
    (<g> ^holds <b1> <b2> ^applied <q>)
    (<b1> ^mlist <m> ^location <location>)
    (<b2> ^clist <c> ^location <location>)
    (<m> ^next none)
    (<c> ^next none)
    (<location> ^name right)
    -->
    (<g> ^failure <d>)}

 ## Comment out the following excise statement if you want
 ## the problem solved without long detours under conditions
 ## of (user-select random). That is, without this production
 ## excised and user-select set to random mac.s will sometimes return 
 ## to the initial state of the problem at some point, a state
 ## of affairs that does not thwart finding the right string 
 ## of steps that solves the problem.
  #

# excise mac*evaluate*state*failure*detect-state-duplicate

###
### EVALUATION: STATE SUCCESS/GOAL TEST
###

 ## This also defines implicitly the desired state
 ## of the problem.
  #

sp {mac*detect*state*success
    (state <g> ^desired <d>)
    (state <g> ^problem-space <p>)
    (<p> ^name missionaries-and-cannibals)
    (<g> ^holds <h1> <h2>)
    (<h1> ^mlist <m*> ^location <loc>)
    (<h2> ^clist <c*> ^location <loc>)
    (<m*> ^next <i1>)
    (<i1> ^value missionary ^next <i2>)
    (<i2> ^value missionary ^next <i3>)
    (<i3> ^value missionary ^next none)
    (<c*> ^next <j1>)
    (<j1> ^value cannibal ^next <j2>)
    (<j2> ^value cannibal ^next <j3>)
    (<j3> ^value cannibal ^next none)
    (<loc> ^name right)
    -->
    (<g> ^success <d>)}

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE: 
### SEARCH CONTROL
###

 ## Create "reject preference" for inverse operator.
 ## Definition of Inverse Operator:
 ## apply(a[i],s[i]) = s[j],
 ## apply(a[j],S[j]) = s[i],
 ## where a[i] and a[j] are different instantiations
 ## of the operator A, and s stands for state. The
 ## instantiation a[j] is the inverse of a[i].
 ## Example: a[i] = walk(x,y), a[j] = walk(y,x).  
  #

sp {mac*operator*inverse*move1*reject
    "Reject inverse operator."
    (state <g> ^operator <o> + )
    (state <g> ^problem-space <p> )
    (<o> ^name move1 ^inst <i> ^from <loc> ^to <oloc>)
    (<p> ^name missionaries-and-cannibals)
    (<g> ^applied <q>)
    (<q> ^name move1 ^inst <j> ^from <oloc> ^to <loc>)
    (<i> ^value <value>)
    (<j> ^value <value>)
    -->
    (<g> ^operator <o> - )}

sp {mac*operator*inverse*move2*reject
    "Reject inverse operator."
    (state <g> ^operator <o> + )
    (state <g> ^problem-space <p> )
    (<o> ^name move2 ^inst <i1> ^with <i2> ^from <loc> ^to <oloc>)
    (<p> ^name missionaries-and-cannibals)
    (<g> ^applied <q>)
    (<q> ^name move2 ^inst <j1> ^with <j2> ^from <oloc> ^to <loc>)
    (<i1> ^value <value>)
    (<i2> ^value <value>)
    (<j1> ^value <value>)
    (<j2> ^value <value>)
    -->
    (<g> ^operator <o> - )}

sp {mac*operator*inverse*move11*reject
    "Reject inverse operator."
    (state <g> ^operator <o> + )
    (state <g> ^problem-space <p> )
    (<o> ^name move11 ^inst <i1> ^with <j1> ^from <loc> ^to <oloc>)
    (<p> ^name missionaries-and-cannibals)
    (<g> ^applied <q>)
    (<q> ^name move11 ^inst <i2> ^with <j2> ^from <oloc> ^to <loc>)
    (<i1> ^value <ivalue>)
    (<j1> ^value <jvalue>)
    (<i2> ^value <ivalue>)
    (<j2> ^value <jvalue>)
    -->
    (<g> ^operator <o> - )}

###
### MISSIONARIES-AND-CANNIBALS PROBLEM SPACE: 
### MONITOR OPERATORS
###

sp {mac*monitor*operator-application*move1
    (state <g> ^operator <o>)
    (<o> ^name move1
         ^inst <i>
         ^from <f>
         ^to <t>)
    (<i> ^value <v>)
    (<f> ^name <fname>)
    (<t> ^name <tname>)
    -->
    (write (crlf) 
           |  APPLIED | <o> 
           |: move1(| <v>
           |,| <fname> 
           |,| <tname> 
           |)|)}

sp {mac*monitor*operator-application*move2
    (state <g> ^operator <o>)
    (<o> ^name move2
         ^inst <i1>
         ^with <i2>
         ^from <f>
         ^to <t>)
    (<i1> ^value <v>)
    (<i2> ^value <v>)
    (<f> ^name <fname>)
    (<t> ^name <tname>)
    -->
    (write (crlf) 
           |  APPLIED | <o> 
           |: move2(| <v>
           |,| <v> 
           |,| <fname> 
           |,| <tname> 
           |)|)}

sp {mac*monitor*operator-application*move11
    (state <g> ^operator <o>)
    (<o> ^name move11
         ^inst <i>
         ^with <j>
         ^from <f>
         ^to <t>)
    (<i> ^value <ival>)
    (<j> ^value <jval>)
    (<f> ^name <fname>)
    (<t> ^name <tname>)
    -->
    (write (crlf) 
           |  APPLIED | <o> 
           |: move11(| <ival>
           |,| <jval> 
           |,| <fname> 
           |,| <tname> 
           |)|)}

### eof of mac.s


