
###
### FILE          : tower-of-hanoi.s
###

### 
### AUTHOR(1)     : Aladin.Akyurek [ Soar 6.1.0 ]
###

###   
### CREATED(1)    : Aug 15, 93 
### 

###               
### MODIFIED(3)   : Aug 22, 96     [ soar 7.0.3 ] Sayan Bhattacharyya
### MODIFIED(2)   : Feb 18, 94     [ soar 6.1.x ] Aladin.Akyurek
### MODIFIED(1)   : Jan 11, 94     [ soar 6.1.x ] Aladin.Akyurek
###

###
### Aug 22, 96    : Minor syntactic change to make this run with Soar 7.0.3
### Feb 18, 94    : Added the Pop operator, removed the Infer space.
### Jan 11, 94    : Collapsed two problem spaces into one from
###   the version which was presented at the 7th EuroSoar Workshop
###   (Nov 93, Nottingham, UK). 
###
### Copyright (C) Aladin Akyurek (NISCALE, Leiden, The Netherlands). 
###

###
### ABSTRACT. This file provides a Soar system to solve the Tower 
### of Hanoi problems. This puzzle "involves three vertical pegs or 
### posts and a number of doughnut-like disks of graduated sizes that
### fit  on the pegs. At the outset, all the disks are arranged pyrami-
### dally on one of the pegs, say A, with the largest disk on the bottom. 
### The task is to move all of the disks to another peg, C, say, under 
### the constraints that (1) only one disk may be moved at a time, and 
### (2) a disk may never be placed on top of another smaller than itself. 
### Any number of disks may be used; the minimum number of moves for
### a solution is (2**n - 1), where n is the number of disks" (Simon, 
### 1975/1979, pp. 230-231).
###

###
### This Soar system implements the production system given in Simon
### [6, pp. 238-239]. See, in particular, Anzai & Simon [3, p. 121].
### The system is comprised of three problem spaces and six operators:
### 
### Problem Space           Associated Operators
### --------------          ----------------------------------------
### Tower-Of-Hanoi          { Set-Focus, Move-Disk, Pop, Goal-Test }
### Set-Focus               { Create-Focus, Change-Focus }
### --------------          ----------------------------------------
###
### The tower-of-hanoi space (i.e., the task space) looks for a *disk-to-move*,
### and if it can, moves the *disk-to-move* to its destination; otherwise 
### it attempts, by means of the set-focus operator, to establish one that can 
### be moved. The associated set-focus space either creates *disk-to-move* 
### or changes the existing one(s).
###  
### The system "will solve the Tower of Hanoi problem for any number of 
### disks starting from any situation". No proof is provided for this 
### conclusion (see for examples such as 3-disk, 4-disk, etc., the associated 
### "probs" directory). The following should help in comparing the system
### to the descriptions given in [3] and [6].
###
### (in 6) State = Can              <---> (state <g> ^operator <o>) and
###                                       (<s> ^disk-to-move <m>) and
###                                       (<m> ^disk <disk>) and
###                                       (<o> ^name move-disk 
###                                            ^disk <disk>) 
### (in 3) (LEGAL X P Q)            <---> same as above
### (in 6) State = Can't(J)         <---> (state <g> ^operator <o>) and
###                                       (<s> ^disk-to-move <m>) and
###                                       (<o> ^name set-focus
###                                            ^previous-focus <m>)
### (in 6) Goal = Move(k,P(k),Q)    <---> (<s> ^disk-to-move <m>)
###                                       (<m> ^disk <disk> 
###                                            ^from <source-peg>
###                                            ^to <target-peg>)
### (in 3) (STATE X P Q)             <---> same as above 
### (in 3) NEXTSMALLER (of disk X)  <---> largest of the disks that block
###                                       the disk specified in the structure
###                                       disk-to-move
###

###
### REFERENCES. [1] Amarel, S. (1984). Expert behaviour and problem
### representations. In A. Elithorn & R. Banerji (Eds.), Artificial 
### and human intelligence (pp. 1-41). Amsterdam: Elsevier.
###             [2] Anderson, J. R., Kushmerick, N., & Lebiere, C. (1993).
### The Tower of Hanoi and goal structures. In J. R. Anderson (1993), Rules
### of the mind (pp. 121-142). Hillsdale, NJ: Erlbaum.
###             [3] Anzai, Y., & Simon, H. A. (1979). The theory of learning
### by doing. Psychological Review, 86, 124-140 (Reprinted in Simon, H. A. 
### (1979), Models of thought (Vol. 2, pp. 116-133). New Haven, CT: Yale 
### University Press.).
###             [4] Newell, A. (1992). Unified theories of cognition and
### the role of Soar. In J. A. Michon & A. Akyurek (Eds.), Soar: A cognitive
### architecture in perspective (pp. 25-79).
###             [5] Ruiz, D., & Newell, A. (1989). Tower-noticing triggers
### strategy-change in the Tower of Hanoi: A Soar model. In Proceedings of the
### Eleventh Annual Conference of the Cognitive Science Society (pp. 522-529).
###             [6] Simon, H. A. (1975). The functional equivalence of problem
### solving skills. Cognitive Psychology, 7, 268-288 (Reprinted in Simon, H. 
### A. (1979), Models of thought (Vol. 1, pp. 230-244). New Haven, CT: Yale 
### University Press.).
### 

package require Soar
source $default

###
### TOP GOAL: 
### TOWER-OF-HANOI
###

sp {top-goal*elaborate*goal*tower-of-hanoi
    (state <g> ^superstate nil)
    -->
    (<g> ^name tower-of-hanoi)}

###
### TOWER-OF-HANOI PROBLEM SPACE: 
### TOWER-OF-HANOI
###

sp {tower-of-hanoi*propose*space*tower-of-hanoi
    (state <g> ^name tower-of-hanoi)
    -->
    (<g> ^problem-space <p>)
    (<p> ^name tower-of-hanoi)}

###
### TOWER-OF-HANOI PROBLEM SPACE:
### INITIAL-STATE AND DESIRED-STATE
###

sp {tower-of-hanoi*propose*state*initial-and-desired-states
    "A 3-Disk Tower of Hanoi Problem." 
    (state <g> ^name tower-of-hanoi ^problem-space <p>)
    (<p> ^name tower-of-hanoi)
    -->
    (<g> ^state <s>)
    (<s> ^disk <disk-1> + &, <disk-2> + &, <disk-3> + &
         ^peg <peg-a> + &, <peg-b> + &, <peg-c> + &
         ^holds <h1> + &, <h2> + &, <h3> + & )
    (<h1> ^disk <disk-1> ^above <disk-2> ^on <peg-a>)     
    (<h2> ^disk <disk-2> ^above <disk-3> ^on <peg-a>)
    (<h3> ^disk <disk-3> ^above none ^on <peg-a>)
    (<disk-1> ^name 1 ^size 1) 
    (<disk-2> ^name 2 ^size 2)
    (<disk-3> ^name 3 ^size 3)
    (<peg-a> ^name |A|)
    (<peg-b> ^name |B|)
    (<peg-c> ^name |C|)
    (<g> ^desired <d1> + &, <d2> + &, <d3> + & )
    (<d1> ^disk <disk-1> ^above <disk-2> ^on <peg-c>)
    (<d2> ^disk <disk-2> ^above <disk-3> ^on <peg-c>)
    (<d3> ^disk <disk-3> ^above none ^on <peg-c>)}

###
### TOWER-OF-HANOI PROBLEM SPACE:
### STATE ELABORATION/INFERENCES:
### LARGER, UPPER-DISK, AND
### CLEAR
###

sp {tower-of-hanoi*object*disk*elaborate*state*larger
    "If size-of(i) > size-of(j), then larger(i,j)."
    (state <g> ^superstate nil)
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name tower-of-hanoi)
    (<s> ^disk <i-disk> { <> <i-disk> <j-disk> })
    (<i-disk> ^size <i-size>)
    (<j-disk> ^size <j-size> > <i-size>)
    -->
    (<j-disk> ^larger <i-disk> + & )}
    
sp {tower-of-hanoi*object*disk*elaborate*state*upper-disk
    "If not(above(x,disk)), then upper-disk(disk)."
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name tower-of-hanoi)
    (<s> ^disk <disk>)
   -{ (<s> ^holds <h>)
      (<h> ^above <disk>) }
    -->
    (<s> ^upper-disk <disk> + & )}

sp {tower-of-hanoi*object*peg*elaborate*state*clear
    "If not(on(x,peg)), then clear(peg)."
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name tower-of-hanoi)
    (<s> ^peg <peg>)
   -{ (<s> ^holds <h>)
      (<h> ^on <peg>) }
    -->
    (<s> ^clear <peg> + & )}

###
### TOWER-OF-HANOI PROBLEM SPACE OPERATORS: 
### SET-FOCUS AND MOVE-DISK
### For POP and GOAL-TEST, see below.
###

sp {tower-of-hanoi*propose*operator*set-focus*disk-to-move
    "If no focus [i.e., no disk-to-move], then create one."
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name tower-of-hanoi)
    (<s> -^disk-to-move)
    -->
    (<g> ^operator <o> + <, <o> = )
    (<o> ^name set-focus 
         ^previous-focus none 
         ^done? no)}
         
sp {tower-of-hanoi*propose*operator*set-focus*disk-to-move*alternative
    "If the disk in focus is not movable, change the focus."
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name tower-of-hanoi)
    (<s> ^disk-to-move <m>)
    -->
    (<g> ^operator <o> + <, <o> =  )
    (<o> ^name set-focus
         ^previous-focus <m>
         ^done? no)}

sp {tower-of-hanoi*propose*operator*move-disk*disk-to-move*onto
    "Target peg is clear."
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name tower-of-hanoi)
    (<s> ^disk-to-move <m>
         ^upper-disk <m-disk> 
         ^peg <target-peg>
         ^clear <target-peg>
    	 ^holds <h>)
    (<m> ^disk <m-disk> 
         ^from { <> <target-peg> <source-peg> } 
         ^to <target-peg>) 	 
    (<h> ^disk <m-disk> ^on <source-peg>)
    -->
    (<g> ^operator <o>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>
         ^done? no)}

sp {tower-of-hanoi*propose*operator*move-disk*disk-to-move*above
    "Upper disk on the target peg is larger."
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name tower-of-hanoi)
    (<s> ^disk-to-move <m>
         ^upper-disk <m-disk> <o-disk>
         ^peg <target-peg> 
        -^clear <target-peg>
         ^holds <h> <i>)
    (<m> ^disk <m-disk> 
         ^from { <> <target-peg> <source-peg> } 
         ^to <target-peg>) 	 
    (<h> ^disk <m-disk> ^on <source-peg>)
    (<i> ^disk <o-disk> ^on <target-peg>)
    (<o-disk> ^larger <m-disk>)
    -->
    (<g> ^operator <o>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>
         ^done? no)}

###
### TOWER-OF-HANOI PROBLEM SPACE:
### OPERATOR IMPLEMENTATION
###

sp {implement*move-disk*from-above*nodisk*target-peg*is-clear
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>
         ^done? no)
    (<p> ^name <p-name>)
    (<s> ^upper-disk <m-disk> 
         ^clear <target-peg>
         ^disk-to-move <m> 
         ^holds <h>)
    (<m> ^disk <m-disk> ^from <source-peg> ^to <peg>)
    (<h> ^disk <m-disk> ^above none ^on <source-peg>)
    -->
    (<h> ^on <target-peg> <source-peg> - )
    (<o> ^done? yes no - )}

sp {implement*move-disk*from-above*adisk*target-peg*is-clear
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>
         ^done? no)
    (<p> ^name <p-name>)
    (<s> ^upper-disk <m-disk> 
         ^clear <target-peg> 
         ^disk-to-move <m> 
         ^holds <h>)
    (<m> ^disk <m-disk> ^from <source-peg> ^to <target-peg>)
    (<h> ^disk <m-disk> ^above { <> none <adisk> } ^on <source-peg>)
    -->
    (<h> ^above none <adisk> - )
    (<h> ^on <target-peg> <source-peg> - )
    (<o> ^done? yes no - )}

sp {implement*move-disk*from-above*adisk-or-nodisk*target-peg*is-not-clear
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>
         ^done? no)
    (<p> ^name <p-name>)
    (<s> ^upper-disk <m-disk> { <> <m-disk> <o-disk> } 
        -^clear <target-peg> 
         ^disk-to-move <m> 
         ^holds <h> <i>)
    (<m> ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>)
    (<h> ^disk <m-disk> ^above <adisk-or-nodisk> ^on <source-peg>)
    (<i> ^disk <o-disk> ^on <target-peg>)
    -->
    (<h> ^above <o-disk> <adisk-or-nodisk> - )
    (<h> ^on <target-peg> <source-peg> - )
    (<o> ^done? yes no - )}

###
### TOWER-OF-HANOI PROBLEM SPACE:
### OPERATOR TERMINATION 
###

sp {terminate*set-focus
    (state <g> ^operator <o>)         
    (state <g> ^problem-space <p> ^state <s>)
    (<o> ^name set-focus ^done? yes)
    (<p> ^name <p-name>)
    -->
    (<g> ^operator <o> @ )}

sp {terminate*move-disk
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>)
    (<o> ^name move-disk ^done? yes)
    (<p> ^name <p-name>)
    -->
    (<g> ^operator <o> @ )}

###
### TOWER-OF-HANOI PROBLEM SPACE: POP FOCUS
###

sp {tower-of-hanoi*propose*operator*pop*object*disk-to-move
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name tower-of-hanoi)
    (<s> ^holds <h> ^disk-to-move <m>)
    (<m> ^disk <disk> ^to <peg>)
    (<h> ^disk <disk> ^on <peg>)
    -->
    (<g> ^operator <o> + =, <o> < )
    (<o> ^name pop
         ^focus <m>
         ^done? no)
    (<m> ^pop? yes)}

sp {task-space*compare*pop*better
    (state <g> ^operator <op-1> + { <> <op-1> <op-2> } + )
    (state <g> ^problem-space <p> ^state <s>)
    (<op-1> ^name pop)
    (<op-2> -^name { << pop add del >> })
    (<p> ^name <p-name>)
    -->
    (<g> ^operator <op-1> > <op-2> )}    

sp {implement*pop
	(state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>)
    (<o> ^name pop
         ^focus <m>
         ^done? no)    
    (<p> ^name <p-name>)
    (<s> ^<f> <m>)
    (<m> ^pop? yes)
    -->
    (<s> ^<f> <m> - )
    (<o> ^done? yes no - )}

sp {terminate*pop
	(state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>)
    (<o> ^name pop ^done? yes)    
    (<p> ^name <p-name>)
    -->
    (<g> ^operator <o> @ )}

###
### TOWER-OF-HANOI PROBLEM SPACE: GOAL-TEST
###

sp {tower-of-hanoi*desired-of-disk*satisfied
    (state <g> ^desired <d>)
    (state <g> ^problem-space <p> ^state <s>)
    (<d> ^disk <disk> ^above <x> ^on <peg>)
    (<p> ^name tower-of-hanoi)
    (<s> ^holds <h>)
    (<h> ^disk <disk> ^above <x> ^on <peg>)
    -->
    (<g> ^satisfied <d> + & )}

sp {task-space*mark*state*pursue
    (state <g> ^desired <d> -^satisfied <d>)
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name <p-name>)
    -->
    (<s> ^pursue <d> + & )}

sp {task-space*propose*operator*goal-test*top-goal
    (state <g> ^superstate nil)
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name <p-name>)
    (<s> -^pursue -^success)
    -->
    (<g> ^operator <q> =, <q> + )
    (<q> ^name goal-test ^result-type success)}

sp {task-space*select*operator*goal-test*better
    (state <g> ^operator <op-1> + { <> <op-1> <op-2> } + )
    (state <g> ^problem-space <p> ^state <s>)
    (<op-1> ^name goal-test)
    (<op-2> -^name << pop add del >>)
    (<p> ^name <p-name>)
    (<s> -^pursue)
    -->
    (<g> ^operator <op-1> > <op-2> )}

sp {implement*goal-test*top-goal
    (state <g> ^operator <q>)
    (state <g> ^problem-space <p> ^state <s>
              ^desired <d>
              ^satisfied <d>
              ^superstate nil)
    (<q> ^name goal-test ^result-type <r-type>)
    (<s> -^pursue -^<r-type> <d>)
    -->
    (<s> ^<r-type> <d> + & )
    (<g> ^<r-type> <d> + & )}

sp {terminate*goal-test
    (state <g> ^operator <q>)
    (state <g> ^problem-space <p> ^state <s>)
    (<q> ^name goal-test)
    (<p> ^name <p-name>)
    -->
    (<g> ^operator <q> @ )}

###
### TOWER-OF-HANOI PROBLEM-SPACE SUBGOAL:
### PROBLEM SPACE = SET-FOCUS
### INITIAL STATE = SUPERSTATE
###

sp {tower-of-hanoi*operator-no-change*create*goal-context*set-focus
    (state <g*> ^superstate.operator <op>
               ^impasse no-change 
               ^attribute operator 
               ^superstate <g1>)
    (<op> ^name set-focus) ## ^done? no
    (<g1> ^problem-space <p1> ^state <s1>)
    -->
    (<g*> ^problem-space <p*>)
    (<p*> ^name set-focus)
    (<g*> ^state <s1>)}

###
### SET-FOCUS PROBLEM SPACE:
### STATE ELABORATION:
### IS-BLOCKED-BY AND 
### LARGEST-BLOCKING-DISK
###

sp {set-focus*elaborate*state*disk-to-move*blocking-disks*source
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name set-focus)
    (<s> ^disk-to-move <m> ^holds <h> <i>)
    (<m> ^disk <m-disk> 
         ^from <source-peg>
         ^to <target-peg>)
    (<h> ^disk <m-disk> ^on <source-peg>)
    (<i> ^disk <b-disk> ^on <source-peg>)
    (<m-disk> ^larger <b-disk>)
    -->
    (<m> ^is-blocked-by <b-disk> + & )}

sp {set-focus*elaborate*state*disk-to-move*blocking-disks*target
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name set-focus)
    (<s> ^disk-to-move <m> ^holds <h> <i>)
    (<m> ^disk <m-disk> 
         ^from <source-peg>
         ^to { <> <source-peg> <target-peg> })
    (<h> ^disk <m-disk> ^on <source-peg>)
    (<i> ^disk <b-disk> ^on <target-peg>)
    (<m-disk> ^larger <b-disk>)
    -->
    (<m> ^is-blocked-by <b-disk> + & )}

sp {set-focus*elaborate*state*disk-to-move*largest-blocking-disk
    (state <g> ^problem-space <p> ^state <s>)
    (<p> ^name set-focus)
    (<s> ^disk-to-move <m>)
    (<m> ^is-blocked-by <x>)
   -{ (<s> ^disk-to-move <m>)
      (<m> ^is-blocked-by <z>)
      (<z> ^larger <x>) }
    -->
    (<m> ^largest-blocking-disk <x>)}

###
### SET-FOCUS PROBLEM SPACE OPERATORS:
### CREATE-FOCUS AND CHANGE-FOCUS
###

sp {set-focus*propose*operator*create-focus
    (state <g> ^problem-space <p> 
              ^state <s>
              ^superoperator <s-operator>)
    (<p> ^name set-focus)
    (<s-operator> ^previous-focus none)
    -->
    (<g> ^operator <o> + = )
    (<o> ^name create-focus ^previous-focus none)}

sp {set-focus*propose*operator*change-focus
    (state <g> ^problem-space <p> 
              ^state <s>
              ^superoperator <s-operator>)
    (<p> ^name set-focus)
    (<s-operator> ^previous-focus { <> none <f> })
    -->
    (<g> ^operator <o> + = )
    (<o> ^name change-focus ^previous-focus <f>)}

###
### SET-FOCUS PROBLEM SPACE:
### OPERATOR IMPLEMENTATION
###

sp {implement*create-focus*disk-to-move*largest
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>
              ^superoperator <s-operator>)
    (<o> ^name create-focus)
    (<p> ^name <p-name>)
    (<s> ^holds <h> ^pursue <i>)
    (<h> ^disk <x> ^on <current-peg>)
    (<i> ^disk <x> ^on <desired-peg>)
   -{ (<s> ^pursue <j>)
      (<j> ^disk <z>)
      (<z> ^larger <x>) } 
    -->
    (<s> ^disk-to-move <m> + & )
    (<m> ^disk <x> 
         ^from <current-peg>
    	 ^to <desired-peg>)
    (<s-operator> ^done? yes no - )}

sp {implement*change-focus*disk-to-move*largest-blocker
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>
              ^superoperator <s-operator>)
    (<o> ^name change-focus ^previous-focus <f>)
    (<p> ^name <p-name>)
    (<s> ^peg <other-peg> 
         ^holds <h> 
         ^disk-to-move <f>)
    (<f> ^disk <f-disk> 
         ^from { <> <other-peg> <source-peg> }
         ^to { <> <other-peg> <target-peg> }
         ^largest-blocking-disk <b-disk>)
    (<h> ^disk <b-disk> ^on { <> <other-peg> <peg> })
    (<f-disk> ^larger <b-disk>) 
    -->
    (<s> ^disk-to-move <m> + &, <f> - )
    (<m> ^disk <b-disk>
    	 ^from <peg>
    	 ^to <other-peg>)
    (<s-operator> ^done? yes no - )}

###
### SET-FOCUS PROBLEM SPACE:
### OPERATOR TERMINATION
###

sp {terminate*create-focus
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>)
    (<o> ^name create-focus)
    (<p> ^name <p-name>)
    -->
    (<g> ^operator <o> @ )}
    
sp {terminate*change-focus
    (state <g> ^operator <o>)
    (state <g> ^problem-space <p> ^state <s>)
    (<o> ^name change-focus)
    (<p> ^name <p-name>)
    -->
    (<g> ^operator <o> @ )}
    
###
### TOWER-OF-HANOI PROBLEM SPACE: 
### MONITOR STATE AND OPERATORS
###

sp {tower-of-hanoi*monitor*state*holds*above*disk
    (state <g> ^superstate nil)
    (state <g> ^state <s>)
    (<s> ^holds <h>)
    (<h> ^disk <u-disk> ^above <w-disk> ^on <peg>)
    (<u-disk> ^size <u-size>)
    (<w-disk> ^size <w-size>)
    (<peg> ^name <peg-name>)
    -->
    (write (crlf) 
           |  On(| <u-size> 
           |,| <peg-name> 
           |),Above(| <u-size>
           |,| <w-size>
           |).|)}
  
sp {tower-of-hanoi*monitor*state*holds*above*none
    (state <g> ^superstate nil)
    (state <g> ^state <s>)
    (<s> ^holds <h>)
    (<h> ^disk <disk> ^above none ^on <peg>)
    (<disk> ^size <size>)
    (<peg> ^name <peg-name>)
    -->
    (write (crlf) 
           |  On(| <size> 
           |,| <peg-name> 
           |),Above(| <size>
           |,-).|)}
  
sp {tower-of-hanoi*monitor*state*upper-disk
    (state <g> ^superstate nil)
    (state <g> ^state <s>)
    (<s> ^upper-disk <disk>)
    (<disk> ^size <size>)
    -->
    (write (crlf) 
           |  Upper-Disk(| <size> 
           |).|)}
  
sp {tower-of-hanoi*monitor*state*clear
    (state <g> ^superstate nil)
    (state <g> ^state <s>)
    (<s> ^clear <peg>)
    (<peg> ^name <name>)
    -->
    (write (crlf) 
           |  Clear(Peg(| <name> 
           |)).|)}
  
sp {tower-of-hanoi*monitor*state*disk-to-move
    (state <g> ^superstate nil)
    (state <g> ^state <s>)
    (<s> ^disk-to-move <m>)
    (<m> ^disk <disk>)
    (<disk> ^size <size>)
    -->
    (write (crlf)
           |  Focus(Disk(| <size> 
           |)).|)}

sp {tower-of-hanoi*desired-state*above*disk
    (state <g> ^desired <d> ^superstate nil)
    (<d> ^disk <u-disk> ^above <w-disk> ^on <peg>)
    (<u-disk> ^size <u-size>)
    (<w-disk> ^size <w-size>)
    (<peg> ^name <peg-name>)
    -->
    (write (crlf) 
           |  Desired[On(| <u-size> 
           |,| <peg-name> 
           |),Above(| <u-size>
           |,| <w-size>
           |)].|)}
  
sp {tower-of-hanoi*desired-state*above*none
    (state <g> ^desired <d> ^superstate nil)
    (<d> ^disk <disk> ^above none ^on <peg>)
    (<disk> ^size <size>)
    (<peg> ^name <peg-name>)
    -->
    (write (crlf) 
           |  Desired[On(| <size> 
           |,| <peg-name> 
           |),Above(| <size>
           |,-)].|)}
  
sp {tower-of-hanoi*monitor*operator-execution*move-disk
    (state <g> ^operator <o>)
    (state <g> ^state <s>)
    (<o> ^name move-disk
         ^disk <disk>
         ^from <from-peg>
         ^to <to-peg>
         ^done? yes)
    (<s> ^holds <h>)   
    (<h> ^disk <disk> ^on <to-peg>)
    (<disk> ^size <size>)
    (<from-peg> ^name <from-name>)
    (<to-peg> ^name <to-name>)
    -->
    (write (crlf) 
           |  Executing(Move-Disk(| <size>
           |,| <from-name> 
           |,| <to-name>
           |)).|)}

###
### DEFAULT PRODUCTION 
###

#New Default Production For The Operator-No-Change Impasse

sp {default*operator-no-change*elaborate*goal*superoperator
    :default
    (state <g*> ^impasse no-change
               ^attribute operator
               ^superstate <g1>)
    (state <g1> ^operator <o1>)
    (state <g1> ^problem-space <p1> ^state <s1>)
    -->
    (<g*> ^superoperator <o1>)}

### eof of tower-of-hanoi.s

