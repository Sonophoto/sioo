###
### FILE          : keys-and-boxes.s, alias: kab.s (NNPSCM)
###

### 
### AUTHOR(2)     : Sayan Bhattacharyya [ Soar 7.0.3 ]
### AUTHOR(1)     : Aladin.Akyurek [ Soar 6.2.3 ]
###

###   
### CREATED(1)    : Sep 11, 94
### 

###   
### MODIFIED(1)   : Aug 22, 96 by Sayan Bhattacharyya
### 

###
### Copyright (C) Aladin Akyurek (NISCALE, Leiden, The Netherlands). 
###

###
### ABSTRACT. This file provides a Soar system to solve the Keys 
### and Boxes problem which "has been proposed by Michie
### /.../ as a "benchmark" problem for problem solving programs.
### The problem is as follows:
###           In a room there is a robot with no sensory ability
### whatsoever. Four places are defined in the room: BOX1, BOX2,
### TABLE, and DOOR. Outside the room there is one place: OUTSIDE.
###           At DOOR there is a non-empty pile of red objects.
###           At BOX1 or BOX2 (we don't know which) there is a
### non-empty pile of keys, all of which fit the door. We don't know
### what is at the other box.
###           TABLE is empty.
###           The robot has three possible actions:
### 1. Pick up -- If the robot is holding something, this action has
###    no effect. Otherwise, some object at the location will be in the
###    robot's hand when this action is completed.
### 2. Put down -- If the robot is not holding anything, this action
###    has no effect. Otherwise, the object in the robot's hand is added
###    to the pile at the current location of the robot.
### 3. Go to X -- The robot's location becomes X. If X is OUTSIDE, there
###    must be a key in the pile at DOOR or this action has no effect.
### The robot has no way to tell if any action had an effect or not.
###           Initially the robot is at an undetermined place in the
### room, and it is unknown if anything is in its hand. /.../ The problem
### is to develop a set of actions that will ensure that a red object is
### OUTSIDE" [1, pp. 55-56].
###
### As specified by Sacerdoti (1977), the problem contains a crucial 
### contradiction which makes it unsolvable/intractable for most human 
### subjects. A robot "with no sensory ability whatsoever" is indeed 
### difficult to imagine as capable of "Go to X", that is, going to a 
### specified object. Sacerdoti and his system Noah ignored this, 
### apparently without knowing that they did so. In fact, even without 
### this restrictive statement, it is an interesting, "pure" planning 
### problem that requires one to deal "with a partially specified initial 
### state, and with actions whose effects are only partially specified." 
### The problem that we solve here does not contain the statement in 
### question. As said, this modification of the problem specification 
### does not change its nature. 
### 
### John E. Laird (1986) ever wrote the following: "This is a complex
### problem with many steps that was unsolvable without the use of
### *hierarchical kernels* in Noah. The argument implicit in Noah is
### that this problem would be intractable in a system like Soar without
### deliberate planning." The Soar system here is an attempt to meet
### that challenge.
###

###
### The system is comprised of two problem spaces, three task-operators 
### (T-Ops), and seven generic operators (G-Ops):
### 
### Problem Space         Associated Operators
### --------------        ------------------------------------------------
### Keys-And-Boxes        { Create-Focus, Change-Focus, Pick-Up, Put-Down,
###                         GoTo, Pop, Add, Del, Replace, Goal-Test }
### Set-Focus             { Set-Focus }
### --------------        ------------------------------------------------
###
### The keys-and-boxes space (i.e., the task space) looks for an *action*,
### and if it can, it proposes one or more T-ops for that *action*.
### Otherwise, G-ops attempt to bring in a different *action* in focus for
### which T-ops can be created. An *action* is computed from within
### a subspace by means of the set-focus operator that proposes other G-ops
### to create or change a focus in the task space (cf. the system for 
### tower-of-hanoi, also in the "examples" directory). The table below
### shows the mapping between an *action* and T-ops.
###
### Action                T-Ops
### --------------        ------------------------------------------------
### Acquire(X)            GoTo(I), Pick-Up(X,I) where Loc(X,I)
### Transfer(X)           GoTo(I), Put-Down(X,I) where I = any location
### Transfer(X,I)         GoTo(I), Put-Down(X,I) where I = destination
### --------------        ------------------------------------------------
###
### Note that Soar solves the problem by "abstraction planning" (see
### Tenenberg [2]) as did Noah, and by look-ahead.
###
### REFERENCES. [1] Sacerdoti, E. D. (1977). A structure for plans and
### behavior. New York: Elsevier.
###             [2] Tenenberg, J. D. (1991). Abstraction in planning. In
### J. F. Allen, H. A. Kautz, R. N. Pelavin, and J. D. Tenenberg, Reasoning
### about plans (Chap. 4). San Mateo, CA: Morgan Kaufmann.
###

package require Soar
source $default


###
### TASK NAME:
### KEYS-AND-BOXES
###

sp {top-level*elaborate*state*task*keys-and-boxes
    (state <s> ^superstate nil)
    -->
    (<s> ^name keys-and-boxes)}

###
### TASK PROBLEM SPACE:
### KEYS-AND-BOXES
###

sp {keys-and-boxes*elaborate*state*space*keys-and-boxes
    (state <s> ^name keys-and-boxes ^superstate nil)
    -->
    (<s> ^problem-space <p>)
    (<p> ^name keys-and-boxes
         ^default-state-copy yes
         ^one-level-attributes
              room + &,
	      box + &,
	      table + &,
	      door + &,
	      outside + &,
	      robot + &,
	      object + &,
              location + &
         ^two-level-attributes 
              holds + &, 
              action + & )}

###
### TASK SPACE:
### INITIAL STATE AND
### DESIRED STATE
###

sp {keys-and-boxes*elaborate*state*initial-and-desired-states
    (state <s> ^name keys-and-boxes ^problem-space <p>)
    (<p> ^name keys-and-boxes)
    -->
    (<s> ^room <room>
         ^box <box-1> + &, <box-2> + &
         ^table <table>
         ^door <door>
         ^outside <loc-o>
         ^robot <robot>
         ^pile <c1> + &, <c2> + &, <c3> + &
         ^location <box-1> + &, <box-2> + &, <door> + &, <table> + &, <loc-o> + &
         ^object <x1> + &, <x2> + &, <x3> + &, <x4> + &
         ^holds <h1> + &, <h2> + &, <h3> + &, <h4> + &, <h5> + &, <h6> + & )
    (<box-1> ^in <room> ^name box-1)
    (<box-2> ^in <room> ^name box-2)
    (<table> ^in <room> ^name table)
    (<door> ^links <room> ^to <loc-o> ^in <room> ^name door)
    (<loc-o> ^name outside)
    (<robot> ^name robot)
    (<c1> ^base-type red-object + & ^loc <door>)
    (<c2> ^base-type key + &, non-key + & ^loc <box-1>)
    (<c3> ^base-type key + &, non-key + & ^loc <box-2>)
    (<h1> ^robot <robot> ^holding <x1> ^loc <loc-r>)
    (<loc-r> ^in <room> ^name |_|)
    (<h2> ^object <x1> ^loc <robot>)
    (<x1> ^type unknown ^name object-1)
    (<h3> ^door <door> ^status locked)
    (<h4> ^object <x2> ^loc <box-1>)
    (<x2> ^type key + &, non-key + & ^name object-2)
    (<h5> ^object <x3> ^loc <box-2>)
    (<x3> ^type key + &, non-key + & ^name object-3)
    (<h6> ^object <x4> ^loc <door>)
    (<x4> ^type red-object ^name object-4)
    (<s> ^desired <d> + & )
    (<d> ^object <x4> ^loc <loc-o>)}
    
###
### TASK SPACE OPERATORS:
### T-Ops = GOTO, PICK-UP, AND PUT-DOWN
### G-Ops = CREATE-FOCUS, CHANGE-FOCUS, 
###         POP, ADD, DEL, REPLACE,
###         AND GOAL-TEST
### For the generic operator Goal-Test,
### see the section on goal-test.
###

#
#GoTo + Pick-Up <-- Acquire
#

sp {keys-and-boxes*propose*goto->pick-up*object*object-loc
    "Acquire ==> GoTo, Pick-Up."
    (state <s> ^problem-space <p> 
               ^holds <h1> <h2> 
               ^action <a>)
    (<p> ^name keys-and-boxes)
    (<h1> ^object <x> ^loc <i>)
    (<h2> ^robot <r> ^holding nothing)
    (<a> ^isa acquire ^object <x>)
    -->
    (<s> ^operator <op-1> <op-2>)
    (<op-1> ^name goto
            ^reference-action <a>
            ^loc <i>
            ^done? no)
    (<op-2> ^name pick-up
            ^reference-action <a>
            ^object <x>
            ^loc <i>
            ^done? no)}

#
#GoTo + Put-Down <-- Transfer
#

sp {keys-and-boxes*propose*goto->put-down*object*destination
    "Transfer ==> GoTo, Put-Down: destination is given."
    (state <s> ^problem-space <p> 
               ^holds <h1> <h2> 
               ^action <a>)
    (<p> ^name keys-and-boxes)
    (<h1> ^object <x> ^loc <r>)
    (<h2> ^robot <r> ^holding <x>)
    (<a> ^isa transfer ^object <x> ^destination <i>)
    -->
    (<s> ^operator <op-1> <op-2>)
    (<op-1> ^name goto
            ^reference-action <a>
            ^loc <i>
            ^done? no)
    (<op-2> ^name put-down
            ^reference-action <a>
            ^object <x>
            ^loc <i>
            ^done? no)}
         
sp {keys-and-boxes*propose*goto->put-down*object*no-destination
    "Transfer ==> GoTo, Put-Down: destination is not given."
    (state <s> ^problem-space <p> 
               ^location <i> 
               ^holds <h1> <h2> 
               ^action <a>)
    (<p> ^name keys-and-boxes)
    #the expression ^location <i> is crucial here.    
    (<h1> ^object <x> ^loc <r>)
    (<h2> ^robot <r> ^holding <x>)
    (<a> ^isa transfer ^object <x> -^destination)
    -->
    (<s> ^operator <op-1> <op-2>)
    (<op-1> ^name goto
            ^reference-action <a>
            ^loc <i>
            ^done? no)
    (<op-2> ^name put-down
            ^reference-action <a>
            ^object <x>
            ^loc <i>
            ^done? no)}
         
#
#Create-Focus, Change-Focus 
#are proposed from within the subspace
#set-focus, or by chunks.
#

#
#Pop
#

sp {keys-and-boxes*object*action*propose*pop*transfer
    (state <s> ^problem-space <p> 
               ^action <a> 
               ^location <i> 
               ^holds <h>)
    (<p> ^name keys-and-boxes)
    (<a> ^isa transfer ^object <x> -^destination)
    (<h> ^object <x> ^loc <i>)
    -->
    (<s> ^operator <q> + = )
    (<q> ^name pop
         ^action <a>
         ^done? no)}

sp {keys-and-boxes*object*action*propose*pop*transfer*destination
    (state <s> ^problem-space <p> 
               ^action <a> 
               ^location <i> 
               ^holds <h>)
    (<p> ^name keys-and-boxes)
    (<a> ^isa transfer ^object <x> ^destination <i>)
    (<h> ^object <x> ^loc <i>)
    -->
    (<s> ^operator <q> + = )
    (<q> ^name pop
         ^action <a>
         ^done? no)}

sp {keys-and-boxes*object*action*propose*pop*acquire
    (state <s> ^problem-space <p> 
               ^action <a> 
               ^holds <h>)
    (<p> ^name keys-and-boxes)
    (<a> ^isa acquire ^object <x>)
    (<h> ^robot <r> ^holding <x>)
    -->
    (<s> ^operator <q> + = )
    (<q> ^name pop
         ^action <a>
         ^done? no)}

#
#Add, Del. None proposed in this task.
#

#
#Replace
#
	    
sp {object*action*propose*replace*door*value*locked
    (state <s> ^problem-space <p> 
               ^location <door> 
               ^holds <h>)
    (<p> ^name keys-and-boxes)
    (<h> ^door <door> ^status locked)
   -{ (state <s> ^holds <i>)
      (<i> ^object <k> ^loc <> <door>)
      (<k> ^type key) }
    -->
    (<s> ^operator <q> + = )
    (<q> ^name replace
         ^level two
         ^structure <h>
         ^pattern-value locked
         ^by open
         ^done? no)}
	    
###
### TASK SPACE:
### OPERATOR APPLICATION
###

sp {apply*pick-up    
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p> 
               ^holds <h1> <h2>)
    (<o> ^name pick-up
         ^object <x>
         ^loc <i>
         ^done? no)
    (<p> ^name <p-name>)
    (<h1> ^object <x> ^loc <i>)
    (<h2> ^robot <r> ^holding nothing ^loc <i>)
    -->
    (<h1> ^loc <r> <i> - )
    (<h2> ^holding <x> nothing - )
    (<o> ^done? yes no - )}
 
sp {apply*put-down    
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p> 
               #^location <i> added.
               ^location <i> 
               ^holds <h1> <h2>)
    (<o> ^name put-down
         ^object <x>
         ^loc <i>
         ^done? no)
    (<p> ^name <p-name>)
    #Object(X) & Loc(X,R) & Robot(R) = Robot R has X.
    (<h1> ^object <x> ^loc <r>)
    (<h2> ^robot <r> ^holding <x> ^loc <i>)
    -->
    (<h1> ^loc <i> <r> - )
    (<h2> ^holding nothing <x> - )
    (<o> ^done? yes no - )}

sp {apply*goto
    "Locations inside/outside are handled within goto proposals."
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p> ^holds <h>)
    (<o> ^name goto
         ^loc <i>
         ^done? no)
    (<p> ^name <p-name>)
    (<h> ^robot <r> ^loc { <> <i> <loc-r> })
    -->
    (<h> ^loc <i> <loc-r> - )
    (<o> ^done? yes no - )}

#
#Save the task operator that is applied.
#

sp {keys-and-boxes*save*operator*applied*first-time
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p>
              -^applied)
    (<o> ^name <o-name> ^loc <i>)
    (<p> ^name keys-and-boxes)
    -->
    (<s> ^applied <o>)}
	    
sp {keys-and-boxes*save*operator*applied*later-times
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p>
               ^applied <q> <> <o>)
    (<o> ^name <o-name> ^loc <i>)
    (<p> ^name keys-and-boxes)
    -->
    (<s> ^applied <o> <q> - )}

sp {apply*create-focus
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>
              -^action <a>)
    (<p> ^name <p-name>)
    (<q> ^name create-focus ^action <a> ^done? no)
    (<a> ^isa <a-type> ^super-action none)
    -->
    (<s> ^action <a> + & )
    (<q> ^done? yes no - )}     

sp {apply*change-focus
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p> 
               ^action <x>
              -^action <a>)
    (<p> ^name <p-name>)
    (<q> ^name change-focus ^action <a> ^done? no)
    (<a> ^isa <a-type> ^super-action <x>)
    -->
    (<s> ^action <a> + &, <x> - )
    (<q> ^done? yes no - )}     

#
#Apply Pop, Add, Del, Replace. 
#

sp {apply*pop*a
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>
               ^action <a>)
    (<q> ^name pop ^action <a> ^done? no)    
    (<a> ^super-action none)
    (<p> ^name <p-name>)
    -->
    (<s> ^action <a> - )
    (<q> ^done? yes no - )}

sp {apply*pop*b
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p> 
               ^action <a> 
               ^action { <> <a> <s-action> })
    (<q> ^name pop ^action <a> ^done? no)    
    (<p> ^name <p-name>)
    (<a> ^super-action { <> none <s-action> })
    -->
    (<s> ^action <a> - )
    (<q> ^done? yes no - )}

sp {apply*pop*c
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p> 
               ^action <a>
              -^action <s-action>)
    (<q> ^name pop ^action <a> ^done? no)    
    (<p> ^name <p-name>)
    (<a> ^super-action { <> none <s-action> })
    -->
    (<s> ^action <s-action> + &, <a> - )
    (<q> ^done? yes no - )}

sp {apply*add*level-one
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>
              -^<a> <v>)
    (<q> ^name add
         ^level one
         ^pattern <i>
         ^done? no)
    (<i> ^<a> <v>)    
    (<p> ^name <p-name>)
    -->
    (<s> ^<a> <v> + & )
    (<q> ^done? yes no - )}

sp {apply*add*level-two
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p> 
               ^<x-slot> <x>)
    (<q> ^name add
         ^level two
         ^structure <x>
         ^pattern <i> 
         ^done? no)
    (<i> ^<a> <v>)    
    (<p> ^name <p-name>)
    (<x> -^<a> <v>)
    -->
    (<x> ^<a> <v> + & )
    (<q> ^done? yes no - )}

sp {apply*del*level-one
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p> ^<a> <v>)
    (<q> ^name del
         ^level one
         ^pattern <i>
         ^done? no)    
    (<i> ^<a> <v>)    
    (<p> ^name <p-name>)
    -->
    (<s> ^<a> <v> - )
    (<q> ^done? yes no - )}

sp {apply*del*level-two
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>
               ^<x-slot> <x>)
    (<q> ^name del
         ^level two
         ^structure <x>
         ^pattern <i>
         ^done? no)    
    (<i> ^<a> <v>)    
    (<p> ^name <p-name>)
    (<x> ^<a> <v>)
    -->
    (<x> ^<a> <v> - )
    (<q> ^done? yes no - )}

sp {apply*replace*level-one
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>
               ^<a> <value>)
    (<q> ^name replace
         ^level one
         ^pattern-value <value>
         ^by <new-value>
         ^done? no)    
    (<p> ^name <p-name>)
    -->
    (<s> ^<a> <new-value> <value> - )
    (<q> ^done? yes no - )}

sp {apply*replace*level-two
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>
               ^<x-slot> <x>)
    (<q> ^name replace
         ^level two
         ^structure <x>
         ^pattern-value <value>
         ^by <new-value>
         ^done? no)    
    (<p> ^name <p-name>)
    (<x> ^<a> <value>)
    -->
    (<x> ^<a> <new-value> <value> - )
    (<q> ^done? yes no - )}

###
### TASK SPACE:
### OPERATOR TERMINATION 
###

sp {terminate*put-down
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p>)
    (<o> ^name put-down ^done? yes)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <o> @ )}

sp {terminate*pick-up
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p>)
    (<o> ^name pick-up ^done? yes)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <o> @ )}

sp {terminate*goto
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p>)
    (<o> ^name goto ^done? yes)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <o> @ )}

sp {terminate*create-focus
    (state <s> ^operator <q>)         
    (state <s> ^problem-space <p>)
    (<q> ^name create-focus ^done? yes)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> @ )}

sp {terminate*change-focus
    (state <s> ^operator <q>)         
    (state <s> ^problem-space <p>)
    (<q> ^name change-focus ^done? yes)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> @ )}

sp {terminate*pop
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>)
    (<q> ^name pop ^done? yes)    
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> @ )}

sp {terminate*add
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>)
    (<q> ^name add ^done? yes)    
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> @ )}

sp {terminate*del
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>)
    (<q> ^name del ^done? yes)    
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> @ )}

sp {terminate*replace
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>)
    (<q> ^name replace ^done? yes)    
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> @ )}

###
### SEARCH CONTROL:
### TASK SPACE AND
### SELECTION SPACE
###

sp {keys-and-boxes*reject*goto*not-table
    "Tranfer(X,-) & GoTo(I) & Not(Table(I)), Reject(GoTo(I))."
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> 
               ^action <a>
              -^table <i>)
    (<o> ^name goto ^reference-action <a> ^loc <i>)
    (<a> ^isa transfer -^destination)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <o> - )}

sp {keys-and-boxes*reject*put-down*not-table
    "Tranfer(X,-) & Put-Down(X,I) & Not(Table(I)), Reject(Put-Down(X,I))."
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> 
               ^action <a>
              -^table <i>)
    (<o> ^name put-down ^reference-action <a> ^loc <i>)
    (<a> ^isa transfer -^destination)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <o> - )}

sp {keys-and-boxes*reject*goto*current-loc
    "Loc(R,I) & GoTo(I), Reject(GoTo(I))."
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> ^holds <h>)
    (<o> ^name goto ^loc <i>)
    (<p> ^name <p-name>)
    (<h> ^robot <r> ^loc <i>)
    -->
    (<s> ^operator <o> - )}

sp {keys-and-boxes*best*operator*doable
    "Loc(R,I) & Op(X,I), Best(Op(X,I))."    
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> ^holds <h>)
    (<o> ^name << pick-up put-down >> ^loc <i>)
    (<p> ^name <p-name>)
    (<h> ^robot <r> ^loc <i>)
    -->
    (<s> ^operator <o> > )}

sp {keys-and-boxes*reject*operator*door-locked*to-outside
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> ^holds <h1> <h2>)
    (<o> ^name <o-name> ^loc <j> ^done? no)
    (<p> ^name <p-name>)
    (<h1> ^robot <r> ^loc <i>)
    (<h2> ^door <door> ^status locked)
    (<j> -^in <room>)
    (<i> ^in <room>)
    -->
    (<s> ^operator <o> - )} 
           
sp {keys-and-boxes*reject*operator*door-locked*to-inside
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> ^holds <h1> <h2>)
    (<o> ^name <o-name> ^loc <j> ^done? no)
    (<p> ^name <p-name>)
    (<h1> ^robot <r> ^loc <i>)
    (<h2> ^door <door> ^status locked)
    (<j> ^in <room>)
    (<i> -^in <room>)
    -->
    (<s> ^operator <o> - )} 

# sp {keys-and-boxes*compare*goto*better
#    "Loc(R,Not(I)) & GoTo(I) & Op(X,I), Better(GoTo(I),Op(X,I))."        
#    (state <s> ^operator <op-1> + <op-2> + )
#    (state <s> ^problem-space <p> ^holds <h>)
#    (<p> ^name <p-name>)
#    (<op-1> ^name goto ^loc <i>)
#    (<op-2> ^name << pick-up put-down >> ^object <x> ^loc <i>)
#    (<h> ^robot <r> ^loc <> <i>)
#    -->
#    (<s> ^operator <op-1> > <op-2>)}

sp {selection*compare*evaluate-goto*better
    "Loc(R,Not(I)) & GoTo(I) & Op(X,I), Better(GoTo(I),Op(X,I))."        
    (state <s*> ^operator <op-1> + <op-2> + )
    (state <s*> ^problem-space <p*> ^superstate <s1>)
    (<p*> ^name selection)
    (<op-1> ^name evaluate-object ^object <x1>)
    (<op-2> ^name evaluate-object ^object <x2>)
    (<x1> ^name goto ^loc <i>)
    (<x2> ^name << pick-up put-down >> ^object <x> ^loc <i>)
    (state <s1> ^holds <h1>)
    (<h1> ^robot <r> ^loc <> <i>)
    -->
    (<s*> ^operator <op-1> > <op-2>)}

#
#Search Control for Create-Focus, Change-Focus.
#

sp {keys-and-boxes*reject*create-focus
    "Prefer changing an existing focus to creating another."
    (state <s> ^operator <o> + <q> + )
    (<o> ^name create-focus ^done? no)
    (<q> ^name change-focus ^done? no)
    -->
    (<s> ^operator <o> - )}

sp {keys-and-boxes*reject*focus-operator*done*yes
    "Bar re-selecting a focus operator."
    (state <s> ^operator <x> + )
    (<x> ^name << create-focus change-focus >>
         ^done? yes)
    -->
    (<s> ^operator <x> - )}

sp {keys-and-boxes*reject*focus-operator*same-action-and-object
    (state <s> ^operator <q> + )
    (state <s> ^problem-space <p> ^action <i>)
    (<q> ^name << create-focus change-focus >>
         ^action <a>
         ^done? no)
    (<a> ^isa <type> ^object <x>)
    (<i> ^isa <type> ^object <x>)
    -->
    (<s> ^operator <q> - )}

#
#Search Control for Pop, Add, Del, Replace.
#

sp {task-space*compare*pop*indifferent
    (state <s> ^operator <op-1> + <op-2> + )
    (state <s> ^problem-space <p>)
    (<op-1> ^name pop ^done? no)
    (<op-2> ^name pop ^done? no)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <op-1> = <op-2> )}    

sp {task-space*compare*pop*better
    (state <s> ^operator <op-1> + <op-2> + )
    (state <s> ^problem-space <p>)
    (<op-1> ^name pop ^done? no)
    (<op-2> -^name << pop add del replace >>)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <op-1> > <op-2> )}    

# sp {task-space*compare*add-del-replace*indifferent
#    (state <s> ^operator <o> + { <> <o> <q> } + )
#    (state <s> ^problem-space <p>)
#    (<o> ^name { << add del replace >> <o-name> })
#    (<q> ^name <o-name>)
#    (<p> ^name <p-name>)
#    -->
#    (<s> ^operator <o> = <q> )}

sp {task-space*compare*add-del-replace*better
    (state <s> ^operator <o> + { <> <o> <q> } + )
    (state <s> ^problem-space <p>)
    (<o> ^name << add del replace >> )
    (<q> -^name << add del replace >>)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <o> > <q> )}    

###
### SUBSPACE SET-FOCUS:
### INITIAL STATE
###

#
#Initial state of the subspace
#is a duplicate of superstate.
#

sp {impasse-no-change*create*context
    (state <s*> ^impasse no-change ^superstate <s1>)
    (state <s1> ^problem-space <p1>)
    (<p1> ^name keys-and-boxes)
    -->
    (<s*> ^problem-space <p*> 
          ^duplicates* <d>
          ^duplicate-of* <s1>)
    (<p*> ^name set-focus         
          ^default-state-copy yes
          ^default-operator-copy yes
          #attributes to copy or duplicate should be
          #in a separate, task production.
          ^one-level-attributes 
               room + &,
	       box + &,
	       table + &,
	       door + &,
	       outside + &,
	       robot + &,
	       object + &,
               location + &, 
               pursue + &, 
               action + &
          ^two-level-attributes 
               holds + & )}

sp {impasse-no-change*elaborate*state*duplicate*one-level-attributes 
    :default
    (state <s> ^problem-space <p> ^duplicate-of* <x>)
    (<p> ^name <n> ^default-state-copy yes ^one-level-attributes <a>)
    (<x> ^<a> <v>)
    -->
    (<s> ^<a> <v> + & )}

sp {impasse-no-change*elaborate*state*duplicate*id-for-attribute 
    :default 
    (state <s> ^problem-space <p> ^duplicate-of* <x> ^duplicates* <d>)
    (<p> ^name <n> ^default-state-copy yes ^two-level-attributes <a>)
    (<x> ^<a> <id>)
    -->
    (<d> ^<id> <new-id> + = )}

set warnings off
sp {impasse-no-change*elaborate*state*add-attribute-to-duplicate 
    :default
    (state <s> ^problem-space <p> ^duplicates* <d>) 
    (<p> ^name <n> ^default-state-copy yes)
    (<d> ^<id> <new-id>)
    (<id> ^<sub-att> <sub-val>)
    (<d> -^<sub-val>)
    -->
    (<new-id> ^<sub-att> <sub-val> + & )}
set warnings on

set warnings off
sp {impasse-no-change*elaborate*state*add-duplicated-attribute-to-duplicate 
    :default 
    (state <s> ^problem-space <p> ^duplicates* <d>) 
    (<p> ^name <n> ^default-state-copy yes)
    (<d> ^<id> <new-id>)
    (<id> ^<sub-att> <sub-val>)
    (<d> ^<sub-val> <new-val>)
    -->
    (<new-id> ^<sub-att> <new-val> + & )}
set warnings on

sp {impasse-no-change*elaborate*state*add-duplicate-to-state 
    :default 
    (state <s> ^problem-space <p> ^duplicate-of* <x> ^duplicates* <d>)
    (<p> ^default-state-copy yes ^two-level-attributes <att>)
    (<x> ^<att> <id>)
    (<d> ^<id> <new-id>)
    -->
    (<s> ^<att> <new-id> + & )}

###
### SUBSPACE OPERATOR:
### SET-FOCUS
###

sp {set-focus*propose*set-focus
    (state <s> ^problem-space <p>)
    (<p> ^name set-focus)
    -->
    (<s> ^operator <q>)
    (<q> ^name set-focus)}

sp {set-focus*elaborate*set-focus*action*none
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> -^action)
    (<p> ^name set-focus)
    -->
    (<o> ^action none)} 

sp {set-focus*elaborate*set-focus*action
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> ^action <a>)
    (<p> ^name set-focus)
    -->
    (<o> ^action <a> + & )} 

###
### SET-FOCUS SUBSPACE:
### OPERATOR APPLICATION
###

sp {apply*set-focus*action*transfer*object*destination
    (state <s*> ^operator <o*>)
    (state <s*> ^problem-space <p*>
                ^pursue <desired>
                ^superstate <s1>)
    (<o*> ^name set-focus ^action none)
    (<p*> ^name <name>)
    (<desired> ^object <x> ^loc <i>)
    -->
    (<s1> ^operator <q1> + <, <q1> = )
    (<q1> ^name create-focus ^action <a1> ^done? no)
    (<a1> ^isa transfer
          ^super-action none 
          ^object <x> 
          ^destination <i>)}

sp {apply*set-focus*acquire*object
    (state <s*> ^operator <o*>)
    (state <s*> ^problem-space <p*>
                ^holds <holds>
                ^action <action>
                ^superstate <s1>)
    (<o*> ^name set-focus ^action <action>)
    (<holds> ^robot <r> ^holding <> <x>)
    (<action> ^isa transfer ^object <x> ^destination <i>)
    -->
    (<s1> ^operator <q1> + <, <q1> = )
    (<q1> ^name change-focus ^action <a1> ^done? no)
    (<a1> ^isa acquire 
          ^super-action <action> 
          ^object <x>)}
    
sp {apply*set-focus*transfer*object*type*key
    (state <s*> ^operator <o*>)
    (state <s*> ^problem-space <p*>
                ^location <door> 
                ^holds <holds1> <holds2> <holds3>
                ^action <action>
                ^superstate <s1>)
    (<o*> ^name set-focus ^action <action>)
    (<holds1> ^door <door> ^status locked)
    (<door> ^links <room> ^to <i>)
    (<holds2> ^object <x> ^loc <loc-x> <> <door>)
    (<holds3> ^object <k> ^loc <loc-k> <> <door>)
    (<k> ^type key)
    (<action> ^isa transfer ^object <x> ^destination <i>)
    -->
    #no worst preference here.
    (<s1> ^operator <q1> + = )
    (<q1> ^name change-focus ^action <a1> ^done? no)
    (<a1> ^isa transfer 
          ^super-action <action> 
          ^object <k>
          ^destination <door>)}
    
sp {apply*set-focus*transfer*object*hand-free
    (state <s*> ^operator <o*>)
    (state <s*> ^problem-space <p*>
                ^holds <holds1> <holds2>
                ^action <action>
                ^superstate <s1>)
    (<o*> ^name set-focus ^action <action>)
    (<holds1> ^object <x> ^loc <r>)
    (<holds2> ^robot <r> ^holding <x>)
    (<action> ^isa acquire ^object { <> <x> <z> })
    -->
    (<s1> ^operator <q1> + <, <q1> = )
    (<q1> ^name change-focus ^action <a1> ^done? no) 
    (<a1> ^isa transfer 
          ^super-action <action>
          ^object <x>)}
    
###
### TASK SPACE:
### GOAL TEST
###

sp {keys-and-boxes*elaborate*state*desired-of-object*satisfied
    (state <s> ^desired <d>)
    (state <s> ^problem-space <p> ^holds <h>)
    (<d> ^object <x> ^loc <d-loc>)
    (<p> ^name keys-and-boxes)
    (<h> ^object <x> ^loc <d-loc>)
    -->
    (<s> ^satisfied <d> + & )}

sp {task-space*elaborate*state*pursue
    (state <s> ^desired <d> -^satisfied <d>)
    (state <s> ^problem-space <p>)
    (<p> ^name <p-name>)
    -->
    (<s> ^pursue <d> + & )}

sp {task-space*propose*goal-test*top-level
    (state <s> ^superstate nil)
    (state <s> ^problem-space <p>
              -^pursue
              -^success)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> =, <q> + )
    (<q> ^name goal-test ^result-type success)}

sp {task-space*propose*goal-test*look-ahead
    (state <s> ^name implement-evaluate-object)
    (state <s> ^problem-space <p>
              -^pursue
              -^success)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> =, <q> + )
    (<q> ^name goal-test ^result-type success)}

sp {task-space*select*goal-test*better
    (state <s> ^operator <q> + { <> <q> <o> } + )
    (state <s> ^problem-space <p> -^pursue)
    (<q> ^name goal-test)
    (<o> -^name << pop add del replace >>)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> > <o>)}

sp {apply*goal-test*top-level
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>
              ^desired <d>
              ^satisfied <d>
             -^pursue
             -^<r-type> <d>
              ^superstate nil)
    (<q> ^name goal-test ^result-type <r-type>)
    -->
    (<s> ^<r-type> <d> + & )}

sp {apply*goal-test*look-ahead
    (state <s> ^operator <q>)
    (state <s> ^name implement-evaluate-object 
              ^problem-space <p>
              ^desired <d>
              ^satisfied <d>
             -^pursue
             -^<r-type> <d>
              ^applied <operator>)
    (<q> ^name goal-test ^result-type <r-type>)
    -->
    (<s> ^<r-type> <d> + & )}

sp {terminate*goal-test
    (state <s> ^operator <q>)
    (state <s> ^problem-space <p>)
    (<q> ^name goal-test)
    (<p> ^name <p-name>)
    -->
    (<s> ^operator <q> @ )}

###
### TASK SPACE: 
### MONITOR STATE AND OPERATORS
###

sp {keys-and-boxes*monitor*state*holds*object*loc
    (state <s> ^problem-space <p> ^holds <h>)
    (<p> ^name keys-and-boxes)
    (<h> ^object <x> ^loc <i>)
    (<x> ^name <x-name>)
    (<i> ^name <i-name>)
    -->
    (write (crlf) 
           |  loc(| <x-name> 
           |,| <i-name> 
           |).|)}
    
sp {keys-and-boxes*monitor*state*holds*robot*loc*holding*no
    (state <s> ^problem-space <p> ^holds <h>)
    (<p> ^name keys-and-boxes)
    (<h> ^robot <r> ^holding nothing ^loc <i>)
    (<i> ^name <i-name>)
    -->
    (write (crlf) 
           |  loc(robot,| <i-name>
           |), holding nothing.|)}
    
sp {keys-and-boxes*monitor*state*holds*robot*loc*holding*yes
    (state <s> ^problem-space <p> ^holds <h>)
    (<p> ^name keys-and-boxes)
    (<h> ^robot <r> ^holding <x> ^loc <i>)
    (<x> ^name <x-name>)
    (<i> ^name <i-name>)
    -->
    (write (crlf) 
           |  loc(robot,| <i-name>
           |), holding(| <x-name> 
           |).|)}
    
sp {keys-and-boxes*monitor*state*holds*door*status
    (state <s> ^problem-space <p> ^holds <h>)
    (<p> ^name keys-and-boxes)
    (<h> ^door <k> ^status <status>)
    -->
    (write (crlf) 
           |  | <status>
           |(door).|)}

sp {keys-and-boxes*desired-state*object*destination
    (state <s> ^desired <d> ^superstate nil)
    (<d> ^object <x> ^loc <i>)
    (<x> ^name <x-name>)
    (<i> ^name <i-name>)
    -->
    (write (crlf) 
           |  desired[loc(| <x-name> 
           |,| <i-name> 
           |)].|)}
  
sp {keys-and-boxes*monitor*action*acquire
    (state <s> ^problem-space <p> ^action <a>)
    (<p> ^name keys-and-boxes)
    (<a> ^isa acquire ^object <x>)
    (<x> ^name <x-name>)
    -->
    (write (crlf) 
    	   |  | <a> 
    	   |: acquire(| <x-name> 
           |).|)}

sp {keys-and-boxes*monitor*action*transfer
    (state <s> ^problem-space <p> ^action <a>)
    (<p> ^name keys-and-boxes)
    (<a> ^isa transfer ^object <x> -^destination)
    (<x> ^name <x-name>)
    -->
    (write (crlf) 
    	   |  | <a> 
    	   |: transfer(| <x-name> 
           |).|)}
           
sp {keys-and-boxes*monitor*action*transfer*destination
    (state <s> ^problem-space <p> ^action <a>)
    (<p> ^name keys-and-boxes)
    (<a> ^isa transfer ^object <x> ^destination <i>)
    (<x> ^name <x-name>)
    (<i> ^name <i-name>)
    -->
    (write (crlf) 
    	   |  | <a> 
    	   |: transfer(| <x-name>   
           |,| <i-name> 
           |).|)}

sp {keys-and-boxes*monitor*tied-operator*pick-up
    (state <s> ^impasse tie ^item <item>)
    (<item> ^name pick-up ^object <x> ^loc <i>)
    (<x> ^name <x-name>)
    (<i> ^name <i-name>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: pick-up(| <x-name> 
           |,| <i-name> 
    	   |).|)}

sp {keys-and-boxes*monitor*tied-operator*put-down
    (state <s> ^impasse tie ^item <item>)
    (<item> ^name put-down ^object <x> ^loc <i>)
    (<x> ^name <x-name>)
    (<i> ^name <i-name>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: put-down(| <x-name> 
           |,| <i-name> 
    	   |).|)}

sp {keys-and-boxes*monitor*tied-operator*goto
    (state <s> ^impasse tie ^item <item>)
    (<item> ^name goto ^loc <i>)
    (<i> ^name <i-name>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: goto(| <i-name> 
    	   |).|)}

sp {keys-and-boxes*monitor*operator-application*pick-up
    (state <s> ^operator <o>)
    (state <s> ^holds <h1> <h2>)
    (<o> ^name pick-up ^object <x> ^loc <i>)
    (<x> ^name <x-name>)
    (<i> ^name <i-name>)
    (<h1> ^object <x> ^loc <r>)
    (<h2> ^robot <r> ^holding <x> ^loc <i>)
    -->
    (write (crlf) 
           |  pick-up(| <x-name>
           |,| <i-name> 
           |).|)}

sp {keys-and-boxes*monitor*operator-application*put-down
    (state <s> ^operator <o>)
    (state <s> ^holds <h1> <h2>)   
    (<o> ^name put-down ^object <x> ^loc <i>)
    (<x> ^name <x-name>)
    (<i> ^name <i-name>)
    (<h1> ^object <x> ^loc <i>)
    (<h2> ^robot <r> ^holding nothing ^loc <i>)
    -->
    (write (crlf) 
           |  put-down(| <x-name>
           |,| <i-name> 
           |).|)}

sp {keys-and-boxes*monitor*operator-application*goto*holding*no
    (state <s> ^operator <o>)
    (state <s> ^holds <h>)   
    (<o> ^name goto ^loc <i>)
    (<i> ^name <i-name>)
    (<h> ^robot <r> ^holding nothing ^loc <i>)
    -->
    (write (crlf) 
           |  goto(| <i-name> 
           |), while holding nothing.|)}

sp {keys-and-boxes*monitor*operator-application*goto*holding*yes
    (state <s> ^operator <o>)
    (state <s> ^holds <h>)   
    (<o> ^name goto ^loc <i>)
    (<i> ^name <i-name>)
    (<h> ^robot <r> ^holding <x> ^loc <i>)
    (<x> ^name <x-name>) 
    -->
    (write (crlf) 
           |  goto(| <i-name> 
           |), while holding(| <x-name>
           |).|)}

### eof of kab.s (Version: NNPSCM)


