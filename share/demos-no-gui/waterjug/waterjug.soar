###
### FILE               : waterjug.s (NNPSCM)
###

###
### AUTHOR(1)          : Brian.G.Milnes [ Soar 5.1.x ]
###

###
### CREATED(1)         : Nov  6, 89
###

###
### MODIFIED(7)        : Aug 22, 96     [ Soar 7.0.3 ] Sayan Bhattacharyya
### MODIFIED(7)        : Nov 28, 94     [ Soar 6.2.4 ] Aladin.Akyurek
### MODIFIED(6)        : Sep 28, 94     [ Soar 6.2.4 ] Aladin.Akyurek
### MODIFIED(5)        : Aug 25, 94     [ Soar 6.2.3 ] Aladin.Akyurek
### MODIFIED(4)        : Aug  4, 94     [ Soar 6.2.3 ] Aladin.Akyurek
### MODIFIED(3)        : Aug  3, 94     [ Soar 6.2.3 ] Aladin.Akyurek
### MODIFIED(2)        : May 15, 93     [ Soar 6.0.7 ] Aladin.Akyurek
### MODIFIED(1)        : Dec  9, 89     [ ?          ] Bob.Doorenbos
###

###
### May 15, 93         : Modernized both style and code# simplified
###                      computations needed for proposing and
###                      applying the pour operator# replaced
###                      productions for tracing state and operator 
###                      applications/selections; changed the mechanism
###                      to save the last operator applied.
### Aug  3, 94         : The operator pour(3:3,5:2) could not apply,
###                      now it does. Simplified the proposal of the
###                      pour operator. Added productions to trace
###                      the tied operators plus some other minor changes.
###                      Added also a psych note with references. 
### Aug  4, 94         : Converted to Soar 6.2.3/NNPSCM.
### Aug 25, 94         : Added the statement (excise default*pass-back-success) 
###                      to remove the production in question from the default set. 
###                      The reason for this is that the task could not run 
###                      to completion with certain, rare sequences of
###                      evaluations during lookahead, because this
###                      production causes wrong learning.     
### Sep 28, 94         : The rule default*pass-back-success in the default set
###                      has been modified in the version that supersedes 6.2.3#
###                      therefore the excise statement has been removed.
### Nov 28, 94         : Added 2 controle rules: One for the top level which
###                      makes Emptying a not completely full jug worst;
###                      The other biases Soar in the selection space
###                      to evaluate Pour before Empty or Fill.
###                           

###
### ABSTRACT. These Soar productions implement the waterjug task.
### The task is to find the sequence of steps that fill the three gallon 
### jug with one gallon of water.  There are a well that has an infinite
### amount of water, a five gallon jug, and a three gallon jug.
###

###
### A PSYCHOLOGICAL NOTE. The present set of productions could be used as a
### starting point to study models of and issues associated with (variant) 
### water jug tasks. Relevant references are listed below.
###

###
### REFERENCES. [1] Atwood, M. E., & Polson, P. G. (1976). A process 
### model for water jug problems. Cognitive Psychology, 8, 191-216.
###             [2] Ernst, G. W., & Newell, A. (1969). GPS: A case study in
### generality and problem solving. New York: Academic Press.
###             [3] Mortensen, U. (1973). Models for some elementary
### problem solving processes. In A. Elithorn & D. Jones (Eds.), Artificial
### and human thinking. San Francisco, CA: Jossey-Bass.
###

###
### DESCRIPTION. The task problem space has three operators: empty, 
### fill, and pour. Empty empties a jug into the well. Fill fills up
### a jug from the well. Pour pours some or all of the contents
### from one jug into the other jug. Pour can only pour out the contents 
### of the jug until the source is empty or the destination is full.
### State Structure: Each jug has slots to record its capacity [volume],
### the amount of water it contains [contents], and the capacity 
### available [free] which is the volume minus the contents.
###   (state s1 ^jug j1)
###   (jug j1 ^volume v1 ^contents c1 ^free f1),
### where v1, c1, and f1 are numbers.
###

package require Soar
source $default


###
### TASK NAME AND
### PROBLEM SPACE
###

sp {top-level*elaborate*state*task*waterjug
    (state <s> ^superstate nil)
    -->
    (<s> ^name waterjug ^problem-space <p>)
    (<p> ^name waterjug ^default-state-copy yes)
    (<p> ^two-level-attributes jug + & )}

###
### WATERJUG:
### DESIRED STATE
###

sp {waterjug*elaborate*state*desired-state
    (state <s> ^problem-space <p> ^superstate nil)
    (<p> ^name waterjug) 
    -->
    (<s> ^desired <d>)
    (<d> ^jug <j> ^contents 1)
    (<j> ^volume 3)}

###
### WATERJUG:
### INITIAL STATE
###

sp {waterjug*elaborate*state*initial-state
    (state <s> ^name waterjug
               ^problem-space <p> 
               ^desired <d>)
    (<p> ^name waterjug)
    (<d> ^jug <i> ^contents 1)
    (<i> ^volume 3)
    -->
    (<s> ^jug <i> + &, <j> + &)
    (<i> ^name three-gallon
         ^volume 3
         ^contents 0
         ^free 3) 
    (<j> ^name five-gallon
         ^volume 5
         ^contents 0
         ^free 5)}

###
### WATERJUG TASK OPERATORS:
### EMPTY, FILL, AND POUR
###

sp {waterjug*propose*empty 
    "contents(i) > 0 --> empty(i)." 
    (state <s> ^problem-space <p> ^jug <i>)
    (<p> ^name waterjug) 
    (<i> ^contents > 0)
    -->
    (<s> ^operator <o>) 
    (<o> ^name empty
         ^done? no 
         ^jug <i>)}

sp {waterjug*propose*fill
    "contents(i) = 0 --> fill(i)." 
    (state <s> ^problem-space <p> ^jug <i>)
    (<p> ^name waterjug) 
    (<i> ^contents 0)
    --> 
    (<s> ^operator <o>)
    (<o> ^name fill 
         ^done? no 
         ^jug <i>)}

sp {waterjug*propose*pour
    "contents(i) > 0 & free(j) > 0 --> pour(i,j)."
    (state <s> ^problem-space <p> ^jug <i> { <> <i> <j> }) 
    (<p> ^name waterjug) 
    (<i> ^contents <contents> > 0)
    (<j> ^free > 0)
    --> 
    (<s> ^operator <o>)
    (<o> ^name pour 
         ^done? no 
         ^jug <i> 
         ^into <j>)}

###
### WATERJUG:
### OPERATOR APPLICATION
###

sp {apply*empty
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p> ^jug <i>)
    (<o> ^name empty 
         ^done? no 
         ^jug <i>)
    (<p> ^name waterjug)
    (<i> ^volume <volume> 
         ^contents <contents> 
         ^free <free>)
    --> 
    (<i> ^contents 0 <contents> - )
    (<i> ^free <volume> <free> - )
    (<o> ^done? yes no - )}

sp {apply*fill 
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p> ^jug <i>)
    (<o> ^name fill 
         ^done? no 
         ^jug <i>)
    (<p> ^name waterjug) 
    (<i> ^volume <volume> 
         ^contents 0 
         ^free <volume>)
    --> 
    (<i> ^contents <volume> 0 - )
    (<i> ^free 0 <volume> - )
    (<o> ^done? yes no - )}

 ## Apply pour when contents of source jug i is less than 
 ## or equal to the capacity available of the destination jug j.
  #
  
sp {apply*pour*source*contents*less-or-equal
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p> ^jug <i> <j>)
    (<o> ^name pour 
         ^done? no 
         ^jug <i> 
         ^into <j>)
    (<p> ^name waterjug)
    (<j> ^volume <jvol> 
         ^contents <jcon> 
         ^free <jfree>)
    (<i> ^volume <ivol> 
         ^contents <icon> <= <jfree> 
         ^free <ifree>)
    --> 
    (<i> ^contents 0 <icon> - )
    (<i> ^free <ivol> <ifree> - )
    (<j> ^contents (+ <jcon> <icon>) <jcon> - ) 
    (<j> ^free (- <jfree> <icon>) <jfree> - )
    (<o> ^done? yes no - )}

 ## Implement pour when contents of source jug i is more
 ## than the capacity available of the destination jug j.
  #
  
sp {apply*pour*source*contents*more
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p> ^jug <i> <j>)
    (<o> ^name pour 
         ^done? no 
         ^jug <i> 
         ^into <j>)
    (<p> ^name waterjug)
    (<j> ^volume <jvol> 
         ^contents <jcon> 
         ^free <jfree>)
    (<i> ^volume <ivol> 
         ^contents <icon> > <jfree> 
         ^free <ifree>)
    --> 
    (<i> ^contents (- <icon> <jfree>) <icon> - )
    (<i> ^free (+ <ifree> <jfree>) <ifree> - )
    (<j> ^contents <jvol> <jcon> - ) 
    (<j> ^free 0 <jfree> - )
    (<o> ^done? yes no - )}

sp {waterjug*save*operator*applied*first-time
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p> -^applied)
    (<o> ^name <name>)
    (<p> ^name waterjug)
    -->
    (<s> ^applied <o>)}
	    
sp {waterjug*save*operator*applied*later-times
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p> ^applied <q> <> <o>)
    (<o> ^name <name>)
    (<p> ^name waterjug)
    -->
    (<s> ^applied <o> <q> - )}
	    
###
### WATERJUG:
### OPERATOR TERMINATION
###

sp {terminate*empty
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p>)
    (<o> ^name empty ^done? yes)
    (<p> ^name waterjug)
    --> 
    (<s> ^operator <o> @ )}

sp {terminate*fill
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p>)
    (<o> ^name fill ^done? yes)
    (<p> ^name waterjug)
    --> 
    (<s> ^operator <o> @ )}

sp {terminate*pour
    (state <s> ^operator <o>)
    (state <s> ^problem-space <p>)
    (<o> ^name pour ^done? yes)
    (<p> ^name waterjug)
    --> 
    (<s> ^operator <o> @ )}

###
### WATERJUG: 
### STATE EVALUATION
###

###
### EVALUATION:
### STATE FAILURE
###

sp {waterjug*evaluate*state*failure*state-duplicate
    #<s*> is the current context, i.e., last context,
    #in which <o*> is applied.
    (state <s*> ^desired <desired>
                ^problem-space <space>
                ^jug <jug-i> <jug-j>
		^applied <o*>)
   -(state <state> ^superstate <s*>)
    (<jug-i> ^volume 3 ^contents <x>)
    (<jug-j> ^volume 5 ^contents <y>)
    #<s1> is a parent context of <s*>.
    (state { <> <s*> <s1> } ^problem-space <space> 
                ^jug <jug-m> <jug-n>)
    (<jug-m> ^volume 3 ^contents <x>)
    (<jug-n> ^volume 5 ^contents <y>)
    --> 
    (<s*> ^failure <desired>)
    (write (crlf) 
           |  Current state | <s*> 
           | is a duplicate of the state | <s1> 
           |.|)}

###
### EVALUATION:
### STATE SUCCESS/GOAL TEST
###

sp {waterjug*evaluate*state*success
    (state <s> ^desired <d>) 
    (state <s> ^problem-space <p> ^jug <j>)
    (<p> ^name waterjug)
    (<j> ^volume 3 ^contents 1)
    --> 
    (<s> ^success <d>)}

###
### WATERJUG: 
### SEARCH CONTROL
###

 ## There are two cases of inverse operators:
 ## fill(jug[i]) followed by empty(jug[i]) or
 ## pour(jug[i],jug[j]) followed by pour(jug[j],jug[i]).
  #

sp {waterjug*inverse*empty*reject
    "Reject empty, inverse of fill."
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> ^applied <q>)
    (<o> ^name empty ^jug <i>)
    (<p> ^name waterjug)
    (<q> ^name fill ^jug <i>)
    --> 
    (<s> ^operator <o> - )}

sp {waterjug*inverse*pour*reject
    "Reject inverse operator."
    (state <s> ^operator <o> + )
    (state <s> ^problem-space <p> ^applied <q>)
    (<o> ^name pour ^jug <i> ^into <j>)
    (<p> ^name waterjug)
    (<q> ^name pour ^jug <j> ^into <i>)
    --> 
    (<s> ^operator <o> - )}

sp {waterjug*empty*jug-not-full*worst
    (state <s> ^operator <o> + )
    (state <s> ^jug <i>)
    (<o> ^name empty ^jug <i>)
    (<i> ^volume <v> ^contents < <v> )
    -->
    (<s> ^operator <o> < )}

 ## The production that follows biases Soar to
 ## consider evaluating Pour before Fill or Empty.
  # 

sp {waterjug*evaluate-object*pour*better
    (state <s> ^operator <o> + )
    (<o> ^name evaluate-object
         ^object <x>)
    (<x> ^name pour)
    -->
    (<s> ^operator <o> > )}

###
### WATERJUG: 
### MONITOR STATE AND
### OPERATORS
###

sp {waterjug*monitor*state 
    (state <s> ^problem-space <p> ^jug <i> <j>)
    (<p> ^name waterjug)
    (<i> ^volume 3 ^contents <icon>)
    (<j> ^volume 5 ^contents <jcon>)
    --> 
    (write (crlf)
           |  3:| <icon> 
           | 5:| <jcon>)}

sp {waterjug*monitor*operator-application*empty
    (state <s> ^operator <o>)
    (<o> ^name empty
         ^done? no 
    	 ^jug <i>)
    (<i> ^volume <volume> ^contents <contents>)
    -->
    (write (crlf) 
    	   |  EMPTY(| <volume> 
    	   |:| <contents> 
    	   |)|)}

sp {waterjug*monitor*operator-application*fill
    (state <s> ^operator <o>)
    (<o> ^name fill 
         ^done? no 
    	 ^jug <i>)
    (<i> ^volume <volume> ^contents <contents>)
    -->
    (write (crlf) 
    	   |  FILL(| <volume> 
    	   |:| <contents> 
    	   |)|)}

sp {waterjug*monitor*operator-application*pour
    (state <s> ^operator <o>)
    (<o> ^name pour 
         ^done? no 
    	 ^jug <i>
    	 ^into <j>)
    (<i> ^volume <ivol> ^contents <icon>)
    (<j> ^volume <jvol> ^contents <jcon>)
    -->
    (write (crlf) 
    	   |  POUR(| <ivol> 
    	   |:| <icon> 
    	   |,| <jvol>
    	   |:| <jcon>
    	   |)|)}

sp {waterjug*monitor*tied-operator*empty
    (state <s> ^impasse tie 
               ^attribute operator 
               ^item <item>)
    (<item> ^name empty ^jug <i>)
    (<i> ^volume <volume> ^contents <contents>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: empty(| <volume> 
    	   |:| <contents> 
    	   |)|)}

sp {waterjug*monitor*tied-operator*fill
    (state <s> ^impasse tie 
               ^attribute operator 
               ^item <item>)
    (<item> ^name fill ^jug <i>)
    (<i> ^volume <volume> ^contents <contents>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: fill(| <volume> 
    	   |:| <contents> 
    	   |)|)}

sp {waterjug*monitor*tied-operator*pour
    (state <s> ^impasse tie 
               ^attribute operator 
               ^item <item>)
    (<item> ^name pour ^jug <i> ^into <j>)
    (<i> ^volume <ivol> ^contents <icon>)
    (<j> ^volume <jvol> ^contents <jcon>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: pour(| <ivol> 
    	   |:| <icon> 
    	   |,| <jvol>
    	   |:| <jcon>
    	   |)|)}

### eof of waterjug.s (Version Type: NNPSCM)

