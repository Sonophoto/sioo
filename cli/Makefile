# Makefile for the Soar  "cli" and libsoarnui.a
# This is a hand rolled Makefile and is not generated by Autotools
# Based on the original included with Soar 8.5.2
# Created by Brig Young, brig@sonophotostudios.com 28-Nov-2015


#TODO config for presence of gcc
# gcc is the standard compiler for SiOO, all extensions are assumed.
CC =			gcc

# Set these to be whatever flags you want to pass to gcc at compile
# time. This is the correct place to do temporary 
# GCC_FLAGS = -g -Wall  ### This is the default line
GCC_FLAGS = -g -Wall 

# Since it is remotely possible this might matter, you are reminded:
# TODO config for ranlib
# RANLIB =		ranlib

# The location of the Soar kernel library, libsoarkernel.a
KERNEL_DIR =		../kernel
KERNEL_LIB_SPEC =	-L$(KERNEL_DIR) -lsoarkernel
KERNEL_INCLUDE_DIR =	../kernel

# System install directory for libs
# TODO this needs configged
LIB_RUNTIME_DIR =	/usr/lib

# Directories for installation
#TODO this needs configged
SRC_DIR =		.
TOP_DIR =		./..

# If this is all we need to guarantee from the ANSI standard then
# gcc handles struct returns by default...
# TODO: Drop this flag if we dont need it.
# or just use --ansi which is essentially K&R ANSI C Edition.
ANSI_FLAGS =		-fpcc-struct-return

# Is this needed if we are using gcc as the required compiler?
# TODO Drop these flags if we don't need them (from the old Makefile.)
SHLIB_CFLAGS =		-fPIC

DEFINE_FLAGS = \
-DSOAR_LIBRARY=\"$(SOAR_LIBRARY)\" \
-DSTDC_HEADERS=1 \
-DHAVE_UNISTD_H=1 \
-DTIME_WITH_SYS_TIME=1 \
-DHAVE_GETHOSTNAME=1 \
-DHAVE_GETTIMEOFDAY=1 \
-DHAVE_GETWD=1 \
#End DEFINE_FLAGS

INCLUDE_FLAGS =	\
-I$(KERNEL_INCLUDE_DIR) \
#End INCLUDE_FLAGS

CFLAGS = \
$(GCC_FLAGS) \
$(ANSI_FLAGS) \
$(SHLIB_CFLAGS) \
$(DEFINE_FLAGS) \
$(INCLUDE_FLAGS) \
#End CFLAGS

# The symbols below provide support for dynamic loading and shared
# libraries.  See configure.in for a description of what the
# symbols mean.  The values of the symbols are normally set by the
# configure script.  You shouldn't normally need to modify any of
# these definitions by hand.
MATH_LIBS =		-lieee -lm
LIBS =			$(KERNEL_LIB_SPEC)  -ldl \
                          $(MATH_LIBS) -lc

# The objects
OBJS =	parsing.o\
	commands.o\
        callbacks.o \
        utilfuncs.o \
        demos/counter_demo.o \
	demos/toh_demo.o \
        linenoise/linenoise.o \
        linenoise/utf8.o

all:	SiOO  lib

# copy and modify main.c and link against this to create your own
# agent interface from scratch with access to cli functions.
lib:	libSiOO.a

# This line builds the executable SiOO or your modified main.c
SiOO:    $(OBJS) main.o 
	$(CC) $(CFLAGS) -o SiOO $(OBJS) main.o $(LIBS) 

tests: tests.o $(OBJS)
	$(CC) $(CFLAGS) -o tests tests.o $(OBJS) $(LIBS)

libSiOO.a: $(OBJS)
	$(AR) $(ARFLAGS) libSiOO.a $(OBJS)

# Since it is remotely possible this might matter...
#	$(RANLIB) libSiOO.a

clean:
	rm -f *.o demos/*.o linenoise/*.o
	rm -f core *~ toh-moves.mov soarerror

distclean:
	rm -f *.o demos/*.o linenoise/*.o
	rm -f core *~ SiOO sioo libSiOO.a toh-moves.mov soarerror .sioo_history

testing:
# Foreach test passed, output " *PASS* Test_00N Description_string_for_test\n"
# If all tests are passed, output " *PASS* SiOO PASSES ALL TESTS\n"
	# ./SiOO cli/testing/test_001
	# ./SiOO cli/testing/test_002
	# ./SiOO cli/testing/test_003
	# ./SiOO cli/testing/test_004
	# ./SiOO cli/testing/test_005
	# ./SiOO cli/testing/test_006


