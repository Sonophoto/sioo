#****************************************************************************
#
#    GNU/       __  __       _         __ _ _      
#      /gmake  |  \/  | __ _| | _____ / _(_) | ___ 
#     /        | |\/| |/ _` | |/ / _ \ |_| | |/ _ \
#    /GPLv3    | |  | | (_| |   <  __/  _| | |  __/
#              |_|  |_|\__,_|_|\_\___|_| |_|_|\___|
#
#            ____  _  ___   ___          ____ _     ___ 
#           / ___|(_)/ _ \ / _ \        / ___| |   |_ _|
#           \___ \| | | | | | | |      | |   | |    | | 
#            ___) | | |_| | |_| |      | |___| |___ | | 
#           |____/|_|\___/ \___/        \____|_____|___|
#                                    
#   FILENAME: cli/Makefile  AUTHOR: "Brig Young" 
#   COPYRIGHT: "2015, 2016 Brig Young" LICENSE: "GPLv3, see LICENSE"         
#   PURPOSE: "Make, Build, Test and Maintain SiOO CLI system"               
#
#   This file probably requires GNU gmake.
#****************************************************************************

#****************************************************************************
#  Documentation 
#         _                                       _        _   _             
#      __| | ___   ___ _   _ _ __ ___   ___ _ __ | |_ __ _| |_(_) ___  _ __  
#     / _` |/ _ \ / __| | | | '_ ` _ \ / _ \ '_ \| __/ _` | __| |/ _ \| '_ \ 
#    | (_| | (_) | (__| |_| | | | | | |  __/ | | | || (_| | |_| | (_) | | | |
#     \__,_|\___/ \___|\__,_|_| |_| |_|\___|_| |_|\__\__,_|\__|_|\___/|_| |_|
#
#    This is a hand rolled Makefile and is not generated by Autotools
#
#     TARGETS: (Defaults are SiOO and lib)
#
#        Sioo: Builds the SiOO CLI named ./SiOO
#         lib: Builds the library libSiOO.a
#       clean: Removes intermediary files leaves binaries
#   distclean: Removes intermediarries and output files
#
#****************************************************************************

#****************************************************************************
#  Compiler Options                       _   _ 
#          __ _  ___ ___       ___  _ __ | |_(_) ___  _ __  ___ 
#         / _` |/ __/ __|     / _ \| '_ \| __| |/ _ \| '_ \/ __|
#        | (_| | (_| (__     | (_) | |_) | |_| | (_) | | | \__ \
#         \__, |\___\___|     \___/| .__/ \__|_|\___/|_| |_|___/
#         |___/                    |_|                         
#
#     NOTE: This is the correct place to do temporary build changes:
#
#****************************************************************************

### gcc is the standard compiler for SiOO, all extensions are assumed.
### TODO config for presence of gcc, abort if not found
CC = gcc

### Set which standard that we want to use:
C_STANDARD = -std=gnu99 -fpcc-struct-return

### This is the essentially ansi setup 
# C_STANDARD = --ansi -fpcc-struct-return

### Use these flags to build data for lcov/gcov usage:
GCC_FLAGS = -g -Wall -fprofile-arcs -ftest-coverage

### This is the basic invocation, debug and all warnings
# GCC_FLAGS = -g -Wall

# Is this needed if we are using gcc as the required compiler?
# TODO Drop these flags if we don't need them (from the old Makefile.)
SHLIB_CFLAGS =		-fPIC

#****************************************************************************
#  Variables                   _       _     _           
#             __   ____ _ _ __(_) __ _| |__ | | ___  ___ 
#             \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|
#              \ V / (_| | |  | | (_| | |_) | |  __/\__ \
#               \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/
#                                           
#****************************************************************************

# Since it is remotely possible this might matter, you are reminded:
# RANLIB =		ranlib

# The location of the Soar kernel library, libsoarkernel.a
KERNEL_DIR =		../kernel
KERNEL_LIB_SPEC =	-L$(KERNEL_DIR) -lsoarkernel
KERNEL_INCLUDE_DIR =	../kernel

# System install directory for libs
# TODO this needs configged
LIB_RUNTIME_DIR =	/usr/lib

# Directories for installation
#TODO this needs configged
SRC_DIR =		.
TOP_DIR =		./..

# TODO: Is any of this CRUFT?
DEFINE_FLAGS = \
-DSOAR_LIBRARY=\"$(SOAR_LIBRARY)\" \
-DSTDC_HEADERS=1 \
-DHAVE_UNISTD_H=1 \
-DTIME_WITH_SYS_TIME=1 \
-DHAVE_GETHOSTNAME=1 \
-DHAVE_GETTIMEOFDAY=1 \
-DHAVE_GETWD=1 \

INCLUDE_FLAGS =	\
-I$(KERNEL_INCLUDE_DIR) \

CFLAGS = \
$(GCC_FLAGS) \
$(C_STANDARD) \
$(SHLIB_CFLAGS) \
$(DEFINE_FLAGS) \
$(INCLUDE_FLAGS) \

# Library specifications
MATH_LIBS =		-lieee -lm
LIBS =			$(KERNEL_LIB_SPEC)  -ldl \
                          $(MATH_LIBS) -lc

# We build all of the source files as individual compilation units and then
# we link the object files together with our external libraries
OBJS =	parsing.o\
        commands.o \
	callbacks.o \
        utilifuncs.o \
        demos/counter_demo.o \
	demos/toh_demo.o \
        linenoise/linenoise.o \
        linenoise/utf8.o


#****************************************************************************
#  Targets          _                       _       
#                __| |_ __ _ _ __ __ _  ___| |_ ___ 
#                \_  __/ _` | '__/ _` |/ _ \ __/ __|
#                  | || (_| | | | (_| |  __/ |_\__ \
#                   \__\__,_|_|  \__, |\___|\__|___/
#                              |___/              
#
#****************************************************************************

# Since it is remotely possible this might matter, you are reminded:
all:	SiOO  lib

# This is not really useful at the moment, it is CRUFT for the future...
lib:	libSiOO.a

# This line builds the executable SiOO or your modified main.c
SiOO:    $(OBJS) main.o 
	$(CC) $(CFLAGS) -o SiOO $(OBJS) main.o $(LIBS) 

tests: tests.o $(OBJS)
	$(CC) $(CFLAGS) -o tests tests.o $(OBJS) $(LIBS)

libSiOO.a: $(OBJS)
	$(AR) $(ARFLAGS) libSiOO.a $(OBJS)

# Since it is remotely possible this might matter...
#	$(RANLIB) libSiOO.a

clean:
	rm -f *.o demos/*.o linenoise/*.o *.gcno demos/*.gcno linenoise/*.gcno
	rm -f core *~ toh-moves.mov soarerror

distclean:
	rm -f *.o *.gcno demos/*.o demos/*.gcno linenoise/*.o linenoise/*.gcno
	rm -f core *~ SiOO sioo libSiOO.a toh-moves.mov soarerror .sioo_history

testing:
# Foreach test passed, output " *PASS* Test_00N Description_string_for_test\n"
# If all tests are passed, output " *PASS* SiOO PASSES ALL TESTS\n"
	# ./SiOO cli/testing/test_001
	# ./SiOO cli/testing/test_002
	# ./SiOO cli/testing/test_003
	# ./SiOO cli/testing/test_004
	# ./SiOO cli/testing/test_005
	# ./SiOO cli/testing/test_006


