
### the constraints that (1) only one disk may be moved at a time, and 

multi-attributes holds 11
#multi-attributes upper-disk 
multi-attributes clear 3

learn -off

sp {tower-of-hanoi*propose*state*initial-and-desired-states
    "A 3-Disk Tower of Hanoi Problem." 
    (state <s> ^superstate nil)
    -->
    (<s> 
         ^peg a + 
	 ^peg b + 
	 ^peg c + 
         ^holds <h1> + 
	  	 ^holds <h2> + 
	 	 ^holds <h3> +  
	 	 ^holds <h4> +  
		 ^holds <h5> +  
         ^last-disk1-peg b 
         ^last-disk-moved 2
         ^clear b + 
         ^clear c +  
	 ^upper-disk 1 + )
    (<h1> ^disk 1 ^above 2 ^on a)     
    (<h2> ^disk 2 ^above 3 ^on a)
    (<h3> ^disk 3 ^above 4 ^on a)
    (<h4> ^disk 4 ^above 5 ^on a)
    (<h5> ^disk 5 ^above none ^on a)}


sp {tower-of-hanoi*desired-of-disk*satisfied
    (state <s> ^holds <h1> <h2> <h3> <h4> <h5> )
    (<h1> ^disk 1 ^on c)     
    (<h2> ^disk 2 ^on c)
    (<h3> ^disk 3 ^on c)
    (<h4> ^disk 4 ^on c)
    (<h5> ^disk 5 ^on c)
    -->
    (write (crlf) |Success!|)
    (halt)}


###
### FILE          : tower-of-hanoi8.soar
###

###
### ABSTRACT. This file provides a Soar system to solve the Tower 
### of Hanoi problems. This puzzle "involves three vertical pegs or 
### posts and a number of doughnut-like disks of graduated sizes that
### fit  on the pegs. At the outset, all the disks are arranged pyrami-
### dally on one of the pegs, say A, with the largest disk on the bottom. 
### The task is to move all of the disks to another peg, C, say, under 
### the constraints that (1) only one disk may be moved at a time, and 
### (2) a disk may never be placed on top of another smaller than itself. 
### Any number of disks may be used; the minimum number of moves for
### a solution is (2**n - 1), where n is the number of disks" (Simon, 
### 1975/1979, pp. 230-231).
###

### This version uses search control rules to solve the TOH in the
### minimum number of moves.
### The search control is as follows:
### Always alternate between moving the smallest disk and
### the other exposed disk that can move.  
###  Move the exposed disk to the one place it can move (the other disk
###  that is bigger than it or an empty peg).  
###  Move the smallest disk to the peg it was not at last.
###   This requires remembering the last peg the smallest disk was on,
###    and initializing this to the appropriate peg (the destination peg
###    if there is an even number of disks, and the other peg if there is
###    an odd number of disks).

# SO... Adding this search control to the soar knowledge on the PSCM 
# makes a plain old algorythm...? Right??? BY 3-Dec-2015



###
###
### TOP GOAL: 
### TOWER-OF-HANOI
###

###
### TOWER-OF-HANOI:
### INITIAL-STATE AND DESIRED-STATE
###


###
### PROPOSE OPERATORS TO MOVE DISKS
###
sp { terminate
	(state <s> ^operator <o> -^operator <o> +)
     -->
 	(<s> ^operator <o> @)}

# 8 	7
sp {tower-of-hanoi*propose*move-disk1
    "Target peg is clear."
    (state <s> 
			   ^peg { <> <last-peg> <> <source-peg> <target-peg> }
    	       ^holds <h>
               ^last-disk1-peg <last-peg>
               ^last-disk-moved <> 1)
     (<h> ^disk 1 
          ^on <source-peg>)
    -->
    (<s> ^operator <o>)
    (<o> ^name move-disk
         ^disk 1
         ^from <source-peg> 
         ^to <target-peg>)}


# 7	7
sp {tower-of-hanoi*propose*move-diskn*target-clear
    "Target peg is clear."
    (state <s> 
               ^upper-disk { <> 1 <m-disk> }
			   ^clear <target-peg>
    	       ^holds <h>
               ^last-disk-moved 1)	 
     (<h> ^disk <m-disk> 
         ^on <source-peg>)
    -->
    (<s> ^operator <o>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>)}

# 13	10
sp {tower-of-hanoi*propose*move-diskn*target-not-clear
    "Upper disk on the target peg is larger."
    (state <s>
    	 ^upper-disk { <> 1 <m-disk>}
		 ^upper-disk { > <m-disk> <o-disk> }
         ^holds <h> { <> <h> <i> }
         ^last-disk-moved 1) 	 
    (<h> ^disk <m-disk> 
         ^on <source-peg>)
    (<i> ^disk <o-disk> 
         ^on <target-peg>)
    -->
    (<s> ^operator <o>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg> 
         ^to <target-peg>)}


###
### OPERATOR APPLICATION
###

# 10	9
sp {apply*move-disk*change-slot*on
    (state <s> ^operator <o>
               ^holds <h>)
    (<o> ^name move-disk
         ^disk <m-disk>
         ^from <source-peg> 
         ^to <target-peg>)
    (<h> ^disk <m-disk> 
         ^on <source-peg>)
    -->
    (<h> ^on <target-peg> <source-peg> -)}


# 10	10	
sp {apply*move-disk*change-slot*above*source-clear*target-clear
	(state <s> ^operator <o>
			   ^holds <h>
			   ^clear <target-peg>)
	(<o> ^name move-disk
		 ^disk <m-disk>
		 ^from <source-peg>
		 ^to <target-peg>)
	(<h> ^disk <m-disk> ^above none)
-->
	(<s> ^clear <target-peg> - ^clear <source-peg> +  )}

# 9	10
sp {apply*move-disk*change-slot*above*source-not-clear*target-clear
	(state <s> ^operator <o>
			   ^holds <h> 
			   ^clear <target-peg>)
	(<o> ^name move-disk
		 ^disk <m-disk>
		 ^from <source-peg>
		 ^to <target-peg>)
	(<h> ^disk <m-disk> ^above { <> none <o-disk>} )
-->
	(<s> ^clear <target-peg> - ^upper-disk <o-disk> +  )
	(<h> ^above <o-disk> - ^above none + )}

# 16	13
sp {apply*move-disk*change-slot*above*source-clear*target-not-clear
	(state <s> ^operator <o> ^holds <h> 
               ^holds { <> <h> <h2> } ^upper-disk <o-disk>)
	(<o> ^name move-disk
		 ^disk { <> <o-disk> <m-disk> }
		 ^from <source-peg>
		 ^to <target-peg>)
	(<h> ^disk <m-disk> ^above none)
	(<h2> ^disk <o-disk> ^on <target-peg> )
 -->
	(<s> ^upper-disk <o-disk> - ^clear <source-peg> + )
	(<h> ^above none - ^above <o-disk> +)}

# 15	12
sp {apply*move-disk*change-slot*above*source-not-clear*target-not-clear
	(state <s> ^operator <o> ^holds <h> 
			^holds { <> <h> <h2> } ^upper-disk <o-disk> )
	(<o> ^name move-disk
		 ^disk <m-disk>
		 ^to <target-peg>)
	(<h> ^disk <m-disk> ^above { <> none <u-disk> })
	(<h2> ^disk <o-disk> ^on <target-peg>)
 -->
	(<s> ^upper-disk <o-disk> - ^upper-disk <u-disk> + )
	(<h> ^above <u-disk> - ^above <o-disk> +) }

# 9	9
sp {apply*move-disk*add-clear-source
    (state <s> ^operator <o>
               ^holds <h>)
    (<o> ^name move-disk
         ^disk <m-disk> 
         ^from <source-peg>)
    (<h> ^disk <m-disk> 
         ^above none 
         ^on <source-peg>)
    -->
    (<s> ^clear <source-peg> + )}

### Maintain last-disk-moved

# 4	4
sp {apply*move-disk*record*last-disk-moved
    (state <s> ^operator <o>)
    (<o> ^name move-disk
         ^disk <m-disk>)
    -->
    (<s> ^last-disk-moved <m-disk> + )}

# 5	5
sp {apply*move-disk*remove*last-disk-moved
    (state <s> ^operator <o>
               ^last-disk-moved <old-disk>)
    (<o> ^name move-disk
         ^disk <> <old-disk>)
    -->
    (<s> ^last-disk-moved <old-disk> -)}

### Maintain last peg disk 1 was moved to

# 4 	5
sp {apply*move-disk*record*last-disk1-peg
    (state <s> ^operator <o>)
    (<o> ^name move-disk
         ^disk 1
         ^from <peg>)
    -->
    (<s> ^last-disk1-peg <peg> + )}

# 5 	6
sp {apply*move-disk*remove*last-disk1-peg
     (state <s> ^operator <o>
               ^last-disk1-peg <old-peg>)
    (<o> ^name move-disk
         ^disk 1
         ^from <> <old-peg>)
    -->
    (<s> ^last-disk1-peg <old-peg> -)}


###
### TOWER-OF-HANOI MONITOR
###
    
sp {tower-of-hanoi*monitor*operator-execution*move-disk
    (state <s> ^operator <o>)
   (<o> ^name move-disk
         ^disk <size>
	 ^from <from>
         ^to <to-name>)
    -->
    (write (crlf) 
           | Move Disk:| <size> | from peg: | <from> 
           | to peg | <to-name>)}

excise tower-of-hanoi*monitor*operator-execution*move-disk
### eof of tower-of-hanoi.soar

