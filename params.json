{"name":"Sioo","tagline":"Embeddable Cognitive Architecture based on Soar 8.5.2","body":"#SiOO\r\n\r\n##SiOO is an acronym for State Input Operator Output\r\n\r\nSiOO is an embeddable cognitive architecture based on Soar 8.5.2. It is being enhanced with a *nix style command shell, an embeddable footprint, and modifications to the actual cognitive architecture. Modifications will reflect enhancements beyond human ability (and patience) \r\n\r\nExamples include specialized applications like energy management in the home or office or supervising scientific data collection activities across an entire project. The ability of the system to learn changes the game from preprogrammed but adaptable controllers - to full fledged agents that can seek solutions that were not considered at design time.\r\n\r\n**We do NOT document Domain Modeling or Production Systems. Sorry.**\r\n\r\n**Production Systems** backgrounder:\r\n\r\n Wikipedia has a decent article on \"_Production Systems (Computer Science)_\" if you need a starting point on how these types of software systems are used to model intelligent behaviour.\r\n\r\n**Suggested Reading** includes:\r\n\r\n _Unified Theories of Cognition_ by Allen Newell (Harvard Press), and\r\n \r\n_The Soar Cognitive Architecture_ by John Laird (MIT Press). \r\n\r\n###HOW-TO run the SiOO Command Line Demos\r\n\r\nNote that you need to change to the build directory of the CLI system, and then run `sioo` from that directory or the system won't find the demos(this hassle is a listed bug, yes, its simple, but its complicated too ;-). The demos do work and are run as commands in the CLI , the demos are named `counter-demo` and `toh-demo`. \r\n\r\n**Missionaries and Cannibals Puzzle**\r\nThere is a demo for the Missionaries and Cannibals puzzle that comes as a binary rete network dump. Again, starting in the sioo/cli directory, run `./SiOO` (start fresh from scratch) and try `rete-net -load agents/mac.rete` once it is loaded you can then run it, try 100 Decision Cycle groups: `run 100` run this command 3 to 7 times (it varies) to see the system solve the problem. Notice that it takes hundreds of steps. To watch it run straight through, try `init-soar` to reset the system and then do `run` by itself. The system will blaze through the puzzle leaving a trail of steps. \r\n\r\n**Using Intelligence and Learning**\r\nLets turn on the actual learning system, \"chunking\" and see what happens. try `learn -on`. Next type `learn` you should see a statement that says _learn -on_. Lets reinitialize the system to start all over from scratch with `init-soar`, now we are ready for the next step.\r\n\r\nLearning changes the entire game in these toy domains. Now lets run the MaC simulation with learning on, try `run 100` you may or may not have to type it again. Note how many Decision Cycles(DC) it took to solve the problem. Now type `init-soar` again and do `run`. There is the magic number; once this domain is fully chunked, the system has found and remembered a set of rules that solves this configuration in optimal execution time.\r\n\r\n###HOW-TO use the demos as Reference Designs\r\n\r\nGo to the `cli` directory and read the code. start at main.c. This is terrible advice, but the best available at this time.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}