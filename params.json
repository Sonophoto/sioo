{"name":"SiOO","tagline":"Embeddable Cognitive Architecture based on Soar 8.5.2","body":"#SiOO\r\n\r\n##SiOO is an acronym for State Input Operator Output\r\n\r\nSiOO is an embeddable cognitive architecture based on Soar 8.5.2. It is being enhanced with a *nix style command shell, an embeddable footprint, and modifications to the actual cognitive architecture. Modifications will reflect enhancements beyond human ability (and patience) \r\n\r\n***\r\nSiOO has been made possible by the generous support of Module Master LLC. http://modulemaster.com/rebuilds/about-us/ Module Master supports the principles of Liberated and Open Source and makes all changes to the underlying system available under the GPLv3 License: https://gnu.org/licenses/quick-guide-gplv3.html. SoarSuite 8.5.2 was licensed under a BSD License, that license is in the documentation and the original source.\r\n***\r\n\r\nExamples include specialized applications like energy management in the home or office or supervising scientific data collection activities across an entire project. The ability of the system to learn _\"changes the game\"_ from adaptable but preprogrammed controllers - to full fledged software agents that can seek solutions that were not considered at design time.\r\n***\r\n\r\n###HOW-TO run the SiOO Command Line Demos\r\n\r\nNote that you need to change to the build directory of the CLI system, and then run `sioo` from that directory or the system won't find the demos. (this hassle is a listed bug, yes, its simple, but its complicated too ;-).\r\n\r\n**Missionaries and Cannibals Puzzle**\r\nThere is a demo for the Missionaries and Cannibals puzzle that comes as a binary rete network dump. Again, starting in the sioo/cli directory, run `./SiOO` (start fresh from scratch) and try `rete-net -load agents/mac.rete` once it is loaded you can then run it, try 100 Decision Cycle groups: `run 100` run this command 3 to 7 times (it varies) to see the system solve the problem. Notice that it takes hundreds of steps. To watch it run straight through, try `init-soar` to reset the system and then do `run` by itself. The system will blaze through the puzzle leaving a trail of steps. \r\n\r\n**Using Intelligence and Learning**\r\nLets turn on the actual learning system, \"chunking\" and see what happens. try `learn -on`. Next type `learn` you should see a statement that says _learn -on_. Lets reinitialize the system to start all over from scratch with `init-soar`, now we are ready for the next step.\r\n\r\nLearning changes the entire game in these toy domains. Now lets run the MaC simulation with learning on, try `run 100` you may or may not have to type it again. Note how many Decision Cycles(DC) it took to solve the problem. Now type `init-soar` again and do `run`. There is the magic number; once this domain is fully chunked, the system has found and remembered a set of rules that solves this configuration in optimal execution time.\r\n\r\n**Other Demos**\r\nRestart SiOO from scratch again, just to be sure we clear everything (This IS Alpha software). At the command line you can do either of these:\r\n\r\n`counter-demo` and `toh-demo`\r\n\r\nNext you will try `run 1` and then repeat that to see these demonstrations perform their tasks. Remember you can use any number after `run` and no number at all to run until completed. \r\n\r\n**Visit the Wiki for More Info**\r\n\r\nhttps://github.com/Sonophoto/sioo/wiki\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}