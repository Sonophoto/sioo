###
# Copyright 1995-2004 Soar Technology, Inc., University of Michigan. All 
# rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are 
# met:
# 
#    1.	Redistributions of source code must retain the above copyright 
#       notice, this list of conditions and the following disclaimer. 
# 
#    2.	Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in 
#       the documentation and/or other materials provided with the 
#       distribution. 
# 
# THIS SOFTWARE IS PROVIDED BY THE SOAR CONSORTIUM ``AS IS'' AND 
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE SOAR 
# CONSORTIUM  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
# DAMAGE.
# 
# The views and conclusions contained in the software and documentation 
# are those of the authors and should not be interpreted as representing 
# official policies, either expressed or implied, of Soar Technology, Inc., 
# the University of Michigan, or the Soar consortium.
### 


##
# a simple python script to convert a dmgen problem-space or
# operator from xml format to DOT for creating pretty graphs.
import string
import sys
import DmgenDatamap

class PsOrOpToDot:
   def __init__(self):
      self.f = None           # the file we're writing to

   def Write(self, f, psOrOp):
      self.f = f
      self.visited = {}
      start = psOrOp.GetStartNode()
      self.visitNodes(start)
##      adjs = start.GetAdjacencies()
##      self.visitNode(start, adjs)
##      for a in adjs:      
##         self.f.write('subgraph cluster%d {\n'% id(a))
###         self.f.write('style=filled;\n')
###         self.f.write('color=lightgrey;\n')
##         self.visitNodes(a)
##         self.f.write('}\n')
      
      self.visited = {}
      self.f = None

   ##
   # Override this method to customize node appearance
   def GetNodeAttributes(self, n):
      attrs = ['shape=box',
              'width=0.3',
              'height=0.2',
              'fontname="Helvetica"',
              'fontsize=8',
              'label="%s"'% n.Name] 
      # Color code the node based on LHS vs. RHS.
      if n.Side == 'L':
         pass
      elif n.Side == 'R':
         attrs.extend(['style=filled', 'fillcolor=black', 'fontcolor=white'])
      else:
         attrs.extend(['style=filled', 'fillcolor=lightgrey'])      

      return attrs

   def visitNodes(self, n, breadthFirst = 1):
      visited = self.visited
      queue = [n]
      if breadthFirst:
         popIdx = 0
      else:
         popIdx = -1
         
      while queue:
         n = queue.pop(popIdx)
         # do something with n
         adjs = n.GetAdjacencies()
         self.visitNode(n, adjs)
         for n in adjs:
            if not visited.has_key(id(n)):
               queue.append(n)

   def visitNode(self, n, adjs):
      nId = id(n)
      if self.visited.has_key(nId): return
      
      self.visited[nId] = 1
      attrs = self.GetNodeAttributes(n)
      if attrs:
         self.f.write('%d [%s];\n' % (nId, ','.join(attrs))) # write vert def
      else:
         self.f.write('%d;\n' % (nId, n.Name)) # write vert def
      for a in adjs:
         self.f.write('%d -> %d;\n' % (nId, id(a))) # write edge
         
def printUsage():
   print '-Soar XML Datamap to DOT converter-'
   print 'Usage: python DmXmlToDot.py in.xml out.dot'
   print '   in.xml  = XML PS or Op generated by dmgen.'
   print '   out.dot = A DOT graph file for the PS or Op'
   print 'Run out.dot through DOT to get an image.'

if __name__ == '__main__':
   if len(sys.argv) != 3:
      printUsage()
      sys.exit(1)

   inFileName = sys.argv[1]
   outFileName = sys.argv[2]
   
   psOrOp = DmgenDatamap.PsOrOpXmlLoader().Load(inFileName)
   f = open(outFileName, 'w')
   f.write('digraph G {\n')
   f.write('rankdir=LR\n')
#   f.write('page="8.5,11";\n')
   PsOrOpToDot().Write(f, psOrOp)

   f.write('}\n')
   sys.exit(0)
